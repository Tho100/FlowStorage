<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spire.Spreadsheet</name>
    </assembly>
    <members>
        <member name="M:Spire.Spreadsheet.Forms.Actions.AddCommentAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.AddCommentAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.AddCommentAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveCommentAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveCommentAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveCommentAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.AddOutlineAction">
            <summary>
            Add outline action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.AddOutlineAction.#ctor(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create action to add outline
            </summary>
            <param name="rowOrColumn">Row or column to be added</param>
            <param name="start">Number of line to start add outline</param>
            <param name="count">Number of lines to be added into this outline</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.AddOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.AddOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.AddOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.AutoFillSerialAction">
            <summary>
            Action that performs serial range fill according to given source and target ranges.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.AutoFillSerialAction.SourceRange">
            <summary>
            Source range to be rerferenced.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.AutoFillSerialAction.TargetRange">
            <summary>
            Target range to be filled.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Actions.AutoFillSerialAction.backupedGrid">
            <summary>
            Backuped cells content used to recover the target range.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.BaseOutlineAction">
            <summary>
            Base class for all classes of outline actions
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Actions.BaseOutlineAction.rowOrColumn">
            <summary>
            Outline direction.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.BaseOutlineAction.RowOrColumn">
            <summary>
            Specify row or column outline
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.BaseOutlineAction.#ctor(Spire.Spreadsheet.Forms.RowOrColumn)">
            <summary>
            Create base outline action instance
            </summary>
            <param name="rowOrColumn">Flag to specify row or column</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.BaseOutlineAction.GetRowOrColumnDesc">
            <summary>
            Get description text of outline direction.
            </summary>
            <returns>Text of outline direction.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction">
            <summary>
            Base action for all actions that are used for worksheet operations.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction.Worksheet">
            <summary>
            Instance for the grid control will be setted before action performed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction.Do">
            <summary>
            Do this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction.Undo">
            <summary>
            Undo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction.Redo">
            <summary>
            Redo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>Get friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.ClearOutlineAction">
            <summary>
            Action to clear all outlines
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ClearOutlineAction.#ctor(Spire.Spreadsheet.Forms.RowOrColumn)">
            <summary>
            Create action to clear all outlines on specified range
            </summary>
            <param name="rowOrColumn">The range to clear outlines (row, column or both row and column)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ClearOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ClearOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ClearOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.CollapseOutlineAction">
            <summary>
            Action to collapse outline
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CollapseOutlineAction.#ctor(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create action to collapse outline
            </summary>
            <param name="rowOrColumn">Row or column to find specified outline</param>
            <param name="start">Number of line of specified outline</param>
            <param name="count">Number of lines of specified outline</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CollapseOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CollapseOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CollapseOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.CopyRangeAction">
            <summary>
            Action to copy the specified range from a position to another position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.CopyRangeAction.ContentFlags">
            <summary>
            Specifies the content to be moved: data, borders and styles.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.CopyRangeAction.FromRange">
            <summary>
            Range to be moved
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.CopyRangeAction.ToPosition">
            <summary>
            Position that range will be moved to
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CopyRangeAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Construct this action to move specified range from a position to another position
            </summary>
            <param name="fromRange">range to be moved</param>
            <param name="toPosition">position to be moved to</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CopyRangeAction.Do">
            <summary>
            Do this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CopyRangeAction.Undo">
            <summary>
            Undo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CopyRangeAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.CreateAutoFilterAction">
            <summary>
            Action to create column filter
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.CreateAutoFilterAction.Range">
            <summary>
            Get filter apply range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.CreateAutoFilterAction.AutoColumnFilter">
            <summary>
            Get auto column filter instance created by this action. (Will be null before doing action)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CreateAutoFilterAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create action to create column filter
            </summary>
            <param name="range">filter range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CreateAutoFilterAction.Undo">
            <summary>
            Undo action to remove column filter that is created by this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CreateAutoFilterAction.Do">
            <summary>
            Do action to create column filter
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.CreateAutoFilterAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.ExpandOutlineAction">
            <summary>
            Action to collapse outline
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ExpandOutlineAction.#ctor(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create action instance to expand outline
            </summary>
            <param name="rowOrColumn">Row or column to find specified outline</param>
            <param name="start">Number of line of specified outline</param>
            <param name="count">Number of lines of specified outline</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ExpandOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ExpandOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.ExpandOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.HideColumnsAction">
            <summary>
            Action to hide specified columns
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to hide specified columns.
            </summary>
            <param name="col">zero-based number of column to start hide columns.</param>
            <param name="count">number of columns to be hidden.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideColumnsAction.Do">
            <summary>
            Perform action to hide specified columns.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideColumnsAction.Undo">
            <summary>
            Undo action to show hidden columns.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideColumnsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideColumnsAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.HideRowsAction">
            <summary>
            Hide specified rows action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to hide specified rows.
            </summary>
            <param name="row">Zero-based row index to start hiding.</param>
            <param name="count">Number of rows to be hidden.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideRowsAction.Do">
            <summary>
            Do action to hide specified rows.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideRowsAction.Undo">
            <summary>
            Undo action to show hidden rows.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideRowsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.HideRowsAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction">
            <summary>
            Insert columns action
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction.Column">
            <summary>
            Index of column to insert new columns. Set to Control.ColCount to
            append columns at end of columns.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction.Count">
            <summary>
            Number of columns to be inserted
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for InsertColumnsAction
            </summary>
            <param name="column">Index of column to insert</param>
            <param name="count">Number of columns to be insertted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertColumnsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.InsertRowsAction">
            <summary>
            Insert rows action
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.InsertRowsAction.Row">
            <summary>
            Index of row to insert empty rows. Set to Control.RowCount to 
            append columns at end of rows.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.InsertRowsAction.Count">
            <summary>
            Number of empty rows to be inserted
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for InsertRowsAction
            </summary>
            <param name="row">Index of row to insert</param>
            <param name="count">Number of rows to be inserted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertRowsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertRowsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertRowsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertRowsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.InsertWorksheetAction">
            <summary>
            Action for inserting worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.InsertWorksheetAction.Index">
            <summary>
            Number of worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.InsertWorksheetAction.Worksheet">
            <summary>
            Instance for the grid control will be setted before action performed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertWorksheetAction.#ctor(System.Int32,Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create this action to insert worksheet
            </summary>
            <param name="index">Number of worksheet</param>
            <param name="worksheet">Worksheet instance</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertWorksheetAction.Do">
            <summary>
            Do this action to insert worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertWorksheetAction.Undo">
            <summary>
            Undo this action to remove the inserted worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.InsertWorksheetAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.MergeRangeAction">
            <summary>
            Merge range action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MergeRangeAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create instance for MergeRangeAction with specified range
            </summary>
            <param name="range">The range to be merged</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MergeRangeAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MergeRangeAction.Do">
            <summary>
            Do this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MergeRangeAction.Undo">
            <summary>
            Undo this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MergeRangeAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.MoveRangeAction">
            <summary>
            Action to move specified range from a position to another position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.MoveRangeAction.ContentFlags">
            <summary>
            Specifies the content to be moved: data, borders and styles.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.MoveRangeAction.FromRange">
            <summary>
            Range to be moved.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.MoveRangeAction.ToPosition">
            <summary>
            Position that range will be moved to.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MoveRangeAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Construct this action to move specified range from a position to another position.
            </summary>
            <param name="fromRange">range to be moved.</param>
            <param name="toPosition">position to be moved to.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MoveRangeAction.Do">
            <summary>
            Do this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MoveRangeAction.Undo">
            <summary>
            Undo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.MoveRangeAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.OutlineAction">
            <summary>
            Base class for all classes of single outline action
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.OutlineAction.Start">
            <summary>
            Number of line of start position to outilne
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.OutlineAction.Count">
            <summary>
            Number of lines does outline include
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.OutlineAction.#ctor(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create base outline action instance
            </summary>
            <param name="rowOrColumn">Flag to specify row or column</param>
            <param name="start">Number of line to start add outline</param>
            <param name="count">Number of lines to be added into this outline</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.RemoveColumnsAction">
            <summary>
            Remove columns action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for RemoveColumnsAction
            </summary>
            <param name="column">Index of column start to remove</param>
            <param name="count">Number of columns to be removed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveColumnsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveColumnsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveColumnsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveColumnsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.RemoveOutlineAction">
            <summary>
            Remove outline action
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.RemoveOutlineAction.RemovedOutline">
            <summary>
            Instance of removed outline if operation was successfully
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveOutlineAction.#ctor(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Create action instance to remove outline
            </summary>
            <param name="rowOrColumn">Row or column to find specified outline</param>
            <param name="start">Number of line of specified outline</param>
            <param name="count">Number of lines of specified outline</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveOutlineAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveOutlineAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveOutlineAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>Name of action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.RemoveRangeBorderAction">
            <summary>
            Action of Removing borders from specified range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.RemoveRangeBorderAction.BorderPos">
            <summary>
            Get or set the position of borders to be removed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeBorderAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.BorderPositions)">
            <summary>
            Create instance for SetRangeBorderAction with specified range and border styles.
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="pos">Position of range to set border</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeBorderAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeBorderAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeBorderAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeBorderAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.RemoveRangeDataAction">
            <summary>
            Action to remove data from specified range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeDataAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create action to remove data from specified range.
            </summary>
            <param name="range">data from cells in this range will be removed.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeDataAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeDataAction.Do">
            <summary>
            Do action to remove data from specified range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeDataAction.Undo">
            <summary>
            Undo action to restore removed data.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeDataAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.RemoveRangeStyleAction">
            <summary>
            Remove style from specified range action
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.RemoveRangeStyleAction.Flag">
            <summary>
            Style flag indicates what type of style to be handled.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeStyleAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Create instance for action to remove style from specified range.
            </summary>
            <param name="range">Styles from this specified range to be removed</param>
            <param name="flag">Style flag indicates what type of style should be removed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeStyleAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeStyleAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeStyleAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRangeStyleAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.RemoveRowsAction">
            <summary>
            Remove rows actions
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for RemoveRowsAction
            </summary>
            <param name="row">Index of row start to remove</param>
            <param name="rows">Number of rows to be removed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRowsAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRowsAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRowsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveRowsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.RemoveWorksheetAction">
            <summary>
            Action for removing worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.RemoveWorksheetAction.Index">
            <summary>
            Number of worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.RemoveWorksheetAction.Worksheet">
            <summary>
            Instance for the grid control will be setted before action performed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveWorksheetAction.#ctor(System.Int32,Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create this action to insert worksheet
            </summary>
            <param name="index">Number of worksheet</param>
            <param name="worksheet">Worksheet instance</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveWorksheetAction.Do">
            <summary>
            Do this action to remove worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveWorksheetAction.Undo">
            <summary>
            Undo this action to restore the removed worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.RemoveWorksheetAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetCellDataAction">
            <summary>
            Set data of cell action.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.Row">
            <summary>
            Index of row to set data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.Col">
            <summary>
            Index of column to set data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.Data">
            <summary>
            Data of cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.#ctor(System.Int32,System.Int32,System.Object)">
            <summary>
            Create SetCellValueAction with specified index of row and column.
            </summary>
            <param name="row">index of row to set data.</param>
            <param name="col">index of column to set data.</param>
            <param name="data">data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.#ctor(Spire.Spreadsheet.Forms.CellAdressInfo,System.Object)">
            <summary>
            Create SetCellValueAction with specified index of row and column.
            </summary>
            <param name="pos">position to locate the cell to be set.</param>
            <param name="data">data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.#ctor(System.String,System.Object)">
            <summary>
            Create action to set cell data.
            </summary>
            <param name="address">address to locate specified cell.</param>
            <param name="data">data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.Do">
            <summary>
            Do this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.Undo">
            <summary>
            Undo this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetCellDataAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetColumnsWidthAction">
            <summary>
            Action for adjusting columns width.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetColumnsWidthAction.#ctor(System.Int32,System.Int32,Spire.Spreadsheet.Forms.Actions.SetColumnsWidthAction.WidthGetterHandler)">
            <summary>
            Create instance for SetColsWidthAction
            </summary>
            <param name="col">Index of column start to set</param>
            <param name="count">Number of columns to be set</param>
            <param name="width">Width of column to be set</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetColumnsWidthAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetColumnsWidthAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetColumnsWidthAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetColumnsWidthAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetPartialGridAction">
            <summary>
            Action to set partial grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetPartialGridAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PartialGrid)">
            <summary>
            Create action to set partial grid.
            </summary>
            <param name="range">target range to set partial grid.</param>
            <param name="data">partial grid to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetPartialGridAction.Do">
            <summary>
            Do action to set partial grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetPartialGridAction.Undo">
            <summary>
            Undo action to restore setting partial grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetPartialGridAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>Friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction">
            <summary>
            Action to set borders to specified range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction.Borders">
            <summary>
            Borders to be set
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.BorderPositions,Spire.Spreadsheet.Forms.BorderStyle)">
            <summary>
            Create action that perform setting border to a range
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="pos">Position of range to set border</param>
            <param name="styles">Style of border</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.RangeBorderInfo[])">
            <summary>
            Create action that perform setting border to a range
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="styles">Style of border</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeBorderAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetRangeDataAction">
            <summary>
            Create action to set data into specified range of spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.Object[0:,0:])">
            <summary>
            Create action to set data into specified range of spreadsheet.
            </summary>
            <param name="range">range to set specified data.</param>
            <param name="data">data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataAction.Do">
            <summary>
            Do action to set data into specified range of spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataAction.Undo">
            <summary>
            Undo action to remove data which has been set into specified range of spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetRangeDataFormatAction">
            <summary>
            Set range data format action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataFormatAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Create instance for SetRangeDataFormatAction.
            </summary>
            <param name="range">Range to be appiled this action.</param>
            <param name="format">Format type of cell to be set.</param>
            <param name="dataFormatArgs">Argument belongs to format type to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataFormatAction.Do">
            <summary>
            Do this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataFormatAction.Undo">
            <summary>
            Undo this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataFormatAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeDataFormatAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns>friendly name of this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction">
            <summary>
            Action for set styles to specified range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.Style">
            <summary>
            Styles to be set
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Create an action to set styles into specified range
            </summary>
            <param name="row">Zero-based number of start row</param>
            <param name="col">Zero-based number of start column</param>
            <param name="rows">Number of rows in the range</param>
            <param name="cols">Number of columns in the range</param>
            <param name="style">Styles to be set</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.#ctor(System.String,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Create an action to set styles into specified range
            </summary>
            <param name="address">Address to locate the cell or range on spreadsheet (Cannot specify named range for this method)</param>
            <param name="style">Styles to be set</param>
            <exception cref="T:Spire.Spreadsheet.Forms.InvalidAddressException">Throw if specified address or name is invalid</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.Utility.CellStyle,System.String)">
            <summary>
            Create an action that perform set styles to specified range
            </summary>
            <param name="range">Range to be appiled this action</param>
            <param name="style">Style to be set to specified range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.GetName">
            <summary>
            Returns friendly name for this action.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRangeStyleAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.SetRowsHeightAction">
            <summary>
            Set height of row action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRowsHeightAction.#ctor(System.Int32,System.Int32,Spire.Spreadsheet.Forms.Actions.SetRowsHeightAction.HeightGetterHandler)">
            <summary>
            Create instance for SetRowsHeightAction
            </summary>
            <param name="row">Index of row start to set</param>
            <param name="count">Number of rows to be set</param>
            <param name="height">New height to set to specified rows</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRowsHeightAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRowsHeightAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRowsHeightAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.SetRowsHeightAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.StepRangeFontSizeAction">
            <summary>
            Make font size larger or smaller action.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.StepRangeFontSizeAction.Enlarge">
            <summary>
            True if this action making font size larger.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.StepRangeFontSizeAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.Boolean)">
            <summary>
            Create instance for this action with specified range and enlarge flag.
            </summary>
            <param name="range">Specified range to apply this action</param>
            <param name="enlarge">True to set text larger, false to set smaller</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.StepRangeFontSizeAction.Do">
            <summary>
            Do this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.StepRangeFontSizeAction.Undo">
            <summary>
            Undo this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.StepRangeFontSizeAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.StepRangeFontSizeAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.UnhideColumnsAction">
            <summary>
            Unhide specified columns action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideColumnsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to show hidden columns
            </summary>
            <param name="col">Number of column start to unhide</param>
            <param name="count">Number of columns to be unhidden</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideColumnsAction.Do">
            <summary>
            Do action to show hidden columns
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideColumnsAction.Undo">
            <summary>
            Do action to hide specified visible columns
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideColumnsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideColumnsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>friendly name of this action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.UnhideRowsAction">
            <summary>
            Action to unhide specified rows.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideRowsAction.#ctor(System.Int32,System.Int32)">
            <summary>
            Create action to show specified rows.
            </summary>
            <param name="row">number of row to start unhidden.</param>
            <param name="count">number of rows to be unhidden.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideRowsAction.Do">
            <summary>
            Do action to show specified hidden rows.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideRowsAction.Undo">
            <summary>
            Undo action to hide visible rows.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideRowsAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnhideRowsAction.GetName">
            <summary>
            Get friendly name of this action
            </summary>
            <returns>firendly name of this action</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.UnmergeRangeAction">
            <summary>
            Unmerge range action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnmergeRangeAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create instance for UnmergeRangeAction with specified range.
            </summary>
            <param name="range">The range to be unmerged</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnmergeRangeAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnmergeRangeAction.Do">
            <summary>
            Do this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnmergeRangeAction.Undo">
            <summary>
            Undo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.UnmergeRangeAction.GetName">
            <summary>
            Get friendly name of this action.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.WorkbookAction">
            <summary>
            Represents an action of workbook.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.WorkbookAction.Workbook">
            <summary>
            Get the workbook instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorkbookAction.#ctor(Spire.Spreadsheet.Forms.IWorkbook)">
            <summary>
            Create workbook action with specified workbook instance.
            </summary>
            <param name="workbook"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorkbookAction.Do">
            <summary>
            Do this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorkbookAction.Undo">
            <summary>
            Undo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorkbookAction.Redo">
            <summary>
            Redo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorkbookAction.GetName">
            <summary>
            Get the friendly name of this action.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.WorksheetActionGroup">
            <summary>
            The action group is one type of RGAction to support Do/Undo/Redo a series of actions.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.WorksheetActionGroup.Actions">
            <summary>
            Actions stored in this list will be Do/Undo/Redo together
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetActionGroup.#ctor">
            <summary>
            Create instance for RGActionGroup
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetActionGroup.Do">
            <summary>
            Do all actions stored in this action group
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetActionGroup.Undo">
            <summary>
            Undo all actions stored in this action group
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetActionGroup.GetName">
            <summary>
            Get friendly name of this action group
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.WorksheetReusableAction">
            <summary>
            Reusable action is one type of RGAction to support repeat operation
            to a specified range. It is good practice to make all actions with 
            a range target to inherit from this class.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.WorksheetReusableAction.Range">
            <summary>
            Range to be appiled this action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Constructor of RGReusableAction 
            </summary>
            <param name="range">Range to be applied this action</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup">
            <summary>
            Reusable action group is one type of RGActionGroup to support repeat 
            operation to a specified range. It is good practice to make all reusable 
            action groups to inherit from this class.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup.Actions">
            <summary>
            All reusable actions stored in this list will be performed together.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Constructor of ReusableActionGroup
            </summary>
            <param name="range">Range to be appiled this action group</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.Collections.Generic.List{Spire.Spreadsheet.Forms.Actions.WorksheetReusableAction})">
            <summary>
            Constructor of ReusableActionGroup
            </summary>
            <param name="range">Range to be appiled this action group</param>
            <param name="actions">Action list to be performed together</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup.Do">
            <summary>
            Do all actions stored in this action group
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup.Undo">
            <summary>
            Undo all actions stored in this action group
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup.GetName">
            <summary>
            Get friendly name of this action group
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Actions.WorksheetReusableActionGroup.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create cloned reusable action group from this action group
            </summary>
            <param name="range">Specified new range to apply this action group</param>
            <returns>New reusable action group cloned from this action group</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorkbook.Worksheets">
            <summary>
            Get the collection of worksheets
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorkbook.InsertWorksheet(System.Int32,Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Insert worksheet into workbook before specified index
            </summary>
            <param name="index">Zero-based number of workbook to insert specified worksheet</param>
            <param name="worksheet">Worksheet to be inserted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorkbook.RemoveWorksheet(System.Int32)">
            <summary>
            Remove specified worksheet from workbook by specified index
            </summary>
            <param name="index">Zero-based number of worksheet to be removed</param>
            <returns>True if specified worksheet can be found, and removed successfully</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INegativeProgressControl.Worksheet">
            <summary>
            Gets worksheet of button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INegativeProgressControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INegativeProgressControl.PositiveColor">
            <summary>
            Get or set the top color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INegativeProgressControl.NegativeColor">
            <summary>
            Get or set the bottom color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INegativeProgressControl.LinearGradient">
            <summary>
            Determines whether or not display a linear gradient color on progress bar.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INegativeProgressControl.DisplayCellText">
            <summary>
            Determines whether or not display the cell text or value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INegativeProgressControl.LimitedInsideCell">
            <summary>
            Determines whether or not force to display the progress inside cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IProgressControl.Worksheet">
            <summary>
            Gets worksheet of button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IProgressControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IProgressControl.TopColor">
            <summary>
            Get or set the top color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IProgressControl.BottomColor">
            <summary>
            Get or set the bottom color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IRadioButtonControl.Worksheet">
            <summary>
            Gets worksheet of button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IRadioButtonControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IRadioButtonControl.Checked">
            <summary>
            Indicates whether the check box is in the checked.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.Worksheet">
            <summary>
            Get worksheet of shape;
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.ShapeType">
            <summary>
            Get type of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.Comment">
            <summary>
            Get comment.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.RotateAngle">
            <summary>
            Get or set rotate angle of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.BackColor">
            <summary>
            Get or set back color of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.ForeColor">
            <summary>
            Get or set fore color of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.LineColor">
            <summary>
            Get or set line color of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.LineWidth">
            <summary>
            Get and set line width of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.FontName">
            <summary>
            Get or set font name of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.FontSize">
            <summary>
            Get or set font size of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.FontStyles">
            <summary>
            Get font styles of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.FontColor">
            <summary>
            Get and set font color of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.HorizontalAlignment">
            <summary>
            Get or set horizontal alignment of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.VerticalAlignment">
            <summary>
            Get or set vertical alignment of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.Text">
            <summary>
            Get or set the text displayed inside this shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.LeftColumn">
            <summary>
            Get or set the left column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.TopRow">
            <summary>
            Get or set the top row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.HorizontalOffset">
            <summary>
            Get or set the horizontal offset from its left column, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.VerticalOffset">
            <summary>
            Get or set the vertical offset from its top row, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.Width">
            <summary>
            Get or set the width, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.Height">
            <summary>
            Get or set the height, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IShape.IsTextWrap">
            <summary>
            Get or set the text in shape is word wrap;
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Shape.ShapeType">
            <summary>
            Get type of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Shape.LeftColumn">
            <summary>
            Get or set the left column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Shape.TopRow">
            <summary>
            Get or set the top row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Shape.HorizontalOffset">
            <summary>
            Get or set the horizontal offset from its left column, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Shape.VerticalOffset">
            <summary>
            Get or set the vertical offset from its top row, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Shape.Width">
            <summary>
            Get or set the width, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Shape.Height">
            <summary>
            Get or set the height, in unit of pixel.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SheetType">
            <summary>
            Specifies the worksheet type.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SheetType.VB">
            <summary>
            Visual Basic module
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SheetType.Worksheet">
            <summary>
            Worksheet module
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SheetType.Chart">
            <summary>
            Chart module
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SheetType.BIFF4Macro">
            <summary>
            BIFF4 Macro sheet module
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SheetType.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ToolBar.FormulaBox">
            <summary>
            FormulaBar
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ToolBar.FormulaBox.Spreadsheet">
            <summary>
            Gets or sets a Spreadsheet that formla textbox attch to.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ToolBar.FormulaBox.FormulaIconVisible">
            <summary>
            Indicates whether Formula icon is visible.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ToolBar.FormulaBox.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <!-- 对于成员“M:Spire.Spreadsheet.Forms.ToolBar.FormulaBox.#ctor(Spire.Spreadsheet.Forms.Spreadsheet)”忽略有格式错误的 XML 注释 -->
        <member name="F:Spire.Spreadsheet.Forms.ToolBar.FormulaBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ToolBar.FormulaBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ToolBar.FormulaBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ToolBar.FormulaText.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ToolBar.FormulaText.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ToolBar.FormulaText.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ToolBar.NameBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ToolBar.NameBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ToolBar.NameBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Editor.PropertyPages.AlignmentPage.Done">
            <summary>
            Setting dialog will be closed when this event rasied
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Editor.PropertyPages.AlignmentPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.AlignmentPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.AlignmentPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Editor.PropertyPages.ProtectionPage.Done">
            <summary>
            Setting dialog will be closed when this event rasied
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Editor.PropertyPages.ProtectionPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.ProtectionPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.ProtectionPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction">
            <summary>
            Action to set range read-only.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction.SetToReadonly">
            <summary>
            The read-only value to be set.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.Boolean)">
            <summary>
            Create instance of action to set range read-only value.
            </summary>
            <param name="range">The range to be applied.</param>
            <param name="setToReadonly">The read-only value to be set.</param>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction.readonlyBackup">
            <summary>
            Backup all values of read-only cell from worksheet in order to undo this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction.Do">
            <summary>
            Do this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction.Undo">
            <summary>
            Undo this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction.GetName">
            <summary>
            Returns a friendly name for this action.
            </summary>
            <returns>The string name.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Editor.PropertyPages.SetRangeReadonlyAction.Clone(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create a copy from this action in order to apply the operation to another range.
            </summary>
            <param name="range">New range where this operation will be appiled to.</param>
            <returns>New action instance copied from this action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage">
            <summary>
            Border setting dialog panel
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage.#ctor(Spire.Spreadsheet.Forms.Spreadsheet)">
            <summary>
            Create dialog panel for border settings
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage.Done">
            <summary>
            Setting dialog will be closed when this event rasied
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage.LoadPage">
            <summary>
            Initialize dialog panel
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage.CreateUpdateAction">
            <summary>
            Create action to update spreadsheet
            </summary>
            <returns></returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.BorderPropertyPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.BorderSetterControl.ReadFromGrid(Spire.Spreadsheet.Forms.Spreadsheet)">
            <summary>
            Load border info from spreadsheet
            </summary>
            <param name="sheet">current worksheet instance</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.PropertyPages.FillPage.Done">
            <summary>
            Setting dialog will be closed when this event rasied
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PropertyPages.FillPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.FillPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.FillPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.PropertyPages.FontPage.Done">
            <summary>
            Setting dialog will be closed when this event rasied
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PropertyPages.FontPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.FontPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.FontPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PropertyPages.FormatPage.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.FormatPage.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.FormatPage.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PropertyPages.PropertyForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.PropertyForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PropertyPages.PropertyForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.All">
            <summary>
            Sets all four border sides.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.AllColor">
            <summary>
            Sets all four border sides.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBorders.SetBorderLineType(Spire.Spreadsheet.Forms.Utility.BorderType,Spire.Spreadsheet.Forms.Utility.BorderLineType)">
            <summary>
            Set line type of the border.
            </summary>
            <param name="borderType"></param>
            <param name="borderLineType"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBorders.SetBorderColor(Spire.Spreadsheet.Forms.Utility.BorderType,System.Drawing.Color)">
            <summary>
            Set border's color.
            </summary>
            <param name="borderType"></param>
            <param name="color"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBorders.SetBorderStyle(Spire.Spreadsheet.Forms.Utility.BorderType,Spire.Spreadsheet.Forms.BorderStyle)">
            <summary>
            Set border's BorderStyle.
            </summary>
            <param name="borderType"></param>
            <param name="borderStyle"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBorders.CopyBorders(Spire.Spreadsheet.Forms.CellBorders)">
            <summary>
            Copy borders form other cell's borders.
            </summary>
            <param name="sourceBorders"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBorders.GetBorderColor(Spire.Spreadsheet.Forms.Utility.BorderType)">
            <summary>
            Get border's color.
            </summary>
            <param name="borderType"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBorders.GetBorderLineType(Spire.Spreadsheet.Forms.Utility.BorderType)">
            <summary>
            Get line type of the border.
            </summary>
            <param name="borderType"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBorders.GetBorderStyle(Spire.Spreadsheet.Forms.Utility.BorderType)">
            <summary>
            Get border's BorderStyle.
            </summary>
            <param name="borderType"></param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.Item(Spire.Spreadsheet.Forms.Utility.BorderType)">
            <summary>
            Returns the border line type.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.Top">
            <summary>
            Gets or sets the top border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.Left">
            <summary>
            Gets or sets the left border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.Right">
            <summary>
            Gets or sets the right border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.DiagonalDown">
            <summary>
            Gets or sets the diagonal down border.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.DiagonalUp">
            <summary>
            Gets or sets the diagonal down border.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.TopColor">
            <summary>
            Gets or sets the top border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.LeftColor">
            <summary>
            Gets or sets the left border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.RightColor">
            <summary>
            Gets or sets the right border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.DiagonalDownColor">
            <summary>
            Gets or sets the diagonal down border.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBorders.DiagonalUpColor">
            <summary>
            Gets or sets the diagonal down border.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellActionEventHandler">
            <summary>
            Represents actived cell changed event.
            </summary>
            <param name="sender"></param>
            <param name="cell"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellKeyEventHandler">
            <summary>
            Handle cell key events.
            </summary>
            <param name="sender">sender object.</param>
            <param name="info">cell address info</param>
            <param name="key">key data</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellObjectBase">
            <summary>
            Cell Object base
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellObjectBase.row">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellObjectBase.col">
            <summary>
            
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellObjectBase.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellObjectBase.#ctor(Spire.Spreadsheet.Forms.IWorksheet,System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellObjectBase.Clone">
            <summary>
            Clone ths object.
            </summary>
            <returns>cloned object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellObjectBase.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellObjectBase.OnDispose">
            <summary>
            Method which can be overriden by users to take any specific actions when
            object is disposed.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ButtonCell">
            <summary>
            Representation for button of cell body.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.#ctor(System.Boolean)">
            <summary>
            Create button cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.#ctor(System.String,System.Boolean)">
            <summary>
            Create button cell with specified text.
            </summary>
            <param name="defaultText"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.OnSetup(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            On body is setup to cell.
            </summary>
            <param name="cell">cell instance</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint this cell body.
            </summary>
            <param name="dc">ReoGrid common drawing context</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.DrawText(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext,System.Drawing.Rectangle)">
            <summary>
            Draw button surface.
            </summary>
            <param name="dc">Platform independence drawing context.</param>
            <param name="state">Button state.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.DrawButton(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext,System.Drawing.Rectangle)">
            <summary>
            Draw button surface.
            </summary>
            <param name="dc">Platform independence drawing context.</param>
            <param name="state">Button state.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.OnMouseDown(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Invoked when mouse down inside this body
            </summary>
            <param name="e">mouse event argument</param>
            <returns>true if event has been handled</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.OnMouseUp(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Determine whether the button is pressed or released
            </summary>
            <param name="e">mouse event argument</param>
            <returns>true to notify spreadsheet that event has been handled</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.OnKeyDown(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Check when user pressed Space key to press button.
            </summary>
            <param name="keyCode">Virtual keys code that is converted from system platform.</param>
            <returns>True to notify spreadsheet that event has been handled</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.OnKeyUp(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Check when user released Space key to restore button.
            </summary>
            <param name="keyCode">Virtual keys code that is converted from system platform.</param>
            <returns>True to notify spreadsheet that event has been handled.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.OnStartEdit">
            <summary>
            Return false to disable edit operation for this cell.
            </summary>
            <returns>False to disable edit operation for this cell.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.IsPressed">
            <summary>
            Check whether or not button is pressed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.PerformClick">
            <summary>
            Perform click operation.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.Click">
            <summary>
            Click event raised when user clicked on the button.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ButtonCell.Clone">
            <summary>
            Clone a button cell from this object.
            </summary>
            <returns>New instance of button cell.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.CellBody">
            <summary>
            Cell body
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.CellBody.Cell">
            <summary>
            Owner cell contains this body.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnSetup(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            When the body set into a cell.
            </summary>
            <param name="cell">Current owner cell</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.CellBody.Bounds">
            <summary>
            Get cell body bounds rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.CellBody.DisableWhenCellReadonly">
            <summary>
            Determines whether or not become disable when owner cell is set as read-only. (Default is True)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnBoundsChanged">
            <summary>
            Invoked when body boundary has been changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.AutoCaptureMouse">
            <summary>
            Determines whether or not to allow capture the mouse when mouse down inside this body.
            </summary>
            <returns>True to allow caption; False to abort capture.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnMouseDown(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse button pressed inside the body bounds.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnMouseMove(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse has been moved inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnMouseUp(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when any key released on this body.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnMouseEnter(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Invoked when mouse moved enter this body.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>True if event has been handled inside this body, otherwise false to recall built-in operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnMouseLeave(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Invoked when mouse moved out from this body.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>True if event has been handled inside this body, otherwise false to recall built-in operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnMouseWheel(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Invoked when mouse scrolled inside this body.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>True if event has been handled inside this body, otherwise false to recall built-in operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnKeyDown(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Invoked when any key pressed on this body.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>True if event has been handled inside this body, otherwise false to recall built-in operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnKeyUp(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Invoked when any key released on this body.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>True if event has been handled inside this body, otherwise false to recall built-in operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint the content of body.
            </summary>
            <param name="dc">Platform independency graphics context.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnStartEdit">
            <summary>
            Invoked when cell of this body begin to edit. (Enter edit mode)
            </summary>
            <returns>True to allow edit; Otherwise false to cancel edit.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnEndEdit(System.Object)">
            <summary>
            Invoked when cell of this body finish edit. 
            Return data to be set into spreadsheet instead of user inputted.
            </summary>
            <param name="data">user inputted data.</param>
            <returns>new data to be into spreadsheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnGotFocus">
            <summary>
            Invoked when cell get focus.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnLostFocus">
            <summary>
            Invoked when cell lost focus.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.OnSetData(System.Object)">
            <summary>
            Invoked when cell data updating.
            </summary>
            <param name="data">Data to be updated.</param>
            <returns>New data that is used to replace the data inputted.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CellBody.Clone">
            <summary>
            Clone a cell body from this object.
            </summary>
            <returns>New instance of cell body.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ContentCellBody">
            <summary>
            Represents a cell body that maintains a visual content region for child objects, such as Check-box or Radio-button.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ContentCellBody.ContentBounds">
            <summary>
            Get or set child content bounds rectangle.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ContentCellBody.GetContentSize">
            <summary>
            Determines the preferred body size.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ContentCellBody.OnBoundsChanged">
            <summary>
            Handles when bounds changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ContentCellBody.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint cell body.
            </summary>
            <param name="dc">Platform independency graphics context.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ContentCellBody.OnContentPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint content of cell body.
            </summary>
            <param name="dc">Platform independency graphics context.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell">
            <summary>
            Representation for check box of cell body
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.#ctor">
            <summary>
            Create check box cell body.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.#ctor(System.Boolean)">
            <summary>
            Create check box cell body.
            </summary>
            <param name="initChecked">Set the initial status. If this value is true, checkbox keep checked status when added into a cell.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.OnSetup(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Override OnSetup method to set initial checked status.
            </summary>
            <param name="cell">The cell this body will set into.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.IsPressed">
            <summary>
            Determines whether or not mouse or key pressed inside check box.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.OnMouseDown(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Handle the mouse down event.
            </summary>
            <param name="e">Arguments of mouse down event.</param>
            <returns>True if event has been handled; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.OnMouseUp(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Handle the mouse up event.
            </summary>
            <param name="e">Arguments of mouse up event.</param>
            <returns>True if event has been handled; Otherwise return false.</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.Click">
            <summary>
            Event raied when user clicked inside check box.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.CheckChanged">
            <summary>
            Event raised when check status changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.RaiseClickEvent">
            <summary>
            Raise the click event.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.RaiseCheckChangedEvent">
            <summary>
            Raise the click event.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.OnContentPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint content of cell body.
            </summary>
            <param name="dc">Platform independency graphics context.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.OnSetData(System.Object)">
            <summary>
            Handle event when data set into the cell of this body.
            </summary>
            <param name="data">Data inputted by user.</param>
            <returns>Data to be set into the cell.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.ToggleCheckStatus">
            <summary>
            Toggle the check status of check box.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.isChecked">
            <summary>
            Check status.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.IsChecked">
            <summary>
            Get or set the check-status of check box.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.OnKeyDown(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Handle keyboard down event.
            </summary>
            <param name="keyCode">Virtual keys that are pressed.</param>
            <returns>True if event has been marked as handled.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.CheckBoxCell.OnKeyUp(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Handle keyboard up event.
            </summary>
            <param name="keyCode">Virtual keys code that is converted from system platform.</param>
            <returns>True if event has been handled; Otherwise return false.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.CheckBoxControl">
            <summary>
            Represents a checkbox control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.CheckBoxControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.CheckBoxControl.Checked">
            <summary>
            Indicates whether the check box is in the checked.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ColumnDropdownListCell">
            <summary>
            Represents dropdown list cell for entire column.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellTypes.ColumnDropdownListCell.listBox">
            <summary>
            Listbox component instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ColumnDropdownListCell.PushDown">
            <summary>
            Push down the dropdown panel.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ColumnDropdownListCell.PullUp">
            <summary>
            Push up the dropdown panel.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.DatePickerCell">
            <summary>
            Represetns a date picker cell on worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DatePickerCell.#ctor">
            <summary>
            Create instance of date picker cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DatePickerCell.OnSetup(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Override method invoked when this cell body is set into any cells.
            </summary>
            <param name="cell">The cell this body will be set to.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DatePickerCell.Clone">
            <summary>
            Clone new date picker from this object.
            </summary>
            <returns>New instance of date picker.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.DropdownCell">
            <summary>
            Represents an abstract base class for custom drop-down cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownPanel">
            <summary>
            Get dropdown panel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.PullDownOnClick">
            <summary>
            Determines whether or not to open the drop-down panel when user clicked inside cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownButtonSize">
            <summary>
            Get or set the drop-down button size.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownButtonAutoHeight">
            <summary>
            Determines whether or not to adjust the height of drop-down button to fit entire cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownButtonRect">
            <summary>
            Get the drop-down button bounds.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownControl">
            <summary>
            Get or set the control in drop-down panel.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnDropdownControlLostFocus">
            <summary>
            Override method to handle the event when drop-down control lost focus.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.IsDropdown">
            <summary>
            Get or set whether the drop-down button is pressed. When this value is set to true, the drop-down panel will popped up.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.#ctor">
            <summary>
            Create custom drop-down cell instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnBoundsChanged">
            <summary>
            Process boundary changes.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint the dropdown button inside cell.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnPaintDropdownButton(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext,Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Draw the drop-down button surface.
            </summary>
            <param name="dc">ReoGrid cross-platform drawing context.</param>
            <param name="buttonRect">Rectangle of drop-down button.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnMouseDown(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Process when mouse button pressed inside cell.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnMouseMove(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Handle event when mouse moving inside this cell body.
            </summary>
            <param name="e">Argument of mouse moving event.</param>
            <returns>True if event has been handled; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnLostFocus">
            <summary>
            Handle event if cell has lost focus.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownOpened">
            <summary>
            Event rasied when dropdown-panel is opened.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownClosed">
            <summary>
            Event raised when dropdown-panel is closed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.OnStartEdit">
            <summary>
            Open dropdown panel when cell enter edit mode.
            </summary>
            <returns>True if edit operation is allowed; otherwise return false to abort edit.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.PushDown">
            <summary>
            Push down to open the dropdown panel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownPanelHeight">
            <summary>
            Get or set height of dropdown-panel
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.MinimumDropdownWidth">
            <summary>
            Minimum width of dropdown panel
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.PullUp">
            <summary>
            Close condidate list
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownWindow">
            <summary>
            Prepresents dropdown window for dropdown cells.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownWindow.#ctor(Spire.Spreadsheet.Forms.CellTypes.DropdownCell)">
            <summary>
            Create dropdown window instance.
            </summary>
            <param name="owner">The owner cell to this dropdown window.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownWindow.OnVisibleChanged(System.EventArgs)">
            <summary>
            Handle event when visible property changed.
            </summary>
            <param name="e">Arguments of visible changed event.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownCell.DropdownWindow.OnResize(System.EventArgs)">
            <summary>
            Handle event when size property changed.
            </summary>
            <param name="e">Arguments of size changed event.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell">
            <summary>
            Representation of a typecial dropdown control on spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.#ctor">
            <summary>
            Construct dropdown control with an empty candidates list
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.#ctor(System.Object[])">
            <summary>
            Construct dropdown control with specified candidates array
            </summary>
            <param name="candidates">candidate object array to be displayed in the listbox</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Construct dropdown control with specified candidates array
            </summary>
            <param name="candidates">candidate object array to be displayed in the listbox</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.SelectedItem">
            <summary>
            Get or set the selected item in candidates list
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.SelectedIndex">
            <summary>
            Get or set the selected index in candidates list
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.SetSelectedItem(System.Object)">
            <summary>
            Set selected item
            </summary>
            <param name="obj">Selected item to be handled</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.SelectedItemChanged">
            <summary>
            Event for selected item changed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.PushDown">
            <summary>
            Push down the dropdown panel.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection">
            <summary>
            Represents drop-down items collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.Add(System.Object)">
            <summary>
            Add candidate item.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.AddRange(System.Object[])">
            <summary>
            Add multiple candidate items.
            </summary>
            <param name="items">Items to be added.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.Clear">
            <summary>
            Clear all candidate items.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.Contains(System.Object)">
            <summary>
            Check whether or not the candidate list contains specified item.
            </summary>
            <param name="item">item to be checked.</param>
            <returns>true if contained, otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copy the candidate list into specified array.
            </summary>
            <param name="array">array to be copied into.</param>
            <param name="arrayIndex">number of item to start copy.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.Count">
            <summary>
            Return the number of items in candidate list.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.IsReadOnly">
            <summary>
            Check whether or not the candidate list is read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.Remove(System.Object)">
            <summary>
            Remove specified item from candidate list.
            </summary>
            <param name="item">item to be removed.</param>
            <returns>true if item has been removed successfully.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.GetEnumerator">
            <summary>
            Get enumerator of candidate list.
            </summary>
            <returns>enumerator of candidate list.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.DropdownItemsCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator of candidate list.
            </summary>
            <returns>enumerator of candidate list.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.DropdownListCell.Clone">
            <summary>
            Clone a drop-down list from this object.
            </summary>
            <returns>New instance of dropdown list.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ComboBoxControl">
            <summary>
            Represents a combobox control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ComboBoxControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ComboBoxControl.SelectedIndex">
            <summary>
            Gets or sets the index of selected item.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ComboBoxControl.Width">
            <summary>
            Gets or sets the width of the Combobox control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ComboBoxControl.Height">
            <summary>
            Gets or sets the height of the Combobox control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ComboBoxControl.DropDownType">
            <summary>
            Gets or sets drop down type of combobox.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ComboBoxControl.Items">
            <summary>
            Gets an object representing the collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell">
            <summary>
            Representation for hyperlink of cell body.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnStartEdit">
            <summary>
            Handle event when the cell of this body entered edit mode.
            </summary>
            <returns>True to allow edit; False to disallow edit.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnSetup(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Initialize cell body when set up into a cell.
            </summary>
            <param name="cell">Instance of cell to be set up.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnMouseDown(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Change color of hyperlink to activate-status when mouse button pressed inside cell.
            </summary>
            <param name="e">Event argument of cell body mouse-down.</param>
            <returns>True if event has been handled.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnMouseUp(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Restore color of hyperlink to normal-status or hover-status when mouse button was released from cell.
            </summary>
            <param name="e">Event argument of cell body mouse-up.</param>
            <returns>True if event has been handled.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnMouseEnter(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Change color of hyperlink to hover-status when mouse moved into the cell.
            </summary>
            <param name="e">Event argument of cell body mouse-enter.</param>
            <returns>True if event has been handled.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnMouseLeave(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            Restore color of hyperlink from hover-status when mouse leaved from cell.
            </summary>
            <param name="e">Argument of mouse leaving event.</param>
            <returns>True if this event has been handled; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnKeyDown(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Handle keyboard down event.
            </summary>
            <param name="keyCode">Virtual keys code that is converted from system platform.</param>
            <returns>True if event has been handled; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnKeyUp(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Handle keyboard up event.
            </summary>
            <param name="keyCode">Virtual keys code that is converted from system platform.</param>
            <returns>True if event has been handled; Otherwise return false;</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnLostFocus">
            <summary>
            Handle event if cell has lost focus.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.PerformClick">
            <summary>
            Manually fire the hyperlink click event.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.OnSetData(System.Object)">
            <summary>
            When data of cell set, read navigation url from cell data
            </summary>
            <param name="data">New data to be set</param>
            <returns>Replacement data if needed</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.CellTypes.HyperlinkCell.Click">
            <summary>
            Event raised when hyperlink was preseed
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.Hyperlink">
            <summary>
            represents a hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.Hyperlink.Worksheet">
            <summary>
            Gets the worksheet of hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.Hyperlink.Position">
            <summary>
            Gets the position of hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.Hyperlink.TargetUri">
            <summary>
            Gets or set the url of a hyperlink. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.Hyperlink.SetTargetUri(System.String)">
            <summary>
            Set taget url of hyperlink.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ICellBody">
            <summary>
            Represents cell body interface.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnSetup(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            This method invoked when cell body set into a cell.
            </summary>
            <param name="cell">The cell instance to load this body.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ICellBody.Bounds">
            <summary>
            Get the cell body bounds. (Relative position to owner cell)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnBoundsChanged">
            <summary>
            This method invoked when body bounds is changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.AutoCaptureMouse">
            <summary>
            Determine whether or not to allow capture the mouse moving after mouse button pressed inside the body bounds.
            </summary>
            <returns>Return true to capture mouse after mouse down; Otherwise return false to do nothing.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnMouseDown(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse button pressed inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnMouseMove(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse has been moved inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnMouseUp(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse button released inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnMouseEnter(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse moved enter the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnMouseLeave(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse moved out from the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnMouseWheel(Spire.Spreadsheet.Forms.CellMouseEventArgs)">
            <summary>
            This method will be invoked when mouse scrolled inside the body bounds.
            </summary>
            <param name="e">Mouse event argument</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnKeyDown(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            This method will be invoked when any key pressed when body being focused.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>Return true if event has been handled inside the body bounds; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnKeyUp(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            This method will be invoked when any key released on this body.
            </summary>
            <param name="e">Mouse event argument.</param>
            <returns>Return true if event has been handled; Otherwise return false to recall default operations.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            This method will be invoked when cell body is required to repaint on worksheet.
            </summary>
            <param name="dc">Drawing context used to paint the cell body.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnStartEdit">
            <summary>
            This method will be invoked when the owner cell of this body begin to edit. (Changing to editing mode)
            </summary>
            <returns>Return true to allow editing; Otherwise return false to abort editing operation.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ICellBody.DisableWhenCellReadonly">
            <summary>
            Determines whether or not become disable when owner cell is set as read-only. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnEndEdit(System.Object)">
            <summary>
            This method will be invoked when the owner cell of this body finished edit.
            </summary>
            <param name="data">The data of user inputted.</param>
            <returns>Data used to be set into the cell. If don't want to change user data, return the data from method parameter.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnGotFocus">
            <summary>
            This method invoked when cell getting focus.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnLostFocus">
            <summary>
            This method invoked when cell losing focus.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.OnSetData(System.Object)">
            <summary>
            This method invoked when cell data was updated.
            </summary>
            <param name="data">The data will be set into the cell.</param>
            <returns>Return the new data used to set into the cell.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ICellBody.Clone">
            <summary>
            Clone a cell body from this object.
            </summary>
            <returns>New instance of cell body.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.IHeaderBody">
            <summary>
            Represent the interface of row and column header body
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.IHeaderBody.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext,Spire.Spreadsheet.Forms.Graphics.Size)">
            <summary>
            Onwer drawing
            </summary>
            <param name="dc">Drawing context</param>
            <param name="headerSize">Header size</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.IHeaderBody.OnMouseMove(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.WorksheetMouseEventArgs)">
            <summary>
            Mouse move event
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.IHeaderBody.OnMouseDown(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.WorksheetMouseEventArgs)">
            <summary>
            Mouse down event
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.IHeaderBody.OnDataChange(System.Int32,System.Int32)">
            <summary>
            Event when data in any cells on this header is changed
            </summary>
            <param name="startRow">Zero-based number of row of changed cells</param>
            <param name="endRow">Zero-based number of column of changed cells</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.HeaderBody">
            <summary>
            Represent the interface of row and column header body
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HeaderBody.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext,Spire.Spreadsheet.Forms.Graphics.Size)">
            <summary>
            Paint this header body.
            </summary>
            <param name="dc">Drawing context</param>
            <param name="headerSize">Header size</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HeaderBody.OnMouseMove(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.WorksheetMouseEventArgs)">
            <summary>
            Method raised when mouse moving inside this body.
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HeaderBody.OnMouseDown(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.WorksheetMouseEventArgs)">
            <summary>
            Method raised when mouse pressed inside this body.
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Event argument</param>
            <returns>true if this event is handled</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.HeaderBody.OnDataChange(System.Int32,System.Int32)">
            <summary>
            Method raised when data changed from cells on this header.
            </summary>
            <param name="startRow">Zero-based number of row of changed cells.</param>
            <param name="endRow">Zero-based number of column of changed cells.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ImageButtonCell">
            <summary>
            Represents an image button cell on worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ImageButtonCell.Image">
            <summary>
            Image that displayed on button.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageButtonCell.#ctor(System.Boolean)">
            <summary>
            Create image button cell without image specified.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageButtonCell.#ctor(System.Drawing.Image,System.Boolean)">
            <summary>
            Create image button cell with specified image.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageButtonCell.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint image button cell.
            </summary>
            <param name="dc">Platform non-associated drawing context.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageButtonCell.Clone">
            <summary>
            Clone image button from this object.
            </summary>
            <returns>New instance of image button.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ButtonControl">
            <summary>
            Represents a button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ButtonControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ButtonControl.Width">
            <summary>
            Gets or sets the width of the button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ButtonControl.Height">
            <summary>
            Gets or sets the height of the button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ButtonControl.Visible">
            <summary>
            Gets or sets if the Button should visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ButtonControl.Image">
            <summary>
            Gets or sets the background image of button control.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ImageCell">
            <summary>
            Representation for an image of cell body
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ImageCell.Image">
            <summary>
            Get or set the image to be displayed in cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageCell.#ctor">
            <summary>
            Create image cell object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageCell.#ctor(System.Drawing.Image)">
            <summary>
            Construct image cell-body to show a specified image
            </summary>
            <param name="image">Image to be displayed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageCell.#ctor(System.Drawing.Image,Spire.Spreadsheet.Forms.CellTypes.ImageCellViewMode)">
            <summary>
            Construct image cell-body to show a image by specified display-method
            </summary>
            <param name="image">Image to be displayed</param>
            <param name="viewMode">View mode decides how to display a image inside a cell</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ImageCell.ViewMode">
            <summary>
            Set or get the view mode of this image cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ImageCell.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Render the image cell body.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ImageCellViewMode">
            <summary>
            Image dispaly method in ImageCell-body
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellTypes.ImageCellViewMode.Stretch">
            <summary>
            Fill to cell boundary. (default)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellTypes.ImageCellViewMode.Zoom">
            <summary>
            Lock aspect ratio to fit cell boundary.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellTypes.ImageCellViewMode.Clip">
            <summary>
            Keep original image size and clip to fill the cell.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell">
            <summary>
            Progress bar for display both positive and negative percent.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell.PositiveColor">
            <summary>
            Get or set color for positive display.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell.NegativeColor">
            <summary>
            Get or set color for negative display.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell.LinearGradient">
            <summary>
            Determines whether or not display a linear gradient color on progress bar.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell.DisplayCellText">
            <summary>
            Determines whether or not display the cell text or value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell.LimitedInsideCell">
            <summary>
            Determines whether or not force to display the progress inside cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell.#ctor">
            <summary>
            Create negative progress cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.NegativeProgressCell.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Render the negative progress cell body.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.ProgressCell">
            <summary>
            Representation for a button of cell body
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ProgressCell.TopColor">
            <summary>
            Get or set the top color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.ProgressCell.BottomColor">
            <summary>
            Get or set the bottom color.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ProgressCell.#ctor">
            <summary>
            Create progress cell body.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ProgressCell.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Render the progress cell body.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.ProgressCell.Clone">
            <summary>
            Clone a progress bar from this object.
            </summary>
            <returns>New instance of progress bar.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.RadioButtonGroup">
            <summary>
            Radio button group for toggling radios inside one group.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.RadioButtonGroup.AddRadioButton(Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell)">
            <summary>
            Add radio button into this group.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.RadioButtonGroup.Contains(Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell)">
            <summary>
            Check whether specified radio is contained by this group.
            </summary>
            <param name="cell">radio cell body to be checked.</param>
            <returns>true if the radio cell body is contained by this group.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell">
            <summary>
            Representation for a radio button of cell body.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell.#ctor">
            <summary>
            Create instance of radio button cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell.RadioGroup">
            <summary>
            Radio groups for toggling other radios inside same group.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell.IsChecked">
            <summary>
            Get or set check status for radio button
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell.ToggleCheckStatus">
            <summary>
            Toggle check status of radio-button. (Only work when radio button not be added into any groups)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell.OnContentPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext)">
            <summary>
            Paint content of cell body.
            </summary>
            <param name="dc">Platform independency graphics context.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellTypes.RadioButtonCell.Clone">
            <summary>
            Clone radio button from this object.
            </summary>
            <returns>New instance of radio button.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.AreaChart">
            <summary>
            Represents line chart component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AreaChart.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Create line chart component instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AreaChart.CreateChartPlotArea">
            <summary>
            Create and return the main plot view for this chart. 
            Derived classes specify their own plot view objects by overwriting this method.
            </summary>
            <returns>Plot view object for area-based charts.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AreaChart.CreateChartLegend">
            <summary>
            Creates and returns line chart legend instance.
            </summary>
            <returns>Instance of line chart legend.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AreaLineChartPlotView.#ctor(Spire.Spreadsheet.Forms.Chart.AxisChart)">
            <summary>
            Create line chart plot view object.
            </summary>
            <param name="chart">Parent chart component instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AreaLineChartPlotView.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render plot view region of line chart component.
            </summary>
            <param name="dc">Platform no-associated drawing context.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.CrossAt">
            <summary>
            Get or set axis cross at value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.MinValue">
            <summary>
            Get or set axis min value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.MaxValue">
            <summary>
            Get or set axis max value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.IsAutoMinValue">
            <summary>
            Specifies that whether or not to decide the axis min value automatically by scanning data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.IsAutoMaxValue">
            <summary>
            Specifies that whether or not to decide the axis max value automatically by scanning data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.IsAutoMajorUnit">
            <summary>
            Specifies that whether or not to decide the axis major unit automatically by scanning data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.IsAutoMinorUnit">
            <summary>
            Specifies that whether or not to decide the axis minor unit automatically by scanning data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.MinorUnit">
            <summary>
            Get or set axis minor unit value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.MajorUnit">
            <summary>
            Get or set axis major unit  value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.Minimum">
            <summary>
            Get or set calculating axis minimum value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.Maximum">
            <summary>
            Get or set calculating axis maximum value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.IsAutoMinimum">
            <summary>
            Gets or sets calculating axis scale minimum value is automatic.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.StepValue">
            <summary>
            Get or set the axis large stride value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.Scales">
            <summary>
            Get or set the axis scale values.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.ScalesCount">
            <summary>
            Get or set the plot vertial levels.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisDataInfo.NumberFormat">
            <summary>
            Get or set the number format.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.AxisTypes.Primary">
            <summary>
            Primary axis
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.AxisTypes.Secondary">
            <summary>
            Secondary axis
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.AxisOrientation.Horizontal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.AxisOrientation.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.BackColor">
            <summary>
            Get or set back color of chart axis.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.LineColor">
            <summary>
            Get or set line color of chart axis.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.LineWidth">
            <summary>
            Get and set line width of chart axis.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.FontName">
            <summary>
            Get or set font name of chart axis text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.FontSize">
            <summary>
            Get or set font size of chart axis text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.FontStyles">
            <summary>
            Get font styles of chart axis text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.FontColor">
            <summary>
            Get and set font color of chart axis text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.Orientation">
            <summary>
            Get and set orientation of chart axis.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartAxis.Title">
            <summary>
            Get axis title object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ValueAxisView.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render axis information view.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.CategoryAxisView.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render data label view.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IAxisGuideLinePlotView.IsVisible">
            <summary>
            Get or set axis guide line is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IAxisGuideLinePlotView.LineColor">
            <summary>
            Get or set line color of axis guide line.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisGuideLinePlotView.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render axis plot view.
            </summary>
            <param name="dc">Platform unassociated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.BarChart">
            <summary>
            Represents a horizontal bar chart.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.BarChart.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Create the instance of bar chart.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.BarChart.CreateChartPlotArea">
            <summary>
            Create and return the chart plot view object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.BarChart.CreatePrimaryAxisCategoryView">
            <summary>
            Create and return the serial label axis info view.
            </summary>
            <param name="bodyBounds">Bounds for chart body.</param>
            <returns>Instance of serial label axis info view.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.BarChart.CreatePrimaryAxisValueView">
            <summary>
            Create and return the category label axis info view.
            </summary>
            <param name="bodyBounds">Bounds for chart body.</param>
            <returns>Instance of category label axis info view.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.BarChartPlotView">
            <summary>
            Represents a bar chart plot view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.BarChartPlotView.#ctor(Spire.Spreadsheet.Forms.Chart.BarChart)">
            <summary>
            Create instance of bar chart plot view.
            </summary>
            <param name="chart">Bar chart which holds this plot view.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.BarChartPlotView.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render the bar chart plot view.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.Worksheet">
            <summary>
            Get worksheet of chart;
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.ChartType">
            <summary>
            Get type of chart.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.BackColor">
            <summary>
            Get or set back color of chart.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.LineColor">
            <summary>
            Get or set line color of chart.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.LineWidth">
            <summary>
            Get and set line width of chart.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.LeftColumn">
            <summary>
            Get or set the left column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.TopRow">
            <summary>
            Get or set the top row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.HorizontalOffset">
            <summary>
            Get or set the horizontal offset from its left column, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.VerticalOffset">
            <summary>
            Get or set the vertical offset from its top row, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.Width">
            <summary>
            Get or set the width, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.Height">
            <summary>
            Get or set the height, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.Title">
            <summary>
            Get the chart title.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.ShowLegend">
            <summary>
            Get or set whether or not to show legend.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.Legend">
            <summary>
            Get the chart legend.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.PlotArea">
            <summary>
            Get chart plot area.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.PrimaryAxisInfo">
            <summary>
            Get the primary axis information set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.SecondaryAxisInfo">
            <summary>
            Get the secondary axis information set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.CategoryAxisInfoView">
            <summary>
            Get the primary axis view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.ValueAxisInfoView">
            <summary>
            Get the data label view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.HorizontalGuideLinesView">
            <summary>
            Get the grid line background view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.VerticalGuideLinesView">
            <summary>
            Get the grid line background view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChart.DataSource">
            <summary>
            Get chart data source.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.Chart">
            <summary>
            Represents chart drawing component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Create chart instance.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.ChartType">
            <summary>
            Get a chart's type.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.Title">
            <summary>
            Get or set the chart title.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.ShowLegend">
            <summary>
            Get or set whether or not to show legend view.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.Legend">
            <summary>
            Get or set the primary legend object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.CreateChartLegend">
            <summary>
            Create chart legend.
            </summary>
            <returns>Instance of chart legend.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.PlotArea">
            <summary>
            Get column chart plot view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.PrimaryAxisInfo">
            <summary>
            Get or set the primary axis information set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.SecondaryAxisInfo">
            <summary>
            Get or set the secondary axis information set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.CategoryAxisInfoView">
            <summary>
            Get or set the primary axis view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.ValueAxisInfoView">
            <summary>
            Get or set the data label view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.HorizontalGuideLinesView">
            <summary>
            Get or set the grid line background view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.VerticalGuideLinesView">
            <summary>
            Get or set the grid line background view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.DataSource">
            <summary>
            Get chart data source.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.OnDataSourceChanged">
            <summary>
            This method will be invoked when chart data source is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Chart.Chart.DataSourceChanged">
            <summary>
            This event will be invoked when chart data source is changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.UpdatePlotData">
            <summary>
            Update chart when data source or data range has been changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.ResetDataSeriesStyles">
            <summary>
            Reset data serial to row default styles.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.DataSeriesStyles">
            <summary>
            Get data serial styles.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Chart.ChartBodyViews">
            <summary>
            Get the chart plot view component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.AddChildView(Spire.Spreadsheet.Forms.Chart.ChartPlotArea)">
            <summary>
            Add chart plot view object.
            </summary>
            <param name="view">Chart plot view object.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.OnBoundsChanged(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Relayout this view.
            </summary>
            <param name="oldRect">Bounds rectangle before changed.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.UpdateLayout">
            <summary>
            Update children view bounds.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.GetTitleBounds">
            <summary>
            Get default title bounds.
            </summary>
            <returns>Rectangle of title bounds.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.GetPlotViewBounds(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Get default body bounds.
            </summary>
            <returns>Rectangle of body bounds.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.GetLegendBounds(Spire.Spreadsheet.Forms.Graphics.Rectangle,Spire.Spreadsheet.Forms.Chart.LegendPosition)">
            <summary>
            Get legend view bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Chart.OnMouseDown(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            Handles the mouse down event.
            </summary>
            <param name="location">Relative location of mouse button press-down.</param>
            <param name="button">Determines that which mouse button is pressed down.</param>
            <returns>True if event has been handled; Otherwise false.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.AxisChart">
            <summary>
            Represents axis-based chart component. 
            This is an abstract class that should be implemented by other axis-based chart classes.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Create axis-based chart instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.CreatePrimaryAxisValueView">
            <summary>
            Create default primary axis category label view.
            </summary>
            <param name="bodyBounds"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.OnDataSourceChanged">
            <summary>
            This method will be invoked when data source of this chart is changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.UpdatePlotData">
            <summary>
            Update chart data information.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.AxisOriginToZero(System.Double,System.Double,System.Double)">
            <summary>
            Determines that whether or not allow to set axis minimum value to a non-zero position automatically.
            </summary>
            <param name="minData">Minimum data scanned from data source.</param>
            <param name="maxData">Maximum data scanned from data source.</param>
            <param name="range">Data range.</param>
            <returns>True to set axis minimum value; Otherwise false.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisChart.ZeroWidth">
            <summary>
            Get the origin value of width related to this view object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.AxisChart.ZeroHeight">
            <summary>
            Get the origin value of height related to this view object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.ResetDrawPoints">
            <summary>
            Reset plot drawing points.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.UpdateDrawPoints">
            <summary>
            Update plot drawing points.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.OnBoundsChanged(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            This method will be invoked when chart bounds changed.
            </summary>
            <param name="oldRect">Old bounds rectangle.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.AxisChart.UpdateLayout">
            <summary>
            Update all children bounds.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ColumnChart">
            <summary>
            Represents column chart component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ColumnChart.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Create column chart instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ColumnChart.CreateChartPlotArea">
            <summary>
            Create and return the main plot view for this chart. 
            Derived classes specify their own plot view objects by overwriting this method.
            </summary>
            <returns>Plot view object for column-based charts.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ColumnChart.CreateChartLegend">
            <summary>
            Creates and returns column line chart legend instance.
            </summary>
            <returns>Instance of column line chart legend.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ColumnLineChartLegend">
            <summary>
            Represents column line chart legend.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ColumnLineChartLegend.#ctor(Spire.Spreadsheet.Forms.Chart.Chart)">
            <summary>
            Create column line chart legend.
            </summary>
            <param name="chart">Parent chart component.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ColumnLineChartLegend.GetSymbolSize(System.Int32)">
            <summary>
            Get default symbol size of chart legend.
            </summary>
            <returns>Symbol size of chart legend.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ColumnChartPlotArea">
            <summary>
            Represents plot view object of column chart component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ColumnChartPlotArea.#ctor(Spire.Spreadsheet.Forms.Chart.AxisChart)">
            <summary>
            Create column chart plot view object.
            </summary>
            <param name="chart">Owner chart instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ColumnChartPlotArea.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render the column chart plot view.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ChartDataSource">
            <summary>
            Data source from given worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartDataSource.#ctor(Spire.Spreadsheet.Forms.Worksheet,Spire.Xls.Core.Converter.Spreadsheet.Charts.SeriesCollection,Spire.Spreadsheet.Forms.Chart.Chart)">
            <summary>
            Create data source instance with specified worksheet instance
            </summary>
            <param name="worksheet">Instance of worksheet to read titles and data of plot serial.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartDataSource.CategoryNameRange">
            <summary>
            Get or set the range that contains the category names.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartDataSource.GetCategoryName(System.Int32)">
            <summary>
            Return the title of specified column.
            </summary>
            <param name="index">Zero-based number of column.</param>
            <returns>Return the title that will be displayed on chart.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartDataSource.SeriesCount">
            <summary>
            Get number of data serials.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartDataSource.CategoryCount">
            <summary>
            Get number of categories.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartDataSource.GetSeriesByIndex(System.Int32)">
            <summary>
            Get series by index.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartDataSource.AddSeries(Spire.Spreadsheet.Forms.IWorksheet,System.String,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Add serial data into data source from a range, set the name as the label of serial.
            </summary>
            <param name="worksheet">Worksheet instance to read series data.</param>
            <param name="seriesName">Name for series to be added.</param>
            <param name="seriesRange">Range to read series data from worksheet.</param>
            <returns>Instance of chart serial has been added.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartDataSource.OnDataChanged">
            <summary>
            This method will be invoked when any data from the serial data range changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Chart.ChartDataSource.DataChanged">
            <summary>
            This event will be raised when data from the serial data range changed.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ChartDataSeries">
            <summary>
            Represents implementation of chart data serial.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartDataSeries.DataRange">
            <summary>
            Get or set the range to read data from worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartDataSeries.SeriesName">
            <summary>
            Get or set name of series.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartDataSeries.Count">
            <summary>
            Get number of data items of current serial.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartDataSeries.Item(System.Int32)">
            <summary>
            Get data from serial by specified index position.
            </summary>
            <param name="index">Zero-based index position in serial to get data.</param>
            <returns>Data in double type to be get from specified index of serial.
            If index is out of range, or data in worksheet is null, then return null.
            </returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartDataSeries.#ctor(Spire.Spreadsheet.Forms.Chart.ChartDataSource,Spire.Spreadsheet.Forms.Worksheet,Spire.Xls.Core.Converter.Spreadsheet.Charts.Series)">
            <param name="dataSource">Data source to read chart data from worksheet.</param>
            <param name="worksheet">Instance of worksheet that contains the data to be read.</param>
            <param name="seriesConverter">Serial of mode B.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartDataSeries.Finalize">
            <summary>
            Destroy the worksheet data serial and release all event handlers to data source.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.LegendPosition">
            <summary>
            Get or set the display position of legend.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.BackColor">
            <summary>
            Get or set back color of chart legend.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.LineColor">
            <summary>
            Get or set line color of chart legend.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.LineWidth">
            <summary>
            Get and set line width of chart legend.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.FontName">
            <summary>
            Get or set font name of chart legend text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.FontSize">
            <summary>
            Get or set font size of chart legend text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.FontStyles">
            <summary>
            Get font styles of chart legend text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartLegend.FontColor">
            <summary>
            Get and set font color of chart legend text.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ChartLegend">
            <summary>
            Represents chart legend view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartLegend.#ctor(Spire.Spreadsheet.Forms.Chart.Chart)">
            <summary>
            Create chart legend view.
            </summary>
            <param name="chart">Instance of owner chart.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartLegend.Chart">
            <summary>
            Get the instance of owner chart.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartLegend.LegendPosition">
            <summary>
            Get or set the display position of legend.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartLegend.GetSymbolSize(System.Int32)">
            <summary>
            Get default symbol size of chart legend.
            </summary>
            <param name="index">Index of serial in data source.</param>
            <returns>Symbol size of chart legend.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartLegend.GetLabelSize(System.Int32)">
            <summary>
            Measure serial label size.
            </summary>
            <param name="index">Index of serial in data source.</param>
            <returns>Measured size for serial label.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartLegend.GetPreferredSize">
            <summary>
            Get measured legend view size.
            </summary>
            <returns>Measured size of legend view.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartLegend.MeasureSize(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Layout all legned items.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ChartLegendItem">
            <summary>
            Represents chart legend item.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartLegendItem.OnPaintSymbol(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Draw chart legend symbol.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartLegendItem.OnPaintLabel(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Draw chart legend label.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.LegendPosition">
            <summary>
            Legend position.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.LegendPosition.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.LegendPosition.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.LegendPosition.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.LegendPosition.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.LineChart">
            <summary>
            Represents line chart component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.LineChart.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Create line chart component instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.LineChart.CreateChartLegend">
            <summary>
            Creates and returns line chart legend instance.
            </summary>
            <returns>Instance of line chart legend.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.LineChartLegend">
            <summary>
            Represents line chart legend.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.LineChartLegend.#ctor(Spire.Spreadsheet.Forms.Chart.Chart)">
            <summary>
            Create line chart legend.
            </summary>
            <param name="chart">Parent chart component.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.LineChartLegend.GetSymbolSize(System.Int32)">
            <summary>
            Get symbol size of chart legend.
            </summary>
            <param name="index">Index of serial in data source.</param>
            <returns>Symbol size of chart legend.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.LineChartPlotView">
            <summary>
            Represents plot view object of line chart component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.LineChartPlotView.#ctor(Spire.Spreadsheet.Forms.Chart.AxisChart)">
            <summary>
            Create line chart plot view object.
            </summary>
            <param name="chart">Parent chart component instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.LineChartPlotView.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render plot view of line chart component.
            </summary>
            <param name="dc">Platform no-associated drawing context.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.PieChart">
            <summary>
            Repersents pie chart component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChart.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Shape,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Creates pie chart instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChart.CreatePlotViewInstance">
            <summary>
            Creates and returns pie plot view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChart.ResetDataSeriesStyles">
            <summary>
            Reset data serial to row default styles.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChart.UpdatePlotData">
            <summary>
            Update data serial information.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChart.UpdatePlotPoints">
            <summary>
            Update plot calculation points.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.PieChartDataInfo">
            <summary>
            Represents pie chart data information.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.PiePlotView">
            <summary>
            Represents pie plot view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PiePlotView.#ctor(Spire.Spreadsheet.Forms.Chart.Chart)">
            <summary>
            Create plot view object of pie 2d chart.
            </summary>
            <param name="chart">Pie chart instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PiePlotView.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render pie 2d plot view.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.PieChartLegend">
            <summary>
            Represents pie legend view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChartLegend.#ctor(Spire.Spreadsheet.Forms.Chart.Chart)">
            <summary>
            Create chart legend view.
            </summary>
            <param name="chart">Instance of owner chart.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChartLegend.GetLabelSize(System.Int32)">
            <summary>
            Measure serial label size.
            </summary>
            <param name="index">Index of serial in data source.</param>
            <returns>Measured size for serial label.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChartLegend.MeasureSize(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Layout all legned items.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.PieChartLegendItem">
            <summary>
            Represents pie legend item.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.PieChartLegendItem.OnPaintLabel(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Draw chart legend label.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.Pie2DChart">
            <summary>
            Repersents pie 2D chart component.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.Pie2DPlotView">
            <summary>
            Represents pie 2D plot view.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.DoughnutChart">
            <summary>
            Repersents doughnut chart component.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.DoughnutChart.CreatePlotViewInstance">
            <summary>
            Creates and returns doughnut plot view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.DoughnutChart.UpdatePlotData">
            <summary>
            Update data serial information.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.DoughnutChart.UpdatePlotPoints">
            <summary>
            Update plot calculation points.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.DoughnutPlotView">
            <summary>
            Represent doughnut plot view.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.DoughnutPlotView.innerDiameterPercent">
            <summary>
            Represent doughnut inner diameter percent.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartPlotArea.BackColor">
            <summary>
            Get or set back color of chart plot area.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartPlotArea.LineColor">
            <summary>
            Get or set line color of chart plot area.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.IChartPlotArea.LineWidth">
            <summary>
            Get and set line width of chart plot area.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.ChartPlotArea">
            <summary>
            Represents common chart plot view.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ChartPlotArea.Chart">
            <summary>
            Get or set the owner chart to this plot view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.ChartPlotArea.#ctor(Spire.Spreadsheet.Forms.Chart.Chart)">
            <summary>
            Create common chart plot view object.
            </summary>
            <param name="chart">Owner chart instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.DataPointStyles">
            <summary>
            Data point styles for line plot view.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.DataPointStyles.None">
            <summary>
            None (Default style)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.DataPointStyles.Triangle">
            <summary>
            Triangle
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.DataPointStyles.Square">
            <summary>
            Square
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.DataPointStyles.EllipseOutline">
            <summary>
            Ellipse Outline
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Chart.DataPointStyles.EllipseFilled">
            <summary>
            Ellipse Filled
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Chart.DataSeriesStyleCollection">
            <summary>
            Represents a collection of data serial styles.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.DataSeriesStyleCollection.Item(System.Int32)">
            <summary>
            Get or set the seiral style for data specified by zero-based index.
            </summary>
            <param name="index">Zero-based index of data to get style.</param>
            <returns>Data serial style object of data.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.RotateAngle">
            <summary>
            Get or set the title text rotation angle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.IsVisible">
            <summary>
            Get or set the title text is or not visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.Text">
            <summary>
            Get or set the title text of chart.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.BackColor">
            <summary>
            Get or set back color of chart title.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.LineColor">
            <summary>
            Get or set line color of chart title.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.LineWidth">
            <summary>
            Get and set line width of chart title.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.FontName">
            <summary>
            Get or set font name of chart title text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.FontSize">
            <summary>
            Get or set font size of chart title text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.FontStyles">
            <summary>
            Get font styles of chart title text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.ITitle.FontColor">
            <summary>
            Get and set font color of chart title text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Title.Text">
            <summary>
            Get or set the title text of chart.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Chart.Title.RichText">
            <summary>
            Get or set the rich title text of chart.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Chart.Title.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render chart title view.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.ClipboardMonitor.ClipboardChanged">
            <summary>
            Clipboard contents changed.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ClipboardChangedEventArgs">
            <summary>
            Argument for clipboard changing event.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ClipboardChangedEventArgs.DataObject">
            <summary>
            Get data object from clipboard.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ClipboardChangedEventArgs.#ctor(System.Windows.Forms.IDataObject)">
            <summary>
            Create event argument.
            </summary>
            <param name="dataObject">Data object that is transformed by Clipboard.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.CellObjectCollection">
            <summary>
            Collection extened
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellObjectCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the item at the specified row column index of the cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellObjectCollection.Remove(System.String)">
            <summary>
            Removes the item by name.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.CellRange">
            <summary>
            Encapsulates a collection of gridcell objects. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the cells to an array.
            </summary>
            <param name="array">The array object.</param>
            <param name="index">The index of the first cell to copy.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Top">
            <summary>
            Gets the row index of the upper-left corner of the cell range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Left">
            <summary>
            Gets the column index of the upper-left corner of the cell range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Bottom">
            <summary>
            Gets the row index of the bottom-right corner of the cell range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Right">
            <summary>
            Gets the column index of the bottom-right corner of the cell range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Width">
            <summary>
            Gets the width of the range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Height">
            <summary>
             Gets the height of the range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Items">
            <summary>
            Gets item array in collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Count">
            <summary>
            Gets the count of the cells.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellRange.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.FirstCell">
            <summary>
            Goto first cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.PopulateValues(System.Object)">
            <summary>
            Sets value of the range.
            </summary>
            <param name="Value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.SetStyles(Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Sets style of the range.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.Reset">
            <summary>
            Sets the enumerator to first element.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.Merge">
            <summary>
            Merages the cell range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.Unmerge">
            <summary>
            Unmerges the cell range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.GetEnumerator">
            <summary>
            Returns an IEnumerator for the collection.
            </summary>
            <returns>An IEnumerator for the collection.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.IntersectRange(Spire.Spreadsheet.Forms.Collections.CellRange)">
            <summary>
            Get inasect range.
            </summary>
            <param name="rangeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellRange.IntersectRange(Spire.Spreadsheet.Forms.Collections.CellRange,Spire.Spreadsheet.Forms.Collections.CellRange)">
            <summary>
            Get intasect range.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.CellCollection">
            <summary>
            Collection of cell returned from range or worksheet instance.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellCollection.Item(System.String)">
            <summary>
            Get cell instance by speicified reference from an address or name.
            </summary>
            <param name="addressOrName">Reference from an address or name.</param>
            <returns>Instance for cell.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellCollection.Item(System.Int32,System.Int32)">
            <summary>
            Get cell instance by specified number of row and column
            </summary>
            <param name="row">number of row to get cell instance</param>
            <param name="col">number of column to get cell instance</param>
            <returns>instance for cell</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CellCollection.Item(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Get cell instance by specified position
            </summary>
            <param name="pos">position to get cell instance</param>
            <returns>instance for cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CellCollection.GetEnumerator">
            <summary>
            Get enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.CommentCollection">
            <summary>
            Encapsulates a collection of Comment objects.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CommentCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the comment at specified row and column.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.CommentCollection.Item(System.String)">
            <summary>
            Gets the commentby specified range name.
            </summary>
            <param name="rangeName">range name.
            </param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CommentCollection.AddComment(System.String,System.String)">
            <summary>
            Adds a comment to a specified cell.
            </summary>
            <param name="rangeName">range name.</param>
            <param name="comment">Text of comment.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CommentCollection.AddComment(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a comment to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="comment">Text of comment.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.CommentCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the comment at the specified row column.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting">
            <summary>
            ConditionalFormatting
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.RangeCount">
            <summary>
            Get ranges count.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.RemoveRange(System.Int32)">
            <summary>
            Remove specified index Range.
            </summary>
            <param name="index">index of area.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.RemoveRange(Spire.Spreadsheet.Forms.Collections.CellRange)">
            <summary>
            Remove Range.
            </summary>
            <param name="range">range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.ClearRanges">
            <summary>
            Clear ranges.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.GetRange(System.Int32)">
            <summary>
            Get range.
            </summary>
            <param name="index">index of area.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.AddRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add range to Areas of ConditionalFormatting
            </summary>
            <param name="firstRow">first row of area</param>
            <param name="lastRow">last row of area</param>
            <param name="firstColumn">first column of area</param>
            <param name="lastColumn">last column of area</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.ConditionCount">
            <summary>
            Get formatConditions count.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.Item(System.Int32)">
            <summary>
            Get DataFormatCondition.
            </summary>
            <param name="index">index of formatconditions</param>
            <returns>FormatCondition</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.AddCondition(Spire.Spreadsheet.Forms.ConditionType,Spire.Spreadsheet.Forms.ComparisonOperationType,System.String,System.String)">
            <summary>
            Add Condition to FormatConditions
            </summary>
            <param name="formatConditionType">format condition Type</param>
            <param name="operatorType">Operator type</param>
            <param name="formula1">the first formula</param>
            <param name="formula2">the second formula</param>
            <returns>index</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.AddCondition(Spire.Spreadsheet.Forms.IDataFormatCondition)">
            <summary>
            Add Condition to FormatConditions
            </summary>
            <param name="fc">FormatCondition</param>
            <returns>index</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.RemoveCondition(Spire.Spreadsheet.Forms.IDataFormatCondition)">
            <summary>
            Remove FormatCondition
            </summary>
            <param name="fc">FormatCondition</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.RemoveCondition(System.Int32)">
            <summary>
            Remove specified index FormatCondition.
            </summary>
            <param name="index">Index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormatting.ClearConditions">
            <summary>
            Clear formatConditions.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.ConditionalFormattingCollection">
            <summary>
            Represent all ConditionalFormatting.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.ConditionalFormattingCollection.Item(System.Int32)">
            <summary>
            Get ConditionalFormatting from list
            </summary>
            <param name="index">index</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormattingCollection.Add">
            <summary>
            Add ConditionalFormatting to list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormattingCollection.Remove(System.Int32)">
            <summary>
            Remove specified index ConditionalFormatting.
            </summary>
            <param name="index">index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormattingCollection.Remove(Spire.Spreadsheet.Forms.Collections.IConditionalFormatting)">
            <summary>
            Remove specified ConditionalFormatting.
            </summary>
            <param name="conditionalFormatting">conditionalFormatting.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.ConditionalFormattingCollection.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.ConditionalFormattingCollection.Count">
            <summary>
            Get ConditionalFormatting count.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.WorksheetCustomPropertyCollection">
            <summary>
            Represents collection of all custom properties in the worksheet. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCustomPropertyCollection.Add(System.String,System.String)">
            <summary>
            Adds new property to the collection.
            </summary>
            <param name="name">The name of the custom property.</param>
            <param name="value">The value of the custom property.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.WorksheetCustomPropertyCollection.Item(System.Int32)">
            <summary>
            Gets the custom property by the specific index.
            </summary>
            <param name="index">The index.</param>
            <returns>The custom property</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.WorksheetCustomPropertyCollection.Item(System.String)">
            <summary>
            Gets the custom property by the property name.
            </summary>
            <param name="name">The property name.</param>
            <returns>The custom property</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.HyperlinkCollection">
            <summary>
            Collection of Hyperlink objects. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.HyperlinkCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the hyperlink object at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.HyperlinkCollection.Item(System.String)">
            <summary>
            Gets the hyperlink object by specified range name.
            </summary>
            <param name="rangeName">range name('A1', 'B1')
            </param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.HyperlinkCollection.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a hyperlink to a specified cell at row column index.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="TargetUrl">link of hyperlink.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.HyperlinkCollection.Add(System.String,System.String)">
            <summary>
            Adds a hyperlink to a specified cell by range name.
            </summary>
            <param name="rangeName">range Name.</param>
            <param name="TargetUrl">link of hyperlink.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.HyperlinkCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the item at the specified row column index of the cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.RangeCount">
            <summary>
            Get ranges count.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.RemoveRange(System.Int32)">
            <summary>
            Remove specified index Range.
            </summary>
            <param name="index">index of area.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.RemoveRange(Spire.Spreadsheet.Forms.Collections.CellRange)">
            <summary>
            Remove Range.
            </summary>
            <param name="range">range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.ClearRanges">
            <summary>
            Clear ranges.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.GetRange(System.Int32)">
            <summary>
            Get range.
            </summary>
            <param name="index">index of area.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.AddRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add range to Areas of ConditionalFormatting
            </summary>
            <param name="firstRow">first row of area</param>
            <param name="lastRow">last row of area</param>
            <param name="firstColumn">first column of area</param>
            <param name="lastColumn">last column of area</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.ConditionCount">
            <summary>
            Get formatConditions count.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.Item(System.Int32)">
            <summary>
            Get FormatCondition
            </summary>
            <param name="index">index of formatconditions</param>
            <returns>FormatCondition</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.AddCondition(Spire.Spreadsheet.Forms.ConditionType,Spire.Spreadsheet.Forms.ComparisonOperationType,System.String,System.String)">
            <summary>
            Add Condition to FormatConditions
            </summary>
            <param name="formatConditionType">format condition Type</param>
            <param name="operatorType">Operator type</param>
            <param name="formula1">the first formula</param>
            <param name="formula2">the second formula</param>
            <returns>index</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.AddCondition(Spire.Spreadsheet.Forms.IDataFormatCondition)">
            <summary>
            Add Condition to FormatConditions
            </summary>
            <param name="fc">FormatCondition</param>
            <returns>index</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.RemoveCondition(Spire.Spreadsheet.Forms.IDataFormatCondition)">
            <summary>
            Remove formatCondition.
            </summary>
            <param name="fc">FormatCondition</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.RemoveCondition(System.Int32)">
            <summary>
            Remove specified index formatCondition.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.IConditionalFormatting.ClearConditions">
            <summary>
            Clear formatConditions.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.OleControlCollection">
            <summary>
            Encapsulates a collection of cell control. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.OleControlCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the cell control at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.OleControlCollection.Item(System.String)">
            <summary>
            Gets the cell control by specified range name.
            </summary>
            <param name="rangeName">range name
            </param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddButtonControl(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a button to a specified cell at row column index.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="caption">DispayText.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddButtonControl(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a button control to a specified cell by range name.
            </summary>
            <param name="rangeName">Range name.</param>
            <param name="width">Width</param>
            <param name="height">Height.</param>
            <param name="caption">Caption.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddCheckBoxControl(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds a checkbox to a specified cell at row column index.
            </summary>
            <param name="row">Row index of cell.</param>
            <param name="col">Column index of cell.</param>
            <param name="isChecked">Checkbox checked property state.</param>
            <returns>The added checkbox.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddCheckBox(System.String,System.Boolean)">
            <summary>
            Adds a checkbox to a specified cell by cell name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="IsChecked">check state.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddComboBoxControl(System.Int32,System.Int32,System.Collections.IList)">
            <summary>
            Adds a combobox to a specified cell at row column index.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="items">List item</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddComboBoxControl(System.String,System.Collections.IList)">
            <summary>
            Adds a combobox control to a specified cell by range name.
            </summary>
            <param name="cellName">Name of grid cell.</param>
            <param name="items">The collection of the items contained in ComboBox.</param>
            <returns>The added combobox.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddRadioButtonControl(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add a radio button control to a specified cell by row and column
            </summary>
            <param name="row">row index</param>
            <param name="col">column index</param>
            <param name="isChecked">check state</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddProgressControl(System.Int32,System.Int32)">
            <summary>
            Add a progress to a specified cell by row and column
            </summary>
            <param name="row">row index</param>
            <param name="col">column index</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.OleControlCollection.AddNegativeProgressControl(System.Int32,System.Int32)">
            <summary>
            Add a negative progress to a specified cell by row and column
            </summary>
            <param name="row">row index</param>
            <param name="col">column index</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.PictureCollection">
            <summary>
            Encapsulates a collection of Picture objects. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.PictureCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the Picture object at specified row and column index.
            </summary>
            <param name="row">row index.</param>
            <param name="col">column index.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.PictureCollection.Item(System.String)">
            <summary>
            Gets the Picture object by specified range name.
            </summary>
            <param name="rangeName">range name('A1', 'B1')
            </param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.PictureCollection.AddPicture(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a Picture to a specified cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.PictureCollection.AddPicture(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds a Picture to a specified cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.PictureCollection.AddPicture(System.Int32,System.Int32,System.IO.Stream)">
            <summary>
            Adds a Picture to a specified cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.PictureCollection.AddPicture(System.String,System.String)">
            <summary>
            Adds a Picture to a specified cell.
            </summary>
            <param name="rangeName">range name.</param>
            <param name="fileName">File name of picture.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.PictureCollection.AddPicture(System.String,System.IO.Stream)">
            <summary>
            Adds a Picture to a specified cell.
            </summary>
            <param name="rangeName">Range name.</param>
            <param name="stream">Stream of picture.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.PictureCollection.AddPicture(System.String,System.Drawing.Image)">
            <summary>
            Adds a Picture to a specified cell.
            </summary>
            <param name="rangeName">range Name.</param>
            <param name="image">Image.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Collections.WorksheetCollection">
            <summary>
            Collection of Worksheet 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Add">
            <summary>
            Adds a new worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Add(Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Add worksheet
            </summary>
            <param name="sheet">Worksheet to be added</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Add(System.String)">
            <summary>
            Adds a new worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Add(System.String,System.Int32,System.Int32)">
            <summary>
            Adds a new worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Insert(System.Int32)">
            <summary>
            Inserts an worksheet into the collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts an worksheet into the collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Insert(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Inserts an worksheet into collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Clear">
            <summary>
            Clear all worksheet from this workbook
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Contains(Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Check whether or not specified worksheet is contained in this workbook
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Count">
            <summary>
            Get number of worksheets in this workbook
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Remove(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Removes a specific sheet from the collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Remove(System.Int32)">
            <summary>
            Removes a specific sheet from the collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Remove(System.String)">
            <summary>
            Removes a specific sheet from the collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.GetEnumerator">
            <summary>
            Get enumerator of worksheet list
            </summary>
            <returns>Enumerator of worksheet list</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Item(System.Int32)">
            <summary>
            Get worksheet by specified position
            </summary>
            <param name="index">Zero-based number of worksheet</param>
            <returns>Instance of worksheet found at specified position</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.Item(System.String)">
            <summary>
            Get worksheet by specified name.
            </summary>
            <param name="name">Name to find worksheet</param>
            <returns>Instacne of worksheet found by specified name</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Collections.WorksheetCollection.IndexOf(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Finds the specified sheet.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Worksheet">
            <summary>
             Represents a single worksheet. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Hyperlinks">
            <summary>
            Gets the hyperlink collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Controls">
            <summary>
            Gets the cell control collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Pictures">
            <summary>
            Gets the cell control collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Shapes">
            <summary>
            Gets the shapes collection of current worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Charts">
            <summary>
            Gets the charts collection of current worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeBorders(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Spreadsheet.Forms.BorderPositions,Spire.Spreadsheet.Forms.BorderStyle)">
            <summary>
            Set borders to specified range
            </summary>
            <param name="row">number of start row</param>
            <param name="col">number of start column</param>
            <param name="rows">number of rows</param>
            <param name="cols">number of columns</param>
            <param name="pos">position around specified range to be set border</param>
            <param name="style">style of border to be set</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeBorders(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.BorderPositions,Spire.Spreadsheet.Forms.BorderStyle)">
            <summary>
            Set border styles to specified range. Or set an empty border style to remove styles from specified range.
            </summary>
            <param name="range">Specified range to be set</param>
            <param name="pos">Style of which position in range should be setted</param>
            <see cref="T:Spire.Spreadsheet.Forms.BorderPositions"/>
            <param name="style">The style of border to be set</param>
            <see cref="T:Spire.Spreadsheet.Forms.BorderStyle"/>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveRangeBorders(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.BorderPositions)">
            <summary>
            Remove border style from specified range.
            </summary>
            <param name="range">Range to be removed</param>
            <param name="pos">Style of which position in range should be removed</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BorderAdded">
            <summary>
            Event fired when any border styles be setted.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BorderRemoved">
            <summary>
            Event fired when any border styles be removed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetRangeBorders(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.BorderPositions,System.Boolean)">
            <summary>
            Get borders info from specified range.
            </summary>
            <param name="range">Range to get borders.</param>
            <param name="pos">Target position of range to get borders.</param>
            <param name="onlyCellsOwn">Indicates whether or not to get only the borders that belong to the cells in given range.</param>
            <returns>Borders info retrieved from specified range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets value to specific cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetText(System.Int32,System.Int32,System.String)">
            <summary>
            Sets string value to specific cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetNumber(System.Int32,System.Int32,System.Double)">
            <summary>
            Set number value to specific cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetCellData(System.String,System.Object)">
            <summary>
            Set data of cell at specified position on worksheet.
            </summary>
            <param name="addressOrName">Address or name to locate the cell.</param>
            <param name="data">Data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetCellData(Spire.Spreadsheet.Forms.CellAdressInfo,System.Object)">
            <summary>
            Set data of cell at specified position on worksheet.
            </summary>
            <param name="pos">Position of cell to set data.</param>
            <param name="data">Data of cell to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetCellData(System.Int32,System.Int32,System.Object)">
            <summary>
            Set data of cell at specified position on worksheet.
            </summary>
            <param name="row">Index of row of specified cell.</param>
            <param name="col">Index of column of specified cell.</param>
            <param name="data">Data of cell.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetSingleCellData(Spire.Spreadsheet.Forms.SpreadCell,System.Object)">
            <summary>
            Set data of cell at specified position on worksheet.
            </summary>
            <param name="cell">Instance of cell.</param>
            <param name="data">Data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UpdateCellData(Spire.Spreadsheet.Forms.SpreadCell,System.Object,System.Collections.Generic.Stack{System.Collections.Generic.List{Spire.Spreadsheet.Forms.SpreadCell}})">
            <summary>
            Update data for cell without doing any format and formula evalution.
            </summary>
            <param name="cell">cell to be updated</param>
            <param name="data">data to be updated</param>
            <param name="dirtyCellStack">A stack to save cells that are marked as dirty cell, the dirty cell will be updated delay</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellData(System.String)">
            <summary>
            Get cell data from specified address or name
            </summary>
            <param name="addressOrName">address or name to locate a cell</param>
            <returns>data from cell</returns>
            <exception cref="T:Spire.Spreadsheet.Forms.InvalidAddressException">throw if specified address or name is invalid</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellData(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Get data from specified cell
            </summary>
            <param name="pos">Position of cell to get data</param>
            <returns>Data of cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellData(System.Int32,System.Int32)">
            <summary>
            Get data from specified cell
            </summary>
            <param name="row">zero-based number of row</param>
            <param name="col">zero-based number of column</param>
            <returns>data of cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellData``1(System.Int32,System.Int32)">
            <summary>
            Get data in specified type from a cell
            </summary>
            <typeparam name="T">type of data will be converted into</typeparam>
            <param name="row">number of row to locate a cell</param>
            <param name="col">number of column to locate a cell</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetNumber(System.Int32,System.Int32)">
            <summary>
            Gets number value from specific cell.
            </summary>
            <param name="row">Row index</param>
            <param name="column">Column index</param>
            <returns>Number value</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetText(System.String)">
            <summary>
            Get cell display text by specified address
            </summary>
            <param name="address">address to locate a cell</param>
            <returns>display text in string returned from specified cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetText(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Get formatted cell text from spcified position
            </summary>
            <param name="pos">position to be get</param>
            <returns>formatted cell's text</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetText(System.Int32,System.Int32)">
            <summary>
            Get formatted cell text from specified position
            </summary>
            <param name="row">Row of position</param>
            <param name="col">Col of position</param>
            <returns>Text of cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetCellBody(Spire.Spreadsheet.Forms.SpreadCell,Spire.Spreadsheet.Forms.CellTypes.ICellBody)">
            <summary>
            Set body of cell into specified row
            </summary>
            <param name="cell">cell to be set</param>
            <param name="body">body to be set</param>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.suspendDataChangedEvent">
            <summary>
            Determine whether or not to suspend all data changing event. Suspend this event when 
            update lot of data into spreadsheet will help to speed up the data updating process.
            Note: make sure this flag can be restored for event invoke.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SuspendDataChangedEvents">
            <summary>
            Suspend all data changing events, from both cell and range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ResumeDataChangedEvents">
            <summary>
            Resume all data changing events.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellDataChanged">
            <summary>
            Event raised when any data has been changed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StringifyRange(Spire.Spreadsheet.Forms.CellRangeInfo,System.Collections.ArrayList)">
            <summary>
            Convert all data from specified range to a tabbed string.
            </summary>
            <param name="range">The range to be converted.</param>
            <returns>Tabbed string contains all data converted from specified range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.PasteFromString(System.String,System.String)">
            <summary>
            Paste data from tabbed string into worksheet.
            </summary>
            <param name="address">Start cell position to be filled.</param>
            <param name="content">Data to be pasted.</param>
            <returns>Range position that indicates the actually filled range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.PasteFromString(Spire.Spreadsheet.Forms.CellAdressInfo,System.String)">
            <summary>
            Paste data from tabbed string into worksheet.
            </summary>
            <param name="startPos">Start position to fill data.</param>
            <param name="content">Tabbed string to be pasted.</param>
            <returns>Range position that indicates the actually filled range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Copy">
            <summary>
            Copy data and put into Clipboard.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Paste">
            <summary>
            Copy data from Clipboard and put on grid.
            
            Currently ReoGrid supports the following types of source from the clipboard.
             - Data from another ReoGrid instance
             - Plain/Unicode Text from any Windows Applications
             - Tabbed Plain/Unicode Data from Excel or similar applications
            
            When data copied from another ReoGrid instance, and the destination range 
            is bigger than the source, ReoGrid will try to repeat putting data to fill 
            the destination range entirely.
            
            Todo: Copy border and cell style from Excel.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Cut">
            <summary>
            Copy any remove anything from selected range into Clipboard.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CanCopy">
            <summary>
            Determine whether the selected range can be copied.
            </summary>
            <returns>True if the selected range can be copied.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CanCut">
            <summary>
            Determine whether the selected range can be cutted.
            </summary>
            <returns>True if the selected range can be cutted.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CanPaste">
            <summary>
            Determine whether the data contained in Clipboard can be pasted into grid control.
            </summary>
            <returns>True if the data contained in Clipboard can be pasted</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforePaste">
            <summary>
            Before a range will be pasted from Clipboard
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterPaste">
            <summary>
            When a range has been pasted into grid
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.OnPasteError">
            <summary>
            When an error happened during perform paste
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeCopy">
            <summary>
            Before a range to be copied into Clipboard
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterCopy">
            <summary>
            When a range has been copied into Clipboard
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeCut">
            <summary>
            Before a range to be moved into Clipboard
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterCut">
            <summary>
            After a range to be moved into Clipboard
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFillSerial(System.String,System.String)">
            <summary>
            Auto fill specified serial in range.
            </summary>
            <param name="fromAddressOrName">Range to read filling rules.</param>
            <param name="toAddressOrName">Range to be filled.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFillSerial(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Auto fill specified serial in range.
            </summary>
            <param name="fromRange">Range to read filling rules.</param>
            <param name="toRange">Range to be filled.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeDataFormat(System.String,Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Set data format for specified range.
            </summary>
            <param name="addressOrName">Address or name to locate the cell and range on spreadsheet to be set.</param>
            <param name="format">Flag specifies that which format will be used.</param>
            <param name="dataFormatArgs">Argument to specify the details for different format.</param>
            <exception cref="T:Spire.Spreadsheet.Forms.InvalidAddressException">Throw if specified address or name is illegal.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeDataFormat(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Set data format for specified range.
            </summary>
            <param name="row">Number of row to locate the range.</param>
            <param name="col">Number of column to locate the range.</param>
            <param name="rows">Number of rows contained in the range.</param>
            <param name="cols">Number of columns contained in the range.</param>
            <param name="format">Flag specifies that which format will be used.</param>
            <param name="dataFormatArgs">Argument to specify the details for different format.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeDataFormat(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag,System.Object)">
            <summary>
            Set data format for specified range.
            </summary>
            <param name="range">Range to be set.</param>
            <param name="format">Flag specifies that which format will be used.</param>
            <param name="dataFormatArgs">Argument to specify the details for different format.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DeleteRangeDataFormat(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Delete data format settings from specified range
            </summary>
            <param name="range">Range to be remove formats</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FloatingObjects">
            <summary>
            Access the collection of floating objects from worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.EnableRowFilter">
            <summary>
            Enable row filter.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DisableRowFilter">
            <summary>
            Disable row filter.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveRowFilter">
            <summary>
            Remove row filter.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RefreshAutoFilterFromB">
            <summary>
            Refresh auto filter from Converter.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RowsFiltered">
            <summary>
            Event raised when rows filtered on this worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SortColumn(System.Int32)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex">column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SortColumns(System.Int32,System.Int32)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SortColumn(System.Int32,Spire.Spreadsheet.Forms.SortOrder,System.Boolean)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex">column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SortColumns(System.Int32,System.Int32,Spire.Spreadsheet.Forms.SortOrder,System.Boolean)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SortColumns(System.Int32[],Spire.Spreadsheet.Forms.SortOrder[],System.Boolean)">
            <summary>
            Sort data on specified columns.
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SortColumn(System.Int32,Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.SortOrder,Spire.Spreadsheet.Forms.CellElementFlag)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex">Zero-based number of column to sort data.</param>
            <param name="applyRange">Data only be changed in this range during sort.</param>
            <param name="order">Order of data sort.</param>
            <param name="cellDataComparer">Custom cell data comparer, compares two cells and returns an integer. 
            Set this value to null to use default built-in comparer.</param>
            <returns>Data changed range.</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RowsSorted">
            <summary>
            Event raised when rows sorted on this worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetFormula(System.String,System.String)">
            <summary>
            Set formula into cell, calculate the value of formula and update referenced cells.
            </summary>
            <param name="addressOrName">Address or name to locate range on worksheet</param>
            <param name="formula">Formula to be set. Equal sign is not required.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetFormula(System.Int32,System.Int32,System.String)">
            <summary>
            Set formula into cell, calculate the value of formula and update referenced cells.
            </summary>
            <param name="row">Number of row of cell</param>
            <param name="col">Number of column of cell</param>
            <param name="formula">Formula to be set. Equal sign is not required.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetFormula(Spire.Spreadsheet.Forms.CellAdressInfo,System.String)">
            <summary>
            Set formula into cell, calculate the value of formula and update referenced cells.
            </summary>
            <param name="pos">position of cell</param>
            <param name="formula">Formula to be set. Equal sign is not required.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Recalculate">
            <summary>
            Recalculate entire worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DeleteCellFormula(System.String)">
            <summary>
            Delete formula from specified cell.
            </summary>
            <param name="addressOrName">Address or name used to locate cell on worksheet.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DeleteCellFormula(System.Int32,System.Int32)">
            <summary>
            Delete formula from specified cell.
            </summary>
            <param name="row">Number of row of the cell to be deleted.</param>
            <param name="col">Number of column of the cell to be deleted.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DeleteCellFormula(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Delete formula from specified.
            </summary>
            <param name="cell">Instance of cell to be deleted.</param>
        </member>
        <!-- 对于成员“P:Spire.Spreadsheet.Forms.Worksheet.DefaultColumnWidth”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“P:Spire.Spreadsheet.Forms.Worksheet.DefaultRowHeight”忽略有格式错误的 XML 注释 -->
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AppendColumns(System.Int32)">
            <summary>
            Append specified columns at right of spreadsheet
            </summary>
            <param name="count">number of columns</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AppendRows(System.Int32)">
            <summary>
            Append specified rows at bottom of grid
            </summary>
            <param name="count">number of rows</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertRow(System.Int32)">
            <summary>
            Insert row before specified row index
            </summary>
            <param name="row">index of row</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertRows(System.Int32,System.Int32)">
            <summary>
            Insert rows before specified row index
            </summary>
            <param name="row">index of row</param>
            <param name="count">count of insert rows</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InnerInsertRows(System.Int32,System.Int32)">
            <summary>
            Insert rows before specified row index
            </summary>
            <param name="row">index of row</param>
            <param name="count">number of rows</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertColumn(System.Int32)">
            <summary>
            Insert column before specified row index
            </summary>
            <param name="col">zero-based number of column start to insert columns</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertColumns(System.Int32,System.Int32)">
            <summary>
            Insert columns before specified col index
            </summary>
            <param name="col">zero-based number of column start to insert columns</param>
            <param name="count">insert columns count</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InnerInsertColumns(System.Int32,System.Int32)">
            <summary>
            Insert columns before specified row index
            </summary>
            <param name="col">zero-based number of column start to insert columns</param>
            <param name="count">number of columns to be inserted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveRow(System.Int32)">
            <summary>
            Delete row from speicifed number of row
            </summary>
            <param name="row">number of row start to be deleted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveRows(System.Int32,System.Int32)">
            <summary>
            Delete rows from speicifed number of row
            </summary>
            <param name="row">number of row start to be deleted</param>
            <param name="count">number of rows to be deleted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveColumn(System.Int32)">
            <summary>
            Delete column from specified number of column
            </summary>
            <param name="col">number of column start to be deleted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveColumns(System.Int32,System.Int32)">
            <summary>
            Delete columns from specified number of column
            </summary>
            <param name="col">number of column start to be deleted</param>
            <param name="count">number of columns to be deleted</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.RowHeaderWidth">
            <summary>
            Get or set width of row header in pixel.
            
            Set to -1 to restore system default width;
            Set to 0 to hide the panel of row header;
            Set to other value to decide the width of row header in pixel;
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetColumnWidthInPixels(System.Int32,System.Int32)">
            <summary>
            Sets column with.
            </summary>
            <param name="columnIndex"></param>
            <param name="width"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetColumnsWidth(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set width of specified columns
            </summary>
            <param name="col">Start column index to set</param>
            <param name="count">Number of columns to set</param>
            <param name="width">Width value of column</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRowHeightPixels(System.Int32,System.Double)">
            <summary>
            Sets row height.
            </summary>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRowsHeight(System.Int32,System.Int32,System.Double)">
            <summary>
            Set height of specified rows
            </summary>
            <param name="row">Start row index to set</param>
            <param name="count">Number of rows to set</param>
            <param name="height">Height value of row</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetColumnWidthPixels(System.Int32)">
            <summary>
            Get width from specified column. (in pixel)
            </summary>
            <param name="col">Column index to get.</param>
            <returns>Width in pixel of specified column.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetRowHeightPixels(System.Int32)">
            <summary>
            Get height from specified row
            </summary>
            <param name="row">Row index to get</param>
            <returns>Height value of specified row</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofit the row height. 
            </summary>
            <param name="rowIndex">row index, zero based</param>
            <param name="firstColumn">Zero-based index of the first column to be used for autofit operation.</param>
            <param name="lastColumn">Zero-based index of the last column to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitRow(System.Int32)">
            <summary>
            Autofit the row height. 
            </summary>
            <param name="rowIndex">row index</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitRow(System.Int32,System.Int32)">
            <summary>
            Autofit the row height.
            </summary>
            <param name="firstRow">Zero-based index of the first row to be used for autofit operation.</param>
            <param name="lastRow">Zero-based index of the last row to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitRow">
            <summary>
            Autofit all rows height
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InnerAutoFitRowHeight(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Make height of specified row header to fit the cells on that row automatically.
            </summary>
            <param name="row">Zero-based number of row to be adjusted.</param>
            <param name="byAction">Specify that whether or not this operation should 
            be done by performing action, that will be able to revoke this behavior.</param>
            <returns>Return true if operation actually done; Return false if nothing 
            happened. (cells are default height)</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofit column.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="firstRow">Zero-based index of the first row to be used for autofit operation.</param>
            <param name="lastRow">Zero-based index of the last row to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitColumn(System.Int32)">
            <summary>
            Autofit the column width.
            </summary>
            <param name="columnIndex">column index</param>     
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitColumn(System.Int32,System.Int32)">
            <summary>
            Autofit the column width.
            </summary>
            <param name="fistColumn">Zero-based index of the first column to be used for autofit operation.</param>
            <param name="lastColumn">Zero-based index of the last column to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoFitColumn">
            <summary>
            Autofit all columns width.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Resize(System.Int32,System.Int32)">
            <summary>
            Resize grid to specified number of rows and cols.
            </summary>
            <param name="rows">Number of rows to be resized.</param>
            <param name="cols">Number of columns to be resized.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetColumns(System.Int32)">
            <summary>
            Set number of columns (up to 32768)
            </summary>
            <param name="colCount">Number of columns</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRows(System.Int32)">
            <summary>
            Set number of rows (up to 1048576)
            </summary>
            <param name="rowCount">Number of rows</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.HideRows(System.Int32,System.Int32)">
            <summary>
            Hide specified rows.
            </summary>
            <seealso cref="M:Spire.Spreadsheet.Forms.Worksheet.ShowRows(System.Int32,System.Int32)"/>
            <param name="row">Index of row start to hide.</param>
            <param name="count">Number of rows to be hidden.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ShowRows(System.Int32,System.Int32)">
            <summary>
            Show specified rows.
            </summary>
            <seealso cref="M:Spire.Spreadsheet.Forms.Worksheet.HideRows(System.Int32,System.Int32)"/>
            <param name="row">Number of row start to show.</param>
            <param name="count">Number of rows to show.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.HideColumns(System.Int32,System.Int32)">
            <summary>
            Hide specified columns.
            </summary>
            <seealso cref="M:Spire.Spreadsheet.Forms.Worksheet.ShowColumns(System.Int32,System.Int32)"/>
            <param name="col">index of start column to hide</param>
            <param name="count">number of columns to be hidden</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ShowColumns(System.Int32,System.Int32)">
            <summary>
            Show specified columns.
            </summary>
            <seealso cref="M:Spire.Spreadsheet.Forms.Worksheet.HideColumns(System.Int32,System.Int32)"/>
            <param name="col">Number of column start to show.</param>
            <param name="count">Number of columns to show.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsRowVisible(System.Int32)">
            <summary>
            Check whether or not a specified row is visible.
            </summary>
            <seealso cref="M:Spire.Spreadsheet.Forms.Worksheet.IsColumnVisible(System.Int32)"/>
            <param name="row">Zero-based row index to check.</param>
            <returns>True if the specified row on worksheet is visible; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsColumnVisible(System.Int32)">
            <summary>
            Check whether or not a specified column is visible.
            </summary>
            <seealso cref="M:Spire.Spreadsheet.Forms.Worksheet.IsRowVisible(System.Int32)"/>
            <param name="col">Zero-based row index to check.</param>
            <returns>True if the specified column on worksheet is visible; otherwise return false.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ColumnCount">
            <summary>
            Get number of columns for current worksheet (must at least one column left)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.RowCount">
            <summary>
            Get or set number of rows for current worksheet (must at least one row left)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RetrieveRowHeader(System.Int32)">
            <summary>
            Get instance of row header from specified number of row
            (internal method, no boundary check)
            </summary>
            <param name="index">number of row to be get</param>
            <returns>instance of row header</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RetrieveColumnHeader(System.Int32)">
            <summary>
            Get the instance of column header from specified number of column
            (internal method, no boundary check)
            </summary>
            <param name="index">number of column to be get</param>
            <returns>instance of column header</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetRowHeader(System.Int32)">
            <summary>
            Get instance of row header from specified number of row.
            </summary>
            <param name="index">number of row to be get.</param>
            <returns>instance of row header.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetColumnHeader(System.Int32)">
            <summary>
            Get the instance of column header from specified number of column.
            </summary>
            <param name="index">Number of column to be get.</param>
            <returns>Instance of column header.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Rows">
            <summary>
            Get the collection of row header.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Columns">
            <summary>
            Get the collection of column header.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RowsInserted">
            <summary>
            Event raised on row inserted at given index of row.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RowsDeleted">
            <summary>
            Event raised on row deleted at given index of row.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.ColumnsInserted">
            <summary>
            Event raised on column inserted at given index of column.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.ColumnsDeleted">
            <summary>
            Event raised on column deleted at given index of column.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RowsHeightChanged">
            <summary>
            Event raised when row's height changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.ColumnsWidthChanged">
            <summary>
            Event raised when column's width changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetOutlines(Spire.Spreadsheet.Forms.RowOrColumn)">
            <summary>
            Retrieve the attached outlines from spreadsheet.
            </summary>
            <param name="flag">Row or column to be retrieved.</param>
            <returns>Retrieved collection of outline.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IterateOutlines(Spire.Spreadsheet.Forms.RowOrColumn,Spire.Spreadsheet.Forms.Worksheet.IterateOutlinesHandler)">
            <summary>
            Iterate over all attached outlines.
            </summary>
            <param name="flag">Spcifiy that row or column to be iterated.</param>
            <param name="iterator">Iterator to handle all outlines.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GroupColumns(System.Int32,System.Int32)">
            <summary>
            Group columns from specified number of columns 
            </summary>
            <param name="col">number of columns to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GroupColumns(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group columns from specified number of columns 
            </summary>
            <param name="firstColumn">number of columns to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
            <param name="visible">visible</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GroupColumns(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group columns from specified number of columns.
            </summary>
            <param name="firstColumn">number of columns to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
            <param name="outlineLevel">outlineLevel</param>
            <param name="visible">visible</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UngroupColumns(System.Int32,System.Int32)">
            <summary>
            Ungroup specified columns. (Remove outline from specified columns)
            </summary>
            <param name="col">number of column to ungroup.</param>
            <param name="count">number of columns to ungroup.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GroupRows(System.Int32,System.Int32)">
            <summary>
            Group rows from specified number of rows 
            </summary>
            <param name="firstRow">number of rows to start group.</param>
            <param name="count">numbers of column to be grouped</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GroupRows(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group rows from specified number of rows 
            </summary>
            <param name="firstRow">number of rows to start group.</param>
            <param name="count">numbers of column to be grouped</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GroupRows(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group rows from specified number of rows 
            </summary>
            <param name="firstRow">number of rows to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
            <param name="outlineLevel">outlineLevel</param>
            <param name="visible">visible.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UngroupRows(System.Int32,System.Int32)">
            <summary>
            Ungroup specified rows. (Remove outline from specified rows)
            </summary>
            <param name="row">number of row to ungroup.</param>
            <param name="count">number of rows to ungroup.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetOutline(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Get an instance of outline by specified position.
            </summary>
            <param name="flag">Determine that outline in row or column direction to be get.</param>
            <param name="start">Zero-based start position of the outline.</param>
            <param name="count">Number of rows or columns contained in the outline.</param>
            <returns>Instance of outline if found with specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CollapseOutline(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Collapse specified outline.
            </summary>
            <param name="flag">Determine that outline in row or column direction to be get.</param>
            <param name="start">Zero-based start position of the outline.</param>
            <param name="count">Number of rows or columns contained in the outline.</param>
            <returns>Instance if specified outline was found and collapsed.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ExpandOutline(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Expand specified outline.
            </summary>
            <param name="flag">Determine that outline in row or column direction to be get.</param>
            <param name="start">Zero-based start position of the outline.</param>
            <param name="count">Number of rows or columns contained in the outline.</param>
            <returns>Instance if specified outline was found and expanded.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveOutline(Spire.Spreadsheet.Forms.RowOrColumn,System.Int32,System.Int32)">
            <summary>
            Remove outline from specified position by number of rows or columns.
            </summary>
            <param name="flag">Which row and column to be removed.</param>
            <param name="start">Zero-based start position of the outline.</param>
            <param name="count">Number of rows or columns contained in the outline.</param>
            <returns>Instance of outline has been removed; Return null if no outlines found 
            from specified position and count information.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearOutlines(Spire.Spreadsheet.Forms.RowOrColumn)">
            <summary>
            Clear all outlines and close the outline panel.
            </summary>
            <param name="flag">Specifies to process row or column outline of row and column to be clear.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.OutlineAdded">
            <summary>
            Event raised when an outline has been added onto spreadsheet
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.OutlineRemoved">
            <summary>
            Event raised when an outline has been removed from spreadsheet
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeOutlineCollapse">
            <summary>
            Event is raised before an outline collapse
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterOutlineCollapse">
            <summary>
            Event is raised after an outline collapse
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeOutlineExpand">
            <summary>
            Event is raised before an outline expanding
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterOutlineExpand">
            <summary>
            Event is raised after an outline expanding
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetPartialGrid(System.String)">
            <summary>
            Copy a part of worksheet from specified range that identified by address or name.
            </summary>
            <param name="addressOrName">The address or name to locate a range position on worksheet.</param>
            <returns>A part of worksheet that is copied from original worksheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetPartialGrid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a part of worksheet from specified range that identified by address value.
            </summary>
            <param name="row">Number of start row.</param>
            <param name="col">Number of start col.</param>
            <param name="rows">Number of rows to be copied.</param>
            <param name="cols">Number of columns to be copied.</param>
            <returns>A part of worksheet that is copied from original worksheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetPartialGrid(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Copy a part of worksheet from specified range.
            </summary>
            <param name="range">The range to be copied.</param>
            <returns>A part of worksheet that is copied from original worksheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetPartialGrid(System.String,Spire.Spreadsheet.Forms.PartialGrid)">
            <summary>
            Copy a part of worksheet into current worksheet.
            </summary>
            <param name="addressOrName">The target range position specified by address or name.</param>
            <param name="data">A part of worksheet to be copied.</param>
            <returns>The range position that is the range filled actually.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetPartialGrid(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PartialGrid)">
            <summary>
            Copy from a separated grid into current grid.
            </summary>
            <param name="data">Partial grid to be copied.</param>
            <param name="toRange">Range to be copied.</param>
            <returns>Range has been copied</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetPartialGridRepeatly(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PartialGrid)">
            <summary>
            Repeat to copy from a separated grid to fit specified range
            </summary>
            <param name="grid">Partial grid to be copied</param>
            <param name="range">Range to be copied</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.PageSetup">
            <summary>
            Ger or set ReoGrid spreadsheet print settings.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.PrintableRange">
            <summary>
            Get or set printable range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.RowPageBreaks">
            <summary>
            Get collection of row page-break indexes
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ColumnPageBreaks">
            <summary>
            Get collection of column page break indexes
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AutoSplitPage">
            <summary>
            Split spreadsheet into multiple pages automatically according to given paper size.
            </summary>
            <remarks>
            This method itself works very fast, but will be slower if a remote printer is specified 
            as target printer. Fetching paper size from a remote printer will spend more than 100ms. 
            (depending on the network environment)
            </remarks>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ChangeColumnPageBreak(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Change (Move) a column page break index from specified position to a new position.
            </summary>
            <param name="oldIndex">Zero-based number of column to find the page break that will be moved.</param>
            <param name="newIndex">Zero-based number of column to put column page break.</param>
            <param name="refreshPageBreaks">Indicates whether or not to resplit all pages after changing. (Default is true)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ChangeRowPageBreak(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move a specified row page break index from specified position to a new position.
            </summary>
            <param name="oldIndex">Zero-based number of row to find the page break that will be moved.</param>
            <param name="newIndex">Zero-based number of row to put row page break.</param>
            <param name="refreshPageBreaks">Indicates whether or not to resplit all pages after changing. (Default is true)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertColumnPageBreak(System.Int32,System.Boolean)">
            <summary>
            Insert row page break before specified column
            </summary>
            <param name="columnIndex">zero-based number of row to insert page break</param>
            <param name="refreshPageBreaks">indicates that whether allow to update others page 
            break and adjust the page scale automatically. (default is true)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertRowPageBreak(System.Int32,System.Boolean)">
            <summary>
            Insert row page break before specified row
            </summary>
            <param name="rowIndex">zero-based number of row to insert page break</param>
            <param name="refreshPageBreaks">indicates that whether allow to update others page 
            break and adjust the page scale automatically. (default is true)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveColumnPageBreak(System.Int32)">
            <summary>
            Remove column page break from specified number of column
            </summary>
            <param name="columnIndex">zero-based number of column to remove specified page break</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveRowPageBreak(System.Int32)">
            <summary>
            Remove row page break from specified number of row
            </summary>
            <param name="rowIndex">zero-based number of row to remove specified page break</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearColumnPageBreaks">
            <summary>
            Clear all column page breaks
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearRowPageBreaks">
            <summary>
            Clear all row page breaks
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Ranges">
            <summary>
            Virtual collection range of spreadsheet
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Worksheet.ReoGridRangeCollection">
            <summary>
            Virtual collection range of spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ReoGridRangeCollection.Item(System.String)">
            <summary>
            Retrieve logical range by specified address
            </summary>
            <param name="address">address to locate a range</param>
            <returns>range position information</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ReoGridRangeCollection.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve logical range by specified address
            </summary>
            <param name="row">zero-based number of row of range</param>
            <param name="col">zero-based number of column of range</param>
            <param name="rows">number of rows contained in range</param>
            <param name="cols">number of columns contained in range</param>
            <returns>range position information</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ReoGridRangeCollection.Item(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Retrieve logical range by specified start cell position and end cell position
            </summary>
            <param name="startPos">start cell position of range</param>
            <param name="endPos">end cell position of range</param>
            <returns>range position information</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ReoGridRangeCollection.Item(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Retrieve logical range by specified range position
            </summary>
            <param name="range">The range position to be get</param>
            <returns>Instance of referenced range to worksheet</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetRangeData(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Get data array from specified range
            </summary>
            <param name="range">Range to get data array</param>
            <returns>Data array of range</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DeleteRangeData(System.String)">
            <summary>
            Remove all cell's data from specified range.
            </summary>
            <param name="addressOrName">Address or name to locate range on worksheet.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DeleteRangeData(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Remove all cell's data from specified range.
            </summary>
            <param name="range">Range to remove data array.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DeleteRangeData(Spire.Spreadsheet.Forms.CellRangeInfo,System.Boolean)">
            <summary>
            Remove all cell's data from specified range.
            </summary>
            <param name="range">Range to remove data array</param>
            <param name="checkReadonly">if this flag is set to true, the value from 
            readonly cells will not be deleted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeData(System.String,System.Object)">
            <summary>
            Set cell's data to fill specified range.
            </summary>
            <param name="addressOrName">Address or name to locate range on worksheet.</param>
            <param name="data">Data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeData(System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <summary>
            Set cell's data to fill specified range.
            </summary>
            <param name="row">Zero-based number of row.</param>
            <param name="col">Zero-based number of column.</param>
            <param name="rows">Number of rows in the range.</param>
            <param name="cols">Number of columns in the range.</param>
            <param name="data">Data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeData(Spire.Spreadsheet.Forms.CellRangeInfo,System.Object)">
            <summary>
            Set cell's data to fill specified range.
            </summary>
            <param name="range">Range position on worksheet to set the data.</param>
            <param name="data">Data to be set.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeData(Spire.Spreadsheet.Forms.CellRangeInfo,System.Object,System.Boolean)">
            <summary>
            Set data into specified range.
            </summary>
            <param name="range">Range to set data.</param>
            <param name="data">Data to be set into the range.</param>
            <param name="checkReadonly">Ignore to update read-only cells if this flag is true; 
            Set this flag as fasle to update all cells in specified range. (Default is true)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeData(Spire.Spreadsheet.Forms.CellRangeInfo,System.Data.DataTable)">
            <summary>
            Set range data copied from data table.
            </summary>
            <param name="range">Range to fill the data read from data table</param>
            <param name="table">Read data from this data table</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RangeDataChanged">
            <summary>
            Event raised when entire data from a range is changed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FixPos(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Check the boundary of cell position and return a safe position.
            </summary>
            <param name="pos">The cell position to check.</param>
            <returns>Safe cell position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FixRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check the boundary of range position and return normalized range from this worksheet.
            </summary>
            <param name="range">The range position to be checked.</param>
            <returns>Normalized range position from this worksheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CheckRangeReadonly(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether or not the specified range contains any read-only cells.
            </summary>
            <remarks>
            This method ingores worksheet Readonly setting. If worksheet contains Readonly setting, 
            cells including cells data from this worksheet should not be changed. 
            To check the worksheet Readonly setting, use:
            <code>
            bool hasReadonly = worksheet.HasSettings(WorksheetSettings.Edit_Readonly);
            </code>
            </remarks>
            <param name="range">Range position to be checked.</param>
            <returns>True if the range contains read-only cells; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToCell(System.String)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="address">address to locate the specified cell</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="pos">index position to locate specified cell</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="cell">cell instance to be displayed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToCell(System.Int32,System.Int32)">
            <summary>
            Scroll to specified cell position
            </summary>
            <param name="row">Number of row</param>
            <param name="col">Number of column</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToRange(System.String)">
            <summary>
            Scroll view to make the specified range visible.
            </summary>
            <param name="addressOrName">address or name to locate a range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="row">number of row</param>
            <param name="col">number of column</param>
            <param name="rows">number of rows in the range</param>
            <param name="cols">number of columns in the range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Scroll view to make the specified cell visible.
            </summary>
            <param name="range">range index to locate a range on spreadsheet</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ScrollToRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Scroll to specified range based on a position to the range
            </summary>
            <param name="range">Range to be displayed</param>
            <param name="basePos">Base point to scroll views</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveRange(System.String,System.String)">
            <summary>
            Move cells from specified range to another range.
            </summary>
            <param name="fromRangeAddress"></param>
            <param name="toRangeAddress"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Move cells from specified range to another range.
            </summary>
            <param name="fromRange">Cells moved from this range.</param>
            <param name="toRange">Cells moved to this range.</param>
            <exception cref="T:Spire.Spreadsheet.Forms.CellDataReadonlyException">Throw when current worksheet is read-only.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeIntersectionException">Range to be moved or copied to that contains a part of another merged cell.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PartialGridCopyFlag)">
            <summary>
            Move cells from specified range to another range.
            </summary>
            <param name="fromRange">Cells moved from this range.</param>
            <param name="toRange">Cells moved to this range.</param>
            <param name="flags">Select the types of content to be moved or copied.</param>
            <exception cref="T:Spire.Spreadsheet.Forms.CellDataReadonlyException">Throw when current worksheet is read-only.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeIntersectionException">Range to be moved or copied to that contains a part of another merged cell.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CopyRange(System.String,System.String)">
            <summary>
            Copy content from specified range to another range.
            </summary>
            <param name="fromRangeAddress">Address to locate the range to read data.</param>
            <param name="toRangeAddress">Address to put copied data.</param>
            <exception cref="T:Spire.Spreadsheet.Forms.CellDataReadonlyException">Throw when current worksheet is read-only.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeIntersectionException">Range to be moved or copied contains a part of another merged cell.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CopyRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Copy content from specified range to another range.
            </summary>
            <remarks>
            The range copied from cannot be a part of another range, <para>fromRange</para> contains a part of 
            another range will cause RangeIntersectionException.
            </remarks>
            <param name="fromRange">The range to be copied from.</param>
            <param name="toRange">Target range that is used to put copied content.</param>
            <exception cref="T:Spire.Spreadsheet.Forms.CellDataReadonlyException">Throw when current worksheet is read-only.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeIntersectionException">Range to be moved or copied contains a part of another merged cell.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeContainsReadonlyCellsException">Thrown when specified target range contains any read-only cell that cannot be overwritten.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CopyRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PartialGridCopyFlag)">
            <summary>
            Copy content from specified range to another range.
            </summary>
            <remarks>
            The range copied from cannot be a part of another range, <para>fromRange</para> contains a part of 
            another range will cause RangeIntersectionException.
            </remarks>
            <param name="fromRange">The range to be copied from.</param>
            <param name="toRange">Target position that is used to put copied content.</param>
            <param name="flags">Content flags that specifiy the types of content to be copied. (Value of this flag can be data, borders, styles and etc.)</param>
            <exception cref="T:Spire.Spreadsheet.Forms.CellDataReadonlyException">Throw when current worksheet is read-only.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeIntersectionException">Range to be moved or copied to that contains a part of another merged cell.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeContainsReadonlyCellsException">Thrown when specified target range contains any read-only cell that cannot be overwritten.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CopyRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PartialGridCopyFlag,System.Boolean)">
            <summary>
            Copy content from specified range to another range.
            </summary>
            <remarks>
            The range copied from cannot be a part of another range, <para>fromRange</para> contains a part of 
            another range will cause <code>RangeIntersectionException</code>.
            Operation will be cancelled if <para>fromRange</para> is same as <para>toRange</para>
            </remarks>
            <param name="fromRange">Range to be copied from.</param>
            <param name="toRange">Target position that is used to put copied content.</param>
            <param name="flags">Content flags that specifiy the types of content to be copied. (Value of this flag can be data, borders, styles and etc.)</param>
            <param name="moveRange">Determines that whether or not to remove content from original range. Set true to move range; set false to copy range.</param>
            <exception cref="T:Spire.Spreadsheet.Forms.CellDataReadonlyException">Throw when current worksheet is read-only.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeIntersectionException">Range to be moved or copied contains a part of another merged cell.</exception>
            <exception cref="T:Spire.Spreadsheet.Forms.RangeContainsReadonlyCellsException">Thrown when specified target range contains any read-only cell that cannot be overwritten.</exception>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeRangeMove">
            <summary>
            Event raised before move a range.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeRangeCopy">
            <summary>
            Event raised before copy a range.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterRangeMove">
            <summary>
            Event raised after move a range.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterRangeCopy">
            <summary>
            Event rasied after copy a range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearRangeContent(System.String,Spire.Spreadsheet.Forms.CellElementFlag)">
            <summary>
            Clear content inside specified range.
            </summary>
            <param name="addressOrName">Address or name to locate the range.</param>
            <param name="flags">Elements in cell specified by this flag to be removed.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearRangeContent(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellElementFlag,System.Boolean)">
            <summary>
            Clear content inside specified range.
            </summary>
            <param name="range">The range to be clear.</param>
            <param name="flags">Elements in cell specified by this flag to be removed.</param>
            <param name="checkReadonly">True to ignore read-only cells; False to delete content from read-only cells.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FocusHighlightRange">
            <summary>
            Get or set the focus highlight range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.HighlightRanges">
            <summary>
            Collection of highlighted ranges
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartCreateHighlightRange">
            <summary>
            Start pick and create a highlight range on spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CreateHighlightRange(System.String)">
            <summary>
            Create highlight range from specified range position.
            </summary>
            <param name="address">Address or name to locate the range on worksheet.</param>
            <returns>Instance of highlight range created on the worksheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CreateHighlightRange(System.String,Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Create highlight range at specified position
            </summary>
            <param name="addressOrName">Address or name to locate a range on worksheet</param>
            <param name="color">Color of the hihglight range displayed on worksheet</param>
            <returns>Instace of highlight range created in this worksheet</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CreateHighlightRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Create highlight range at specified position
            </summary>
            <param name="range">Range on worksheet to be highlight</param>
            <param name="color">Color of the hihglight range displayed on worksheet</param>
            <returns>Instace of highlight range created in this worksheet</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AddHighlightRange(System.String)">
            <summary>
            Crearte and display a highlighted range at specified position on worksheet
            </summary>
            <param name="address">Address or name to locate a range on worksheet</param>
            <returns>Instance of highlight range on worksheet</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AddHighlightRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Crearte and display a highlighted range at specified position on worksheet
            </summary>
            <param name="range">Position to add highlighted range</param>
            <returns>Instance of highlight range on worksheet</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveHighlightRange(System.String)">
            <summary>
            Remove a highlighted range from specified address
            </summary>
            <param name="address">address to remove highlighted range</param>
            <returns>true if range removed successfully</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveHighlightRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Remove a highlighted range from specified position
            </summary>
            <param name="range">position to remove highlighted range</param>
            <returns>true if range removed successfully</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveAllHighlightRanges">
            <summary>
            Remove all highlighted ranges from current spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.HasHighlightRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether a range specified by position is added into current spreadsheet
            </summary>
            <param name="range">range to be checked</param>
            <returns>true if specified range is alreay added</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.TimerRun">
            <summary>
            Threading to update frames of focus highlighted range
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Worksheet.HighlightRangeCollection">
            <summary>
            Collection of highlighted range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Merge(System.String)">
            <summary>
            Merge a range by specified address or name
            </summary>
            <param name="addressOrName">address or name to locate a range, if a name of range is specified, 
            the name must be defined by DefineNamedRange first.</param>
            <exception cref="T:Spire.Spreadsheet.Forms.NamedRangeNotFoundException">throw when the specified name of range cannot be found.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Merge(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Merges a specified range.
            </summary>
            <param name="range">Merged cells range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Merge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges a specified range.
            </summary>
            <param name="firstRow">First row.</param>
            <param name="firstColumn">First column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Unmerge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Unmerge specified range.
            </summary>
            <param name="firstRow">First row.</param>
            <param name="firstColumn">First column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Unmerge(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Unmerges a specified range of merged cells. 
            </summary>
            <param name="range">Merged cells range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InnerUnmerge(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Unmerge all cells contained in the specified range.
            </summary>
            <seealso cref="!:MergeRange"/>
            <param name="range">Range to be checked and all cells in this range will be unmerged.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveAllMerges">
            <summary>
            Removes all merges.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetMerge(System.Int32)">
            <summary>
            Get the cell range of the merge at the specified index.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RangeMerged">
            <summary>
            Event raised when range merged
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RangeUnmerged">
            <summary>
            Event raised when range unmerged
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CheckIntersectedMergingRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check are there any merged range exist in specified range
            </summary>
            <param name="range">range to be checked</param>
            <returns>the intersected range with specified range</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.HasIntersectedMergingRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check are there any merged range exist in specified range
            </summary>
            <param name="range">range to be checked</param>
            <returns>true if specified range can be merged</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CheckMergedRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether a  range intersects with others merged range, return the most outside range which contains all these intersected range.
            </summary>
            <param name="range">Range to be checked.</param>
            <returns>Most outside range that contains all intersected range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RangeIsMergedCell(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether or not specified range contains only one cell, merged cell is treated as one cell.
            </summary>
            <param name="range">Range to be checked</param>
            <returns>True if the range contains only one cell or one merged cell; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AddNamedRange(Spire.Spreadsheet.Forms.NamedRange)">
            <summary>
            Add a named range into current spreadsheet.
            </summary>
            <param name="namedRange">Named range to be added.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.DefineNamedRange(System.String,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Define named range registered into spreadsheet
            </summary>
            <param name="name">Name to identify a range in spreadsheet</param>
            <param name="range">Range to be added into spreadsheet</param>
            <param name="scope">The valid scope of this named range</param>
            <returns>Instance of named range added into spreadsheet</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetNamedRange(System.String)">
            <summary>
            Get named range which registered in current sheet
            </summary>
            <param name="name">string to name a range</param>
            <returns>referenced range of specified name</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.TryGetNamedRange(System.String,Spire.Spreadsheet.Forms.NamedRange@)">
            <summary>
            Try get a named range by specified name
            </summary>
            <param name="name">name for range to be get</param>
            <param name="namedRange">output argument, range assoicated with specified name will be returned</param>
            <returns>true if specified name exists and the instance of range has been returned from spreadsheet, otherwise false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UndefineNamedRange(System.String)">
            <summary>
            Undefine named range from this worksheet
            </summary>
            <param name="name">Name of range</param>
            <returns>true if the range was found and removed by specified name</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetAllNamedRanges">
            <summary>
            Get all named range that has been registered in current spreadsheet
            </summary>
            <returns>list of name for all named ranges registered in this</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetNameByRange(System.String)">
            <summary>
            Find name by specified address of range
            </summary>
            <param name="address">an address used to locate the range</param>
            <returns>name to target range, and null if not found</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetNameByRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Find name for a named range by its location
            </summary>
            <param name="range">a range location used to search the name</param>
            <returns>name as string for the range, return null if no range was found</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.NamedRanges">
            <summary>
            Get collection of named range.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.NamedRangeDefined">
            <summary>
            Event raised when named range is defined
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.NamedRangeUndefined">
            <summary>
            Event raised when named range is undefined
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeStyles(System.String,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Set styles to each cells inside specified range
            </summary>
            <param name="addressOrName">address or name to locate the cell or range on spreadsheet</param>
            <param name="style">styles to be set</param>
            <exception cref="T:Spire.Spreadsheet.Forms.InvalidAddressException">throw if specified address or name is illegal</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeStyles(System.Int32,System.Int32,System.Int32,System.Int32,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Set styles to each cells inside specified range
            </summary>
            <param name="row">number of row of specified range</param>
            <param name="col">number of col of specified range</param>
            <param name="rows">number of rows inside specified range</param>
            <param name="cols">number of columns inside specified range</param>
            <param name="style">styles to be set</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetRangeStyles(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Set styles to each cells inside specified range
            </summary>
            <param name="range">specified range to the styles</param>
            <param name="style">styles to be set</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetCellStyleOwn(System.Int32,System.Int32,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Set style to cell specified by row and col index
            </summary>
            <param name="row">index to row</param>
            <param name="col">index to col</param>
            <param name="style">style will be copied</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetDefaultColumnStyle(System.Int32,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Sets column style.
            </summary>
            <param name="columnIndex"></param>
            <param name="defaultStyle"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetDefaultRowStyle(System.Int32,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Set row style.
            </summary>
            <param name="rowIndex"></param>
            <param name="defaultStyle"></param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.RangeStyleChanged">
            <summary>
            Event raised on style of range changed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveRangeStyles(System.String,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Remove specified styles from a range specified by address or name
            </summary>
            <param name="addressOrName">Address or name to locate range from spreadsheet</param>
            <param name="flags">Styles specified by this flags to be removed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RemoveRangeStyles(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Remove specified styles from a specified range
            </summary>
            <param name="range">Range to be remove styles</param>
            <param name="flags">Styles specified by this flags to be removed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetRangeStyles(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Get style of specified range.
            </summary>
            <param name="range">The range to get style.</param>
            <returns>Style info of specified range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellStyles(System.String)">
            <summary>
            Get style from cell by specified position.
            </summary>
            <param name="address">Address to locate a cell to get its style.</param>
            <returns>Style set of cell retrieved from specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellStyles(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Get style of single cell.
            </summary>
            <param name="pos">Position of cell to get.</param>
            <returns>Style of cell in the specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellStyles(System.Int32,System.Int32)">
            <summary>
            Get style of specified cell without creating its instance.
            </summary>
            <param name="row">Index of row of specified cell.</param>
            <param name="col">Index of column of specified cell.</param>
            <returns>Style of cell from specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellStyleItem(System.Int32,System.Int32,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Get single style item from specified cell
            </summary>
            <param name="row">Zero-based number of row</param>
            <param name="col">Zero-based number of column</param>
            <param name="flag">Specified style item to be get</param>
            <returns>Style item value</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UpdateCellTextBounds(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Update Cell Text Bounds for View/Edit mode
            </summary>
            <param name="cell"></param>
            <param name="updateRowHeight"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UpdateCellTextBounds(Spire.Spreadsheet.Forms.Rendering.IRenderer,Spire.Spreadsheet.Forms.SpreadCell,Spire.Spreadsheet.Forms.Rendering.SheetView,System.Single,Spire.Spreadsheet.Forms.Core.UpdateFontReason)">
            <summary>
            Update cell text bounds. 
            need to call this method when content of cell is changed, contains styles like align, font, etc.
            
            if cell's display property is null, this method does nothing.
            </summary>
            <param name="ig">The graphics device used to calculate bounds. Null to use default graphic device.</param>
            <param name="cell">The target cell will be updated.</param>
            <param name="drawMode">Draw mode</param>
            <param name="scaleFactor">Scale factor of current worksheet</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StepRangeFont(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.Worksheet.StepRangeFontHandler)">
            <summary>
            Make the text of cells in specified range larger or smaller.
            </summary>
            <param name="range">The spcified range.</param>
            <param name="stepHandler">Iterator callback to handle how to make text larger or smaller.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SuspendUIUpdates">
            <summary>
            Suspend worksheet UI updates.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ResumeUIUpdates">
            <summary>
            Resume worksheet UI updates.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.IsUIUpdatesSuspending">
            <summary>
            Check whether UI updates is suspending.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ViewportController">
            <summary>
            Get or set viewport controller for worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.RequestInvalidate">
            <summary>
            Request to repaint entire worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ViewMode">
            <summary>
            Get or set view mode of current worksheet (Reserved)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartEdit">
            <summary>
            Start to edit selected cell
            </summary>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartEdit(System.String)">
            <summary>
            Start to edit selected cell
            </summary>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartEdit(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Start to edit specified cell
            </summary>
            <param name="pos">Position of specified cell</param>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartEdit(Spire.Spreadsheet.Forms.CellAdressInfo,System.String)">
            <summary>
            Start to edit specified cell
            </summary>
            <param name="pos">Position of specified cell</param>
            <param name="newText">A text will be displayed in the edit field initially.</param>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartEdit(System.Int32,System.Int32)">
            <summary>
            Start to edit specified cell
            </summary>
            <param name="row">Index of row of specified cell</param>
            <param name="col">Index of column of specified cell</param>
            <returns>True if the editing operation has been started</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartEdit(System.Int32,System.Int32,System.String)">
            <summary>
            Start to edit specified cell.
            </summary>
            <param name="row">Index of row of specified cell.</param>
            <param name="col">Index of column of specified cell.</param>
            <param name="newText">A text displayed in the text field to be edited.</param>
            <returns>True if worksheet entered edit-mode successfully; Otherwise return false.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.IsEditing">
            <summary>
            Check whether any cell current in edit mode
            </summary>
            <returns>true if any cell is editing</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.EditingCell">
            <summary>
            Get instance of current editing cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.EndEdit(Spire.Spreadsheet.Forms.EndEditReason)">
            <summary>
            Force end current editing operation with the specified reason.
            </summary>
            <param name="reason">Ending Reason of editing operation</param>
            <returns>True if currently in editing mode, and operation has been
            finished successfully.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.EndEdit(System.Object)">
            <summary>
            Force end current editing operation.
            Uses specified data instead of the data of user edited.
            </summary>
            <param name="data">New data to be set to the edited cell</param>
            <returns>True if currently in editing mode, and operation has been
            finished successfully.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.EndEdit(System.Object,Spire.Spreadsheet.Forms.EndEditReason)">
            <summary>
            Force end current editing operation with the specified reason.
            Uses specified data instead of the data of user edited.
            </summary>
            <param name="data">New data to be set to the edited cell</param>
            <param name="reason">Ending Reason of editing operation</param>
            <returns>True if currently in editing mode, and operation has been
            finished successfully.</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeCellEdit">
            <summary>
            Event raised before cell changed to edit mode
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterCellEdit">
            <summary>
            Event raised after cell changed to edit mode
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellEditTextChanging">
            <summary>
            Event raised after input text changing
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellEditCharInputed">
            <summary>
            Event raised after any characters is input
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.CellEditText">
            <summary>
            Get or set the current text in edit textbox of cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Reset">
            <summary>
            Reset control to default status.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Reset(System.Int32,System.Int32)">
            <summary>
            Reset control and initialize to specified size
            </summary>
            <param name="rows">number of rows to be set after resting</param>
            <param name="cols">number of columns to be set after reseting</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetRangePhysicsBounds(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Get physics rectangle bounds from specified range position.
            Be careful that this is different from the rectangle bounds displayed on screen,
            the actual bound positions displayed on screen are transformed and scaled 
            in order to scroll, zoom and freeze into different viewports.
            </summary>
            <param name="range">The range position to get bounds</param>
            <returns>Rectangle bounds from specified range position</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCellPhysicsPosition(System.Int32,System.Int32)">
            <summary>
            Get physics position from specified cell position.
            Be careful that this is different from the rectangle bounds displayed on screen,
            the actual bound positions displayed on the screen are transformed and scaled 
            in order to scroll, zoom and freeze into different viewports.
            </summary>
            <param name="row">Zero-based index of row</param>
            <param name="col">Zero-based index of column</param>
            <returns>Point position of specified cell position in pixel.</returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.focusReturnColumn">
            <summary>
            The column focus pos goes when enter key pressed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FocusPos">
            <summary>
            Get or set current focused cell position.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.FocusPosChanged">
            <summary>
            Raise when focus cell is changed
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FocusPosStyle">
            <summary>
            Get or set focus position display style
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.FocusPosStyleChanged">
            <summary>
            Focus position style changed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.HoverPos">
            <summary>
            Cell when mouse moving and hover on
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.HoverPosChanged">
            <summary>
            Raise when hover cell is changed
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.SelectionRange">
            <summary>
            Current selection range of entire grid. If SelectionMode is None, the value of this property will be Empty.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.SelectionMode">
            <summary>
            Get or set selection mode for worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.SelectionStyle">
            <summary>
            Get or set the selection style for worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.SelectionForwardDirection">
            <summary>
            Get or set focus cell moving direction.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FixRangeSelection(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Select specified range.
            </summary>
            <param name="range">Specified range to be selected</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SelectRange(System.String)">
            <summary>
            Select speicifed range on spreadsheet
            </summary>
            <param name="address">address or name of specified range to be selected</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SelectRange(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Select speicifed range on spreadsheet
            </summary>
            <param name="pos1">Start position of specified range</param>
            <param name="pos2">End position of specified range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SelectRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Select specified range
            </summary>
            <param name="row">number of row</param>
            <param name="col">number of col</param>
            <param name="rows">number of rows to be selected</param>
            <param name="cols">number of columns to be selected</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SelectRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Select speicifed range on spreadsheet
            </summary>
            <param name="range">range to be selected</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SelectAll">
            <summary>
            Select entire sheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SelectColumns(System.Int32,System.Int32)">
            <summary>
            Select entire rows of columns form specified column
            </summary>
            <param name="col">number of column start to be selected</param>
            <param name="columns">numbers of column to be selected</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SelectRows(System.Int32,System.Int32)">
            <summary>
            Select entire column of rows from specified row
            </summary>
            <param name="row">number of row start to be selected</param>
            <param name="rows">numbers of row to be selected</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveFocusRight(System.Boolean)">
            <summary>
            Move focus position rightward.
            </summary>
            <param name="autoReturn">Determines whether or not move to next column if reached end row.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveFocusDown(System.Boolean)">
            <summary>
            Move focus position downward.
            </summary>
            <param name="autoReturn">Determines whether or not move to next row if reached end column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionForward">
            <summary>
            Move forward selection
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionBackward">
            <summary>
            Move backward selection
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionUp(System.Boolean)">
            <summary>
            Upward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionDown(System.Boolean)">
            <summary>
            Downward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionLeft(System.Boolean)">
            <summary>
            Leftward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionRight(System.Boolean)">
            <summary>
            Rightward to move focus selection
            </summary>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionHome(Spire.Spreadsheet.Forms.RowOrColumn,System.Boolean)">
            <summary>
            Move selection to first cell of row or column which is specified by <code>rowOrColumn</code>
            </summary>
            <param name="rowOrColumn">specifies that move selection to first cell of row or column</param>
            <param name="appendSelect">Decide whether or not perform an appending select (same as Shift key press down)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionEnd(Spire.Spreadsheet.Forms.RowOrColumn,System.Boolean)">
            <summary>
            Move selection to last cell of row or column which is specified by <code>rowOrColumn</code>
            </summary>
            <param name="rowOrColumn">specifies that move selection to the cell of row or column</param>
            <param name="appendSelect">Determines that whether or not to expand the current selection.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionPageDown(System.Boolean)">
            <summary>
            Move selection to cell in next page vertically.
            </summary>
            <param name="appendSelect">When this value is true, the selection will be expanded to the cell in next page rather than moving it.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.MoveSelectionPageUp(System.Boolean)">
            <summary>
            Move selection to cell in previous page vertically.
            </summary>
            <param name="appendSelect">When this value is true, the selection will be expanded to the cell in previous page rather than moving it.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeSelectionRangeChange">
            <summary>
            Event raised before selection range changing
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SelectionRangeChanged">
            <summary>
            Event raised on focus-selection-range changed
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SelectionRangeChanging">
            <summary>
            Event raised on focus-selection-range is changing by mouse move
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SelectionModeChanged">
            <summary>
            Event raised on Selection-Mode change
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SelectionStyleChanged">
            <summary>
            Event raised on Selection-Style change
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SelectionForwardDirectionChanged">
            <summary>
            Event raised on SelectionForwardDirection change
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SelectionMovedForward">
            <summary>
            Event raised when focus-selection move to next position
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SelectionMovedBackward">
            <summary>
            Event raised when focus-selection move to previous position
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Clone(System.String)">
            <summary>
            Clone this worksheet, create a new instance.
            </summary>
            <returns>New instance cloned from current worksheet.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Spreadsheet">
            <summary>
            Gets Spreadsheet object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ConditionalFormattings">
            <summary>
            ConditionalFormattings of worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.WorksheetCustomProperties">
            <summary>
            Gets the CustomProperties. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetFirstVisibleColumn(System.Int32)">
            <summary>
            Set the first visible column index of sheet view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CaculateSelectedValue">
            <summary>
            Calculates the sum of selected ranges of the worksheet.
            </summary>
            <returns>the sum or null.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CalculateAllValue">
            <summary>
            Caculate all value of whole sheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Protect">
            <summary>
            Protect the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Unprotect">
            <summary>
            Unprotect the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearCell(System.Int32,System.Int32)">
            <summary>
            Clear cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearCell(Spire.Spreadsheet.Forms.ISpreadCell)">
            <summary>
            Clear cell.
            </summary>
            <param name="cell">GridCell object.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearCell(System.String)">
            <summary>
            Clear cell.
            </summary>
            <param name="cellRange">Cell range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertDataColumn(System.Data.DataColumn,System.Int32,System.Int32)">
            <summary>
            Insert data column to worksheet.
            </summary>
            <param name="dataColumn"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertDataTable(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Insert datatable to workhseet.
            </summary>
            <param name="dataTable"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertDataView(System.Data.DataView,System.Int32,System.Int32)">
            <summary>
            Insert dataview to workhseet.
            </summary>
            <param name="dataView"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDateTime"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.DateTime[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDateTime"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.Double[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDouble"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.Double[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDouble"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrInt"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.Int32[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrInt"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.Object[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrObject"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.Object[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrObject"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.String[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrString"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.InsertArray(System.String[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrString"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ImportDataView(System.Data.DataView,System.Int32,System.Int32)">
            <summary>
            Import data from data view to worksheet.
            </summary>
            <param name="dataView">Dataset</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ImportDataSet(System.Data.DataSet,System.String,System.Int32,System.Int32)">
            <summary>
            Imports data from a dataset to worksheet.
            </summary>
            <param name="dataSet">Dataset</param>
            <param name="dataMember">DataMember</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Imports data from a DataTable into worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Exports worksheet data into a DataTable
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Exports worksheet data into a DataTable
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clear cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <param name="endRow">End row index.</param>
            <param name="endCol">End column index.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ActiveCellAdressInfo">
            <summary>
            Gets the active cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Cells">
            <summary>
            Gets the collection of cells that belong to this worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets cell range.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="lastRow"></param>
            <param name="lastColumn"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Item(System.String,System.String)">
            <summary>
            Gets cell range.
            </summary>
            <param name="startName"></param>
            <param name="endName"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.IsProtected">
            <summary>
            Indicates whether worksheet object is protected.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.GridLinesVisible">
            <summary>
            Indicates whether the gridlines is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.SheetName">
            <summary>
            Get or set the name of worksheet
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.NameChanged">
            <summary>
            Event raised when name of worksheet is changed
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FrozenRows">
            <summary>
            Gets or sets Worksheet's frozen row count.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FrozenColumns">
            <summary>
            Gets or sets Worksheet's frozen column count.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FirstVisibleColumn">
            <summary>
            Gets or sets the first visible column of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FirstVisibleRow">
            <summary>
            Get or sets the first visible row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.IsVisible">
            <summary>
            Represents if the worksheet is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Item(System.Int32,System.Int32)">
            <summary>
            Get spread cell at specific row and colum.
            </summary>
            <param name="row">row.</param>
            <param name="column">column.</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Item(System.String)">
            <summary>
            Gets spread cell by cell name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetActiveCell">
            <summary>
            Gets the active cell.
            </summary>
            <returns>Cell object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.HasActiveCell">
            <summary>
            Determines whether the cell is actived.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetActiveCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Sets the active cell at the specified location.
            </summary>
            <param name="cellAdressInfo">Cell location.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetActiveCell(System.Int32,System.Int32)">
            <summary>
            Sets the active cell at the specified column and row.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.MergeRangesCount">
            <summary>
            Gets the count of the merges 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetSelectedRange">
            <summary>
            Gets the selected cell range.
            </summary>
            <returns>CellRange object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetAllSelectedRanges">
            <summary>
            Gets all selected ranges of this worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.AddSelectedRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Add a new selected range to the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CheckInSelection(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Determines whether the specified cell location is in selected.
            </summary>
            <param name="cellAdressInfo">Cell location.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CheckInSelectionsByColumn(System.Int32)">
            <summary>
            Check whether the specified column at index is in selected.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CheckInSelectionByRow(System.Int32)">
            <summary>
            Check whether the specified row at index is in selected.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ClearSelection">
            <summary>
            Clear the selection in Worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FromRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets CellRangeInfo from a range of worksheet.
            </summary>
            <param name="startRow">Start Row index.</param>
            <param name="startColumn">Start Column index.</param>
            <param name="endRow">End Row index.</param>
            <param name="endColumn">End Column index.</param>
            <returns>A CellRange object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FromRange(System.String,System.String)">
            <summary>
            Gets CellRangeInfo from a range of worksheet.
            </summary>
            <param name="startCellRange">Start cell range.</param>
            <param name="endCellRange">End cell range.</param>
            <returns>A CellRange object.</returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.DEFAULT_ROWSCOUNT">
            <summary>
            Default rows count of worksheet.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.DEFAULT_COLUMNSCOUNT">
            <summary>
            Default columns count of worksheet.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.InitDefaultColumnWidth">
            <summary>
            Default width of column
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.InitDefaultRowHeight">
            <summary>
            Default height of row
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.OutlineButtonSize">
            <summary>
            Default button size of outlinetextColor buttons
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Worksheet.DefaultStyle">
            <summary>
            Default root style of entire range of grid control
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.Workbook">
            <summary>
            Instance of workbook of this worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.TabColor">
            <summary>
            Get or set the background color for worksheet name that is displayed on sheet tab control
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.OnNameBackColorChanged">
            <summary>
            Method invoked when background color of worksheet name is changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.#ctor(Spire.Spreadsheet.Forms.Workbook,System.String)">
            <summary>
            Create a worksheet instance
            </summary>
            <param name="workbook">Workbook instance</param>
            <param name="name">Name for this worksheet</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.#ctor(Spire.Spreadsheet.Forms.Workbook,System.String,System.Int32,System.Int32,Spire.Xls.Core.Converter.Spreadsheet.Worksheet)">
            <summary>
            </summary>
            <param name="workbook">Workbook instance</param>
            <param name="name">Name for this worksheet</param>
            <param name="rows">Initial number of rows</param>
            <param name="cols">Initial number of columns</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FreezeArea">
            <summary>
            Get current frozen areas. Use method <code>FreezeToCells</code> to change this property.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FreezePos">
            <summary>
            Get current frozen position.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeRange(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.FreezeArea)">
            <summary>
            Freezes worksheet at specified cell position and specifies the freeze areas.
            </summary>
            <param name="pos">Cell position to freeze worksheet.</param>
            <param name="area">Specifies the frozen panes.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeRange(System.Int32,System.Int32)">
            <summary>
            Freezes worksheet at specified cell position.
            </summary>
            <param name="row">Zero-based number of row to freeze worksheet.</param>
            <param name="col">Zero-based number of column to freeze worksheet.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeRow(System.Int32)">
            <summary>
            Freeze grid at specified row. 
            </summary>
            <param name="row">row index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UnfreezeRow">
            <summary>
            UnFreeze grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeColumn(System.Int32)">
            <summary>
             Freeze grid at specified column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UnfreezeColumn">
            <summary>
            UnFreeze grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.UnfreezeRange">
            <summary>
            Unfreeze current worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeToCell(System.Int32,System.Int32,Spire.Spreadsheet.Forms.FreezeArea,System.Boolean,System.Boolean)">
            <summary>
            Freezes worksheet at specified cell position and specifies the freeze areas.
            </summary>
            <param name="row">Zero-based number of row to freeze worksheet.</param>
            <param name="col">Zero-based number of column to freeze worksheet.</param>
            <param name="area">Specifies the frozen panes.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeToCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Freezes worksheet at specified cell position.
            </summary>
            <param name="pos">Position to freeze worksheet.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeToCell(System.String)">
            <summary>
            Freezes worksheet at specified address position.
            </summary>
            <param name="address">Cell position described in address string to freeze worksheet.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.FreezeToCell(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.FreezeArea)">
            <summary>
            Freezes worksheet at specified cell position and specifies the freeze areas.
            </summary>
            <param name="pos">Cell position to freeze worksheet.</param>
            <param name="area">Specifies the frozen panes.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CanFreeze">
            <summary>
            Check whether or not current worksheet can be frozen.
            </summary>
            <returns>True if current worksheet can be frozen; Otherwise return false.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.IsFrozen">
            <summary>
            Return whether or not current worksheet has frozen rows or columns.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellsFrozen">
            <summary>
            Event raised when worksheet is frozen.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellsUnfrozen">
            <summary>
            Event raised when worksheet is unfreezed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.ScaleFactor">
            <summary>
            Get or set worksheet scale factor.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.Scaled">
            <summary>
            Event raised when worksheet is scaled.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetScale(System.Single)">
            <summary>
            Set scale factor to zoom in/out current worksheet.
            </summary>
            <param name="factor">Scale factor to be applied.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ZoomIn">
            <summary>
            Zoom in current worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ZoomOut">
            <summary>
            Zoom out current worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.ZoomReset">
            <summary>
            Set scale factor to 1.0. (Reset worksheet to original scale)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.CellCollection">
            <summary>
            Get the collection of cells that belong to this worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CreateAndGetCell(System.String)">
            <summary>
            Get cell from specified address. 
            If cell instance does not exist, create and return a new cell instance.
            </summary>
            <remarks>Use <code>GetCell</code> to get cell without creating new instance.</remarks>
            <param name="address">Address to create and get cell instance.</param>
            <returns>Cell instance at specified address.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CreateAndGetCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Get cell from specified cell position.
            If cell instance does not exist, create and return a new cell instance.
            </summary>
            <remarks>Use <code>GetCell</code> to get cell without creating new instance.</remarks>
            <param name="pos">Position to create and get cell instance</param>
            <returns>Cell instance at specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CreateAndGetCell(System.Int32,System.Int32)">
            <summary>
            Get cell from specified cell position.
            If cell instance does not exist, create and return a new cell instance.
            </summary>
            <remarks>Use <code>GetCell</code> to get cell without creating new instance.</remarks>
            <param name="row">Zero-based number of row to create and return cell instance.</param>
            <param name="col">Zero-based number of column to create and return cell instance.</param>
            <returns>Cell instance at specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.CreateCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Create cell instance at specified position.
            </summary>
            <param name="row">Zero-based number of row to create and return cell instance.</param>
            <param name="col">Zero-based number ofcolumn to create and return cell instance.</param>
            <param name="updateStyle">Determines whether or not to initial the cell's style</param>
            <returns>Created cell instance at specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCell(System.String)">
            <summary>
            Retrieve cell instance from specified address or defined name.
            </summary>
            <param name="addressOrName">Address or name to find the cell instance.</param>
            <returns>Instance of cell retrieved from specified address or defined name, 
            return null if cell instance does not exist.</returns>
            <remarks>Use <code>CreateAndGetCell</code> to create and get cell instance.</remarks>
            <exception cref="T:Spire.Spreadsheet.Forms.InvalidAddressException">Throws if specified address or name is invalid.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Retrieve cell from specified position.
            </summary>
            <param name="pos">Position to locate cell.</param>
            <returns>Null if cell instance not found at specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetCell(System.Int32,System.Int32)">
            <summary>
            Retrieve cell at specified number of row and number of column.
            </summary>
            <param name="row">Zero-based number of row.</param>
            <param name="col">Zero-based number of column.</param>
            <returns>Null if cell instance not found at specified position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetMergedCellOfRange(System.String)">
            <summary>
            Return the merged first cell inside range.
            </summary>
            <param name="address">Position in range.</param>
            <returns>First left-top cell of the range which cell belongs to.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetMergedCellOfRange(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Return the merged first cell inside range.
            </summary>
            <param name="pos">Position in range.</param>
            <returns>First left-top cell of the range which cell belongs to.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetMergedCellOfRange(System.Int32,System.Int32)">
            <summary>
            Return the first cell inside merged range.
            </summary>
            <param name="row">Row of position in range.</param>
            <param name="col">Column of position in range.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetMergedCellOfRange(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Return the first cell inside merged range.
            </summary>
            <param name="cell">Cell instance in range.</param>
            <returns>Cell instance of merged range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.GetRangeIfMergedCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Return the range if the cell specified by position is a merged cell
            </summary>
            <param name="pos">Cell of this position to be checked</param>
            <returns>Range of merged cell returned from this method</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsMergedCell(System.String)">
            <summary>
            Check whether the cell specified by an address is merged cell
            </summary>
            <param name="address">address to be checked</param>
            <returns>true if the cell is merged cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsMergedCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Check whether the cell at specified position is a merged cell
            </summary>
            <param name="pos">position to be checked</param>
            <returns>true if the cell is merged cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsMergedCell(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether specified range does just contains one merged cell
            </summary>
            <param name="range">specified range to be checked</param>
            <returns>true if range contains only one merged cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsMergedCell(System.Int32,System.Int32)">
            <summary>
            Check whether a cell is merged cell
            </summary>
            <param name="row">number of row to be checked</param>
            <param name="col">number of column to be checked</param>
            <returns>true if the cell is merged cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsValidCell(System.String)">
            <summary>
            Check whether the specified cell is valid (Not merged by others cell)
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsValidCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Check whether the specified cell is valid (Not merged by others cell)
            </summary>
            <param name="pos">Position to be checked</param>
            <returns>true if specified position is a valid cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Check whether the specified cell is valid. (Not merged by others cell)
            </summary>
            <param name="row">Position of row to be checked.</param>
            <param name="col">Position of column to be checked.</param>
            <returns>true if specified position is valid cell.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsCellVisible(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Check whether or not the specified cell is visible.
            </summary>
            <param name="pos">Position to locate the cell on worksheet.</param>
            <returns>True if the cell is visible; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IsCellVisible(System.Int32,System.Int32)">
            <summary>
            Check whether or not the specified cell is visible.
            </summary>
            <param name="row">Zero-based number of row used to locate the cell.</param>
            <param name="col">Zero-based number of column used to locate the cell.</param>
            <returns>True if the cell is visible; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IterateCells(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.Worksheet.IterateHandler)">
            <summary>
            Iterate over all valid cells inside specified range. Invalid cells (merged by others cell) will be skipped.
            </summary>
            <param name="range">Specified range to iterate cells</param>
            <param name="iterator">callback iterator to check through all cells</param>
            <remarks>Anytime return <code>false</code> to abort iteration.</remarks>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IterateCells(Spire.Spreadsheet.Forms.CellRangeInfo,System.Boolean,Spire.Spreadsheet.Forms.Worksheet.IterateHandler)">
            <summary>
            Iterate over all valid cells inside specified range. Invalid cells (merged by others cell) will be skipped.
            </summary>
            <param name="range">Specified range to iterate cells</param>
            <param name="skipEmptyCells">Determines whether or not to skip empty cells. (Default is true)</param>
            <param name="iterator">callback iterator to check through all cells</param>
            <remarks>anytime return <code>false</code> to abort iteration.</remarks>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.IterateCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Spire.Spreadsheet.Forms.Worksheet.IterateHandler)">
            <summary>
            Iterate over all valid cells inside specified range. Invalid cells (merged by others cell) will be skipped.
            </summary>
            <param name="row">Number of row of the range to be iterated.</param>
            <param name="col">Number of column of the range to be iterated.</param>
            <param name="rows">Number of rows of the range to be iterated.</param>
            <param name="cols">Number of columns of the range to be iterated.</param>
            <param name="skipEmptyCells">Determines whether or not to skip empty cells.</param>
            <param name="iterator">Callback iterator to check over all cells in specified range.</param>
            <remarks>Anytime return false in iterator to abort iteration.</remarks>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.MaxDataRow">
            <summary>
            Get maximum content number of row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.MaxDataCol">
            <summary>
            Get maximum content number of column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.IgnoreMouseDoubleClick">
            <summary>
            When a cell body has procesed any mousedown event,
            this flag is used to notify the Control to ignore the double click event
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellMouseEnter">
            <summary>
            Event raised when mouse pointer moved into any cells
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellMouseLeave">
            <summary>
            Event rasied when mouse pointer moved out from any cells
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellMouseMove">
            <summary>
            Event raised when mouse moving over all cells
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellMouseDown">
            <summary>
            Event raised after mouse button pressed down on spreadsheet
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellMouseUp">
            <summary>
            Event raised after mouse button released up on spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.FocusVisual">
            <summary>
            Get current focused visual object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.DropKeyUpAfterEndEdit">
            <summary>
            Sometimes when in editing mode, the Escape key used to cancel editing,
            The keyUp event of Escape to cancel editing should be ignored to pass to cell body.
            When this flag is true, the KeyUp event notify to the cell body will be ignored once.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.BeforeCellKeyDown">
            <summary>
            Event raised before key pressed down on spreadsheet
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.AfterCellKeyDown">
            <summary>
            Event raised after key pressed down on spreadsheet
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.CellKeyUp">
            <summary>
            Event raised after key released up on spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.StartPickRangeAndCopyStyle">
            <summary>
            Start to pick a range and copy the style from selected range.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.Resetted">
            <summary>
            Event raised when control resetted
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.SetSettings(Spire.Spreadsheet.Forms.WorksheetSettings,System.Boolean)">
            <summary>
            Set control settings
            </summary>
            <param name="settings">Setting flags to be set</param>
            <param name="value">value of setting to be set</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.HasSettings(Spire.Spreadsheet.Forms.WorksheetSettings)">
            <summary>
            Determine whether specified settings have been set.
            </summary>
            <param name="setting">Setting flags to be checked.</param>
            <returns>True if all settings has setted.</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Worksheet.SettingsChanged">
            <summary>
            Event raisd when worksheet settings is changed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Worksheet.IndentSize">
            <summary>
            Get or set cell's text indent size.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Worksheet.Dispose">
            <summary>
            Dispose worksheet, release all attached resources.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OleControl">
            <summary>
            Represents a cell control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.OleControl.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.UIControls.ColoredListBox">
            <summary>
            A list box which can have colored list items, extended from a standard .NET list box.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.UIControls.IColoredListBoxItem">
            <summary>
            Interface that represents colored list box items.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.IColoredListBoxItem.TextColor">
            <summary>
            Get the text color for this list item.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.IColoredListBoxItem.BackColor">
            <summary>
            Get the background color for this list item.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.UIControls.FlatTabControl">
            <summary>
            Represent a simple flat style tab control
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.#ctor">
            <summary>
            Construct the control
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.Tabs">
            <summary>
            Get or set the array of tab items
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.Position">
            <summary>
            Specifies the position of tab control
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.BorderStyle">
            <summary>
            Specifies the border style of every tabs
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.Shadow">
            <summary>
            Show shadows beside of every tabs
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.SelectedBackColor">
            <summary>
            Get or set the background color for selected tab
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.SelectedTextColor">
            <summary>
            Get or set the text color for selected tab
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaint method
            </summary>
            <param name="e">paint event argument</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override system mouse down event
            </summary>
            <param name="e">mouse down event argument</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.UIControls.FlatTabControl.SelectedIndexChanged">
            <summary>
            Event raised when selected tab is changed
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.UIControls.TabBorderStyle">
            <summary>
            Tab item border style
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.UIControls.TabBorderStyle.RectShadow">
            <summary>
            Sharp Rectangle
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.UIControls.TabBorderStyle.SplitRouned">
            <summary>
            Separated Rounded Rectangle
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.UIControls.TabBorderStyle.NoBorder">
            <summary>
            No Borders (Windows 8 Style)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.UIControls.TabControlPosition">
            <summary>
            Position of tab control will be located
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.UIControls.TabControlPosition.Top">
            <summary>
            Put at top to other controls
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.UIControls.TabControlPosition.Bottom">
            <summary>
            Put at bottom to other controls
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.UIControls.FormLine">
            <summary>
            Line with text label control
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.FormLine.#ctor">
            <summary>
            Create control
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FormLine.Show3DLine">
            <summary>
            Indicates whether or not to show line in 3D style.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FormLine.LineColor">
            <summary>
            Get or set line color
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FormLine.Text">
            <summary>
            Get or set label text
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.FormLine.TextPadding">
            <summary>
            Get or set text padding.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.FormLine.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Repaint control.
            </summary>
            <param name="e">Paint event argument.</param>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.UIControls.HeaderPropertyDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.HeaderPropertyDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.HeaderPropertyDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.UIControls.SetWidthOrHeightDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.SetWidthOrHeightDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.SetWidthOrHeightDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.TextRotateControl.#ctor">
            <summary>
            Construct this control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.TextRotateControl.Angle">
            <summary>
            Get or set the angle value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.TextRotateControl.SampleText">
            <summary>
            Get or set the sample text.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.UIControls.TextRotateControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Repaint control.
            </summary>
            <param name="e">Event argument.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.UIControls.TextRotateControl.ShowBorder">
            <summary>
            Get or set the border of control
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Common.ActionManager.UndoStack">
            <summary>
            Get collection of undo action list
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Common.ActionManager.RedoStack">
            <summary>
            Get collection of redo action list
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionManager.Do(Spire.Spreadsheet.Forms.Common.IAction,System.Boolean,System.Boolean)">
            <summary>
            Do specified action.
            </summary>
            <param name="action">Action to be performed</param>
            <param name="perform">True to perform immediately, false to add into stack only</param>
            <param name="isCanUndo">Specifies that whether the action can be undone, 
            sometimes an action might not necessary to be undone even it implements the 
            IUndoable interface.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionManager.Reset">
            <summary>
            Clear current action stack.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.ActionEventArgs">
            <summary>
            Action event argument.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Common.ActionEventArgs.Action">
            <summary>
            The action is currently performing.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Common.ActionEventArgs.Behavior">
            <summary>
            The behavior of current action performing. (one of do/undo/redo)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Common.ActionEventArgs.Cancel">
            <summary>
            Get or set the Cancel flag to decide whether or not to cancel this operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionEventArgs.#ctor(Spire.Spreadsheet.Forms.Common.IAction,Spire.Spreadsheet.Forms.Common.ActionBehavior)">
            <summary>
            Construct an argument with specified action and behavior flag.
            </summary>
            <param name="action">action is currently performing.</param>
            <param name="behavior">behavior flag of current operation.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.ActionBehavior">
            <summary>
            Behavior flag for argument of ActionPerformmed event.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.ActionBehavior.Do">
            <summary>
            Do action (action is firstly done)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.ActionBehavior.Redo">
            <summary>
            Redo action (action is redone by ActionManager)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.ActionBehavior.Undo">
            <summary>
            Undo action (action is undone by ActionManager)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.IAction">
            <summary>
            Represents action interface.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.IAction.Do">
            <summary>
            Do this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.IAction.GetName">
            <summary>
            Get the friendly name of this action.
            </summary>
            <returns>Get friendly name of action.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.IUndoableAction">
            <summary>
            Undoable action interface.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.IUndoableAction.Undo">
            <summary>
            Undo this action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.IUndoableAction.Redo">
            <summary>
            Redo this action.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.ActionGroup">
            <summary>
            Action group is used to perform several actions together during one time operation,
            For example there is two actions:
            <ol>
            <li>expend spreadsheet action</li>
            <li>copy data action</li>
            </ol>
            Sometimes it is necessary to perform these two actions together, they are should undo 
            together, in this case, create an ActionGroup and add them into the group, then invoke
            the 'DoAction' method of 'ActionManager' by passing this action group object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Common.ActionGroup.Actions">
            <summary>
            Action list stored in this group.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionGroup.#ctor(System.String,System.Collections.Generic.List{Spire.Spreadsheet.Forms.Common.IAction})">
            <summary>
            Construct action group by specified name, and the collection of action to perform together.
            </summary>
            <param name="name">Friendly name of this group.</param>
            <param name="actions">Collection of action to be performed.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionGroup.#ctor(System.String)">
            <summary>
            Construct action group by specified name, and the collection of action to perform together.
            </summary>
            <param name="name">Friendly name of this group.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionGroup.Do">
            <summary>
            Do this action group. (Do all actions that are contained in this group)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionGroup.Undo">
            <summary>
            Undo this action group. (Undo all actions that are contained in this group)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionGroup.Redo">
            <summary>
            Redo this action group. (Redo all actions that are contained in this group)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionGroup.GetName">
            <summary>
            Get the friendly name of this action group.
            </summary>
            <returns>Friendly name of this action.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionGroup.ToString">
            <summary>
            Convert this action group object into string for displaying.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.ActionException">
            <summary>
            Represents action exception. This exception will be thrown when errors happened during do/undo/redo an action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionException.#ctor(System.String)">
            <summary>
            Construct an action exception with specified message.
            </summary>
            <param name="msg">Message to describe this exception.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ActionException.#ctor(Spire.Spreadsheet.Forms.Common.IAction,System.String)">
            <summary>
            Construct an action exception with specified action and message.
            </summary>
            <param name="action">Action which causes this exception when do/undo/redo.</param>
            <param name="msg">Message to describe this exception.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.LogLevel">
            <summary>
            Log level
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.LogLevel.All">
            <summary>
            All logs
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.LogLevel.Trace">
            <summary>
            Trace log
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.LogLevel.Debug">
            <summary>
            Debug log
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.LogLevel.Info">
            <summary>
            Info log
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.LogLevel.Warn">
            <summary>
            Warning log
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.LogLevel.Error">
            <summary>
            Error log
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.LogLevel.Fatal">
            <summary>
            Fatal error log
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.ILogWritter">
            <summary>
            Log writter
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.ILogWritter.Log(System.String,System.String)">
            <summary>
            Output log message
            </summary>
            <param name="cat">category name</param>
            <param name="msg">message to be output</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.Logger">
            <summary>
            Common logger component
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Logger.RegisterWritter(Spire.Spreadsheet.Forms.Common.ILogWritter)">
            <summary>
            Add an output target
            </summary>
            <param name="writter">writer to be registered</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Logger.Off">
            <summary>
            Turn off log output
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Logger.On">
            <summary>
            Turn on log output
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Logger.Log(System.String,System.String,System.Object[])">
            <summary>
            Output message to log writters
            </summary>
            <param name="cat">category name</param>
            <param name="format">format of log message</param>
            <param name="args">arguments for format</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Logger.Log(System.String,System.String)">
            <summary>
            Output message to log writters
            </summary>
            <param name="cat">category name</param>
            <param name="msg">log message to be output</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Logger.WriteLog(System.String,System.String)">
            <summary>
            Output message to log writters
            </summary>
            <param name="cat">category name</param>
            <param name="msg">log message to be output</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.TextFormatHelper.EncodeBool(System.Boolean,System.Boolean)">
            <summary>
            Encode a boolean value into string and compare to the default value, 
            if the value is the same as default value then return null (noting output to xml).
            </summary>
            <param name="p">boolean value to be encoded</param>
            <param name="def">default boolean value used to compare whether the value is same as default</param>
            <returns>encoded string of boolean value</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.Toolkit">
            <summary>
            Common Toolkit
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Toolkit.IsKeyDown(Spire.Spreadsheet.Forms.Common.Win32.VKey)">
            <summary>
            Check whether or not the specified key is pressed.
            </summary>
            <param name="vkey">Windows virtual key.</param>
            <returns>true if pressed, otherwise false if not pressed.</returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Toolkit.FontSizeList">
            <summary>
            Default font size list.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.Win32.WMessages">
            <summary>
            Virtual Messages
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Win32.GetParent(System.IntPtr)">
            <summary>
            Retrieves a handle to the specified window's parent or owner.
            To retrieve a handle to a specified ancestor, use the GetAncestor function.
            </summary>
            <param name="hwnd">A handle to the window whose parent window handle is to be retrieved.</param>
            <returns>If the window is a child window, the return value is a handle to the parent window. 
            If the window is a top-level window with the WS_POPUP style, the return value is a handle to the owner window.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            This function typically fails for one of the following reasons:
            <ul><li>The window is a top-level window that is unowned or does not have the WS_POPUP style.</li>
            <li>The owner window has WS_POPUP style.</li></ul></returns>
            <seealso cref="M:Spire.Spreadsheet.Forms.Common.Win32.GetAncestor(System.IntPtr,System.UInt32)"/>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Win32.GetAncestor(System.IntPtr,System.UInt32)">
            <summary>
            Retrieves the handle to the ancestor of the specified window.
            </summary>
            <param name="hwnd">A handle to the window whose ancestor is to be retrieved. 
            If this parameter is the desktop window, the function returns NULL.</param>
            <param name="gaFlags">The ancestor to be retrieved. This parameter can be one of the GAFlag enum.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Win32.GetWindow(System.IntPtr,System.UInt32)">
            <summary>
            Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.
            </summary>
            <param name="hwnd">A handle to a window.
            The window handle retrieved is relative to this window, based on the value of the uCmd parameter.</param>
            <param name="wCMD">The relationship between the specified window and the window whose handle is to be retrieved.
            This parameter can be one of the following values.</param>
            <returns></returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the z-order.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window.
            This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position.
            This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position.
            This value is similar to SW_SHOWNORMAL, except the window is not activated.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.ShowWindowCmd.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, 
            the system restores it to its original size and position. 
            An application should specify this flag when displaying the window for the first time.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Win32.GetWindowPlacement(System.IntPtr,Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpwndpl">A pointer to the WINDOWPLACEMENT structure that receives the show state and position information. 
            Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT).
            GetWindowPlacement fails if lpwndpl-> length is not set correctly.</param>
            <returns>If the function succeeds, the return value is true.
            If the function fails, the return value is false. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement">
            <summary>
            Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement.length">
            <summary>
            The length of the structure, in bytes. Before calling the GetWindowPlacement or SetWindowPlacement functions, set this member to sizeof(WINDOWPLACEMENT).
            GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement.flags">
            <summary>
            The flags that control the position of the minimized window and the method by which the window is restored. This member can be one or more of the following values.
            Value	Meaning 
            WPF_ASYNCWINDOWPLACEMENT	0x0004	If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.
            WPF_RESTORETOMAXIMIZED		0x0002	The restored window will be maximized, regardless of whether it was maximized before it was minimized. This setting is only valid the next time the window is restored. It does not change the default restoration behavior.
            																	This flag is only valid when the SW_SHOWMINIMIZED value is specified for the showCmd member.
            WPF_SETMINPOSITION				0x0001	The coordinates of the minimized window may be specified.
            																	This flag must be specified if the coordinates are set in the ptMinPosition member.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement.showCmd">
            <summary>
            The current show state of the window. This member can be one of the following values.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement.ptMinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement.ptMaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.WindowPlacement.rcNormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Win32.GetWindowRgn(System.IntPtr,System.Drawing.Region@)">
            <summary>
            The GetWindowRgn function obtains a copy of the window region of a window.
            The window region of a window is set by calling the SetWindowRgn function. 
            The window region determines the area within the window where the system
            permits drawing. The system does not display any portion of a window that
            lies outside of the window region
            </summary>
            <param name="hWnd">Handle to the window whose window region is to be obtained.</param>
            <param name="hRgn">Handle to the region which will be modified to represent the window region.</param>
            <returns>The return value specifies the type of the region that the function obtains. It can be one of the following values.
            NULLREGION - The region is empty.
            SIMPLEREGION - The region is a single rectangle.
            COMPLEXREGION - The region is more than one rectangle.
            ERROR - The specified window does not have a region, 
            				or an error occurred while attempting to return the region.</returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.GAFlag.GA_PARENT">
            <summary>
            Retrieves the parent window. This does not include the owner, as it does with the GetParent function.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.GAFlag.GA_ROOT">
            <summary>
            Retrieves the root window by walking the chain of parent windows.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.GAFlag.GA_ROOTOWNER">
            <summary>
            Retrieves the owned root window by walking the chain of parent and owner windows returned by GetParent.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Win32.DwmGetWindowAttribute(System.IntPtr,System.Int32,System.Drawing.Rectangle@,System.Int32)">
            <summary>
            Retrieves the current value of a specified attribute applied to a window.
            </summary>
            <param name="hwnd"></param>
            <param name="dwAttribute"></param>
            <param name="pvAttribute"></param>
            <param name="cbAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute">
            <summary>
            Flags used by the DwmGetWindowAttribute and DwmSetWindowAttribute
            functions to specify window attributes for non-client rendering.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_NCRENDERING_ENABLED">
            <summary>
            Use with DwmGetWindowAttribute. Discovers whether non-client rendering is enabled. 
            The retrieved value is of type BOOL. TRUE if non-client rendering is enabled; 
            otherwise, FALSE.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_NCRENDERING_POLICY">
            <summary>
            Use with DwmSetWindowAttribute. Sets the non-client rendering policy. 
            The pvAttribute parameter points to a value from the DWMNCRENDERINGPOLICY enumeration.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_TRANSITIONS_FORCEDISABLED">
            <summary>
            Use with DwmSetWindowAttribute. Enables or forcibly disables DWM transitions. 
            The pvAttribute parameter points to a value of TRUE to disable transitions or FALSE to enable transitions.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_ALLOW_NCPAINT">
            <summary>
            Use with DwmSetWindowAttribute. Enables content rendered in the non-client area to be visible on the frame drawn by DWM. 
            The pvAttribute parameter points to a value of TRUE to enable content rendered in the non-client area to be visible on the frame; otherwise, it points to FALSE.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_CAPTION_BUTTON_BOUNDS">
            <summary>
            Use with DwmGetWindowAttribute. Retrieves the bounds of the caption button area in the window-relative space. 
            The retrieved value is of type RECT.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_NONCLIENT_RTL_LAYOUT">
            <summary>
            Use with DwmSetWindowAttribute. Specifies whether non-client content is right-to-left (RTL) mirrored. 
            The pvAttribute parameter points to a value of TRUE if the non-client content is right-to-left (RTL) mirrored; otherwise, it points to FALSE.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_FORCE_ICONIC_REPRESENTATION">
            <summary>
            Use with DwmSetWindowAttribute. Forces the window to display an iconic thumbnail or 
            peek representation (a static bitmap), even if a live or snapshot representation of the window is available. 
            This value normally is set during a window's creation and not changed throughout the window's lifetime. 
            Some scenarios, however, might require the value to change over time. 
            The pvAttribute parameter points to a value of TRUE to require a iconic thumbnail or peek representation; 
            otherwise, it points to FALSE.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_FLIP3D_POLICY">
            <summary>
            Use with DwmSetWindowAttribute. Sets how Flip3D treats the window. 
            The pvAttribute parameter points to a value from the DWMFLIP3DWINDOWPOLICY enumeration.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_EXTENDED_FRAME_BOUNDS">
            <summary>
            Use with DwmGetWindowAttribute. Retrieves the extended frame bounds rectangle in screen space. 
            The retrieved value is of type RECT.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_HAS_ICONIC_BITMAP">
            <summary>
            Use with DwmSetWindowAttribute. The window will provide a bitmap for use by DWM as an iconic thumbnail or 
            peek representation (a static bitmap) for the window. DWMWA_HAS_ICONIC_BITMAP can be specified 
            with DWMWA_FORCE_ICONIC_REPRESENTATION. DWMWA_HAS_ICONIC_BITMAP normally is set during a window's 
            creation and not changed throughout the window's lifetime. Some scenarios, however, might require 
            the value to change over time. The pvAttribute parameter points to a value of TRUE to inform DWM that 
            the window will provide an iconic thumbnail or peek representation; otherwise, it points to FALSE.
            Windows Vista and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_DISALLOW_PEEK">
            <summary>
            Use with DwmSetWindowAttribute. Do not show peek preview for the window. The peek view shows a 
            full-sized preview of the window when the mouse hovers over the window's thumbnail in the taskbar. 
            If this attribute is set, hovering the mouse pointer over the window's thumbnail 
            dismisses peek (in case another window in the group has a peek preview showing). 
            The pvAttribute parameter points to a value of TRUE to prevent peek functionality or FALSE to allow it.
            Windows Vista and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_EXCLUDED_FROM_PEEK">
            <summary>
            Use with DwmSetWindowAttribute. Prevents a window from fading to a glass sheet when peek is invoked. 
            The pvAttribute parameter points to a value of TRUE to prevent the window from fading during another
            window's peek or FALSE for normal behavior.
            Windows Vista and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_CLOAK">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_CLOAKED">
            <summary>
            Use with DwmGetWindowAttribute. If the window is cloaked, provides one of the following values 
            explaining why:
            Name									Value			Meaning
            DWM_CLOAKED_APP				0x0000001	The window was cloaked by its owner application.
            DWM_CLOAKED_SHELL			0x0000002	The window was cloaked by the Shell.
            DWM_CLOAKED_INHERITED	0x0000004	The cloak value was inherited from its owner window.
            Windows 7 and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_FREEZE_REPRESENTATION">
            <summary>
            Use with DwmSetWindowAttribute. Freeze the window's thumbnail image with its current visuals. 
            Do no further live updates on the thumbnail image to match the window's contents.
            Windows 7 and earlier:  This value is not supported.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.DwmWindowAttribute.DWMWA_LAST">
            <summary>
            The maximum recognized DWMWINDOWATTRIBUTE value, used for validation purposes.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Common.Win32.GetVersionEx(Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo@)">
            <summary>
            Retrieves information about the current operating system.
            </summary>
            <param name="lpVersionInfo">version info</param>
            <returns>true if execution is successful</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo">
            <summary>
            Contains operating system version information.
            The information includes major and minor version numbers, 
            a build number, a platform identifier, and descriptive text about the 
            operating system. This structure is used with the GetVersionEx function.
            To obtain additional version information, use the OSVERSIONINFOEX 
            structure with GetVersionEx instead.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo.dwOSVersionInfoSize">
            <summary>
            The size of this data structure, in bytes. 
            Set this member to sizeof(OSVERSIONINFO).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo.dwMajorVersion">
            <summary>
            The major version number of the operating system. 
            For more information, see Remarks.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo.dwMinorVersion">
            <summary>
            The minor version number of the operating system. 
            For more information, see Remarks.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo.dwBuildNumber">
            <summary>
            The build number of the operating system.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo.dwPlatformId">
            <summary>
            The operating system platform. This member can be the following value.
            VER_PLATFORM_WIN32_NT = 2 : The operating system is Windows 7,
            Windows Server 2008, Windows Vista, Windows Server 2003, Windows XP,
            or Windows 2000.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.OSVersionInfo.szCSDVersion">
            <summary>
            A null-terminated string, such as "Service Pack 3", that indicates
            the latest Service Pack installed on the system. 
            If no Service Pack has been installed, the string is empty.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.Modifiers.MOD_ALT">
            <summary>
            Either ALT key must be held down.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.Modifiers.MOD_CONTROL">
            <summary>
            Either CTRL key must be held down.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.Modifiers.MOD_SHIFT">
            <summary>
            Either SHIFT key must be held down.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.Modifiers.MOD_WIN">
            <summary>
            Either WINDOWS key was held down. These keys are labeled with the Windows logo. 
            Keyboard shortcuts that involve the WINDOWS key are reserved for use by the operating system.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Common.Win32.Modifiers.MOD_NOREPEAT">
            <summary>
            Changes the hotkey behavior so that the keyboard auto-repeat does not yield multiple hotkey notifications.
            </summary>
            
            <remarks>Windows Vista and Windows XP/2000:  This flag is not supported.</remarks>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.LoadFromFile(System.IO.Stream)">
            <summary>
            Load an excel file from stream.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.LoadFromFile(System.IO.Stream,System.Boolean)">
            <summary>
             Load an excel file from stream. 
            </summary>
            <param name="stream">excel stream .</param>
            <param name="forceRefresh">Indicates whether refresh data.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.LoadFromFile(System.String)">
            <summary>
            Load data from an excel file. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.LoadFromFile(System.String,System.Boolean)">
            <summary>
             Load data from an excel file. 
            </summary>
            <param name="fileName">excel file name.</param>
            <param name="forceRefresh">Indicates whether refresh data.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.SaveToFile(System.IO.Stream)">
            <summary>
            Save to an excel file stream. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.SaveToFile(System.IO.Stream,Spire.Spreadsheet.Forms.FileFormatType)">
            <summary>
            Save to an excel file stream. 
            </summary>
            <param name="stream">excel stream.</param>
            <param name="fileFormatType">file format type.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.SaveToFile(System.String)">
            <summary>
            Save to an excel file. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.SaveToHtml(System.String)">
            <summary>
            Save to an html file. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.SaveToFile(System.String,Spire.Spreadsheet.Forms.FileFormatType)">
            <summary>
            Save to an excel file. 
            </summary>
            <param name="fileName">file name.</param>
            <param name="fileFormatType">file format type.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorkbookLoaded">
            <summary>
            Event raised when workbook loaded from stream or file.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorkbookSaved">
            <summary>
            Event raised when workbook saved into stream or file.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.CurrentWorksheet">
            <summary>
            Get or set the current worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.CreateWorksheet">
            <summary>
            Create new instance of worksheet with default available name. (e.g. Sheet1, Sheet2 ...)
            </summary>
            <returns>Instance of worksheet to be created.</returns>
            <remarks>This method creates a new worksheet, but doesn't add it into the collection of worksheet.
            Worksheet will only be available until adding into a workbook, by using these methods:
            <code>InsertWorksheet</code>, <code>Worksheets.Add</code> or <code>Worksheets.Insert</code>
            </remarks>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.CreateWorksheet(System.String)">
            <summary>
            Create new instance of worksheet.
            </summary>
            <param name="name">name of new worksheet to be created. 
            If name is null, ReoGrid will find an available name automatically. e.g. 'Sheet1', 'Sheet2'...</param>
            <returns>instance of worksheet to be created</returns>
            <remarks>This method creates a new worksheet, but doesn't add it into the collection of worksheet.
            Worksheet will only be available until adding into a workbook, by using these methods:
            <code>InsertWorksheet</code>, <code>Worksheets.Add</code> or <code>Worksheets.Insert</code>
            </remarks>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.AddWorksheet">
            <summary>
            Add a worksheet into this workbook
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.AddWorksheet(System.String)">
            <summary>
            Add a worksheet by a specified name
            </summary>
            <param name="worksheetName">the name of the worksheet</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.ClearAll">
            <summary>
            Clears all data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ActiveSheetIndex">
            <summary>
            Gets or sets the selected worksheet index.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ActiveWorksheet">
            <summary>
            Gets or sets the selected worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.GetWorksheetIndex(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Get index of specified worksheet from the collection in this workbook
            </summary>
            <param name="sheet">Worksheet to get.</param>
            <returns>zero-based number of worksheet in this workbook's collection</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.GetWorksheetIndex(System.String)">
            <summary>
            Get the index of specified worksheet by name from workbook.
            </summary>
            <param name="sheet">Name of worksheet to get.</param>
            <returns>Zero-based number of worksheet in worksheet collection of workbook. Returns -1 if not found.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.GetWorksheet(System.String)">
            <summary>
            Find worksheet by specified name.
            </summary>
            <param name="name">Name to find worksheet</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.Refresh">
            <summary>
            Refresh the spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.ExpandOutlineToLevel(System.Int32,System.Boolean)">
            <summary>
            Expand row/column Group Outline to specified level
            </summary>
            <param name="level">group level</param>
            <param name="isRow">true(row group)/false(column group)</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.UseR1C1Address">
            <summary>
            Gets or sets a value indicating whether using R1C1 range.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.ActiveWorksheetChanged">
            <summary>
            Event raised when current worksheet is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorksheetCreated">
            <summary>
            Event raised when worksheet is created.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorksheetInserted">
            <summary>
            Event raised when worksheet is inserted into this workbook.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorksheetRemoved">
            <summary>
            Event raised when worksheet is removed from this workbook.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorksheetNameChanged">
            <summary>
            Event raised when the name of worksheet managed by this workbook is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorksheetNameBackColorChanged">
            <summary>
            Event raised when background color of worksheet name is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorksheetNameTextColorChanged">
            <summary>
            Event raised when text color of worksheet name is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.ActiveSheetChanged">
            <summary>
            Occurs when the SelectedSheetIndex property is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.CellDataChanged">
            <summary>
            Occurs when the cell data changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.SelectedCellChanged">
            <summary>
            Occurs when the actived cell is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.CellClick">
            <summary>
            Occurs when the cell is clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.CellDoubleClick">
            <summary>
            Occurs when the cell is double clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.CellKeyPressed">
            <summary>
            Occurs when a key is pressed while a cell has focus.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.RowGroupButtonClick">
            <summary>
            Occurs when the row groupbutton clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.ColumnGroupButtonClick">
            <summary>
            Occurs when the column groupbutton clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.RowHeaderClick">
            <summary>
            Occurs when the row header clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.RowHeaderDoubleClick">
            <summary>
            Occurs when the row header double clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.ColumnHeaderClick">
            <summary>
            Occurs when the column header clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.ColumnHeaderDoubleClick">
            <summary>
            Occurs when the column header double clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.AfterInsertRows">
            <summary>
            Occurs when the row inserted.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.AfterInsertColumns">
            <summary>
            Occurs when the column inserted.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.AfterDeleteRows">
            <summary>
            Occurs when the row deleted.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.AfterDeleteColumns">
            <summary>
            Occurs when the column deleted.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.Readonly">
            <summary>
            Determine whether or not this workbook is read-only (Reserved v0.8.8)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.EnableUndo">
            <summary>
            Gets or sets whether the undo is enabled. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.DoAction(Spire.Spreadsheet.Forms.Worksheet,Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction)">
            <summary>Do specified action. 
            
            An action does the operation as well as undoes for worksheet.
            Actions performed by this method will be appended to action history stack 
            in order to undo, redo and repeat.
            
            There are built-in actions available for many base operations, such as:
              <code>SetCellDataAction</code> - set cell data
              <code>SetRangeDataAction</code> - set data into range
              <code>SetRangeBorderAction</code> - set border to specified range
              <code>SetRangeStyleAction</code> - set styles to specified range
              ...
              
            It is possible to make custom action by inherting BaseWorksheetAction.
            </summary>
            <example>
            ReoGrid uses ActionManager, unvell lightweight undo framework, 
            to implement the Do/Undo/Redo/Repeat method.
            
            To do action:
            <code>
              var action = new SetCellDataAction("B1", 10);
              workbook.DoAction(targetSheet, action);
            </code>
            
            To undo action:
            <code>
              workbook.Undo();
            </code>
            
            To redo action:
            <code>
            	workbook.Redo();
            </code>
            
            To repeat last action:
            <code>
            	workbook.RepeatLastAction(targetSheet, new ReoGridRange("B1:C3"));
            </code>
            
            It is possible to do multiple actions at same time:
            <code>
              var action1 = new SetRangeDataAction(...);
              var action2 = new SetRangeBorderAction(...);
              var action3 = new SetRangeStyleAction(...);
              
            	var actionGroup = new WorksheetActionGroup();
            	actionGroup.Actions.Add(action1);
            	actionGroup.Actions.Add(action2);
            	actionGroup.Actions.Add(action3);
            	
            	workbook.DoAction(targetSheet, actionGroup);
            </code>
            
            Actions added into action group will be performed by one time,
            they will be also undone by one time.
            </example>
            <seealso cref="T:Spire.Spreadsheet.Forms.Common.ActionGroup"/>
            <seealso cref="T:Spire.Spreadsheet.Forms.Actions.BaseWorksheetAction"/>
            <seealso cref="T:Spire.Spreadsheet.Forms.Actions.WorksheetActionGroup"/>
            <param name="sheet">worksheet of the target container to perform specified action</param>
            <param name="action">action to be performed</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.UndoStepsCount">
            <summary>
            Gets the current available undo steps count. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.RedoStepsCount">
            <summary>
            Gets the current available redo steps count. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.Undo">
            <summary>
            Undo the last action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.Redo">
            <summary>
            Redo the last action.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.RepeatLastAction(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Repeat to do last action and apply to another specified range.
            </summary>
            <param name="range">The new range to be applied for the last action.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.RepeatLastAction(Spire.Spreadsheet.Forms.Worksheet,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Repeat to do last action and apply to another specified range and worksheet.
            </summary>
            <param name="worksheet">The target worksheet to perform the action.</param>
            <param name="range">The new range to be applied for the last action.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.CanUndo">
            <summary>
            Determine whether there is any actions can be undone.
            </summary>
            <returns>True if any actions can be undone</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.CanRedo">
            <summary>
            Determine whether there is any actions can be redid.
            </summary>
            <returns>True if any actions can be redid</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.ClearActionHistory">
            <summary>
            Clear all undo/redo actions from workbook action history.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.ClearActionHistoryForWorksheet(Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Delete all actions that belongs to specified worksheet.
            </summary>
            <param name="sheet">Actions belongs to this worksheet will be deleted from workbook action histroy.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.BeforeActionPerform">
            <summary>
            Event fired before action perform.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.ActionPerformed">
            <summary>
            Event fired when any action performed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.Undid">
            <summary>
            Event fired when Undo operation performed by user.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.Redid">
            <summary>
            Event fired when Reod operation performed by user.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.HasSettings(Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Determine whether or not the specified workbook settings has been set
            </summary>
            <param name="settings">Settings to be checked</param>
            <returns>True if specified settings has been set</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.EnableSettings(Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Enable specified settings for workbook.
            </summary>
            <param name="settings">Settings to be enabled.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.DisableSettings(Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Disable specified settings for workbook.
            </summary>
            <param name="settings">Settings to be disabled.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.SettingsChanged">
            <summary>
            Event raised when settings is changed
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.ExceptionHappened">
            <summary>
            Event raised when exception has been happened during internal operations.
            Usually the internal operations are raised by hot-keys pressed by end-user.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.NotifyExceptionHappen(Spire.Spreadsheet.Forms.Worksheet,System.Exception)">
            <summary>
            Notify that there are exceptions happen on any worksheet. 
            The event ExceptionHappened of workbook will be invoked.
            </summary>
            <param name="sheet">Worksheet where the exception happened.</param>
            <param name="ex">Exception to describe the details of error information.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.CellsSelectionCursor">
            <summary>
            Get or set the mouse cursor on cells selection
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.FullRowSelectionCursor">
            <summary>
            Cursor symbol displayed when moving mouse over on row headers
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.FullColumnSelectionCursor">
            <summary>
            Cursor symbol displayed when moving mouse over on column headers
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.EntireSheetSelectionCursor">
            <summary>
            Get or set the mouse cursor of lead header part
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.PickRange(Spire.Spreadsheet.Forms.Spreadsheet.OnPickedHandle)">
            <summary>
            Start to pick a range from current worksheet.
            </summary>
            <param name="onPicked">Callback function invoked after range is picked.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.PickRange(Spire.Spreadsheet.Forms.Spreadsheet.OnPickedHandle,System.Windows.Forms.Cursor)">
            <summary>
            Start to pick a range from current worksheet.
            </summary>
            <param name="onPicked">Callback function invoked after range is picked.</param>
            <param name="pickerCursor">Cursor style during picking.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.StartPickRangeAndCopyStyle">
            <summary>
            Start to pick ranges and copy the styles to the picked range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.EndPickRange">
            <summary>
            End pick range operation
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ControlInstance">
            <summary>
            Retrieve control instance of workbook.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ControlStyle">
            <summary>
            Control Style Settings
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.Font">
            <summary>
            Gets or sets the default font of the cell text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ForeColor">
            <summary>
            Gets or sets the default foreground color of the spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ColumnHeaderVisible">
            <summary>
            Gets or sets a value indicating whether column header is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.RowHeaderVisible">
            <summary>
            Gets or sets a value indicating whether row header is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ContextMenuVisible">
            <summary>
            Indicates whether show context menu.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.BorderStyle">
            <summary>
            Indicates the border style for the spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.SheetsBarVisible">
            <summary>
            Gets or sets a value indicating whether sheet bar is visible.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnMouseLeave(System.EventArgs)">
            <summary>
            Overrides mouse-leave event
            </summary>
            <param name="e">Argument of mouse-leave</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.SheetTabVisible">
            <summary>
            Show or hide the built-in sheet tab control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.SheetTabControlWidth">
            <summary>
            Get or set the width of sheet tab control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.SheetTabNewButtonVisible">
            <summary>
            Determines that whether or not to display the new button on sheet tab control.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.ScrollCurrentWorksheet(System.Single,System.Single)">
            <summary>
            Scroll current active worksheet.
            </summary>
            <param name="x">Scroll value on horizontal direction.</param>
            <param name="y">Scroll value on vertical direction.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Spreadsheet.WorksheetScrolled">
            <summary>
            Event raised when current worksheet is scrolled.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.RaiseWorksheetScrolledEvent(Spire.Spreadsheet.Forms.Worksheet,System.Single,System.Single)">
            <summary>
            Raise the event of worksheet scrolled.
            </summary>
            <param name="worksheet">Instance of scrolled worksheet.</param>
            <param name="x">Scroll value on horizontal direction.</param>
            <param name="y">Scroll value on vertical direction.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.VerticalScroll">
            <summary>
             Gets the characteristics associated with the vertical scroll bar.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.HorizontalScroll">
            <summary>
              Gets the characteristics associated with the horizontal scroll bar.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.CalculateAllValue">
            <summary>
            Caculate all value of whole book.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.EnableAutoCalculate">
            <summary>
            Indicates whether calculate all the formula when value changed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.MenuLanguageConfigPath">
            <summary>
            Gests or sets path of the file which is named as MenuLanguageConfig.xml.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.Password">
            <summary>
            Workbook file encryption password.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ScrollBarsVisibility">
            <summary>
            Indicates whether scroll bars is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.VerticalScrollBarVisibility">
            <summary>
            Gets or sets visible of Vertical ScrollBar.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.IsLoading">
            <summary>
            whether Spreadsheet is loading file.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.NamedRanges">
            <summary>
            Gets the collection of all the Name objects in the spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.HorizontalScrollBarVisibility">
            <summary>
            Gests or sets visible of Horizontal ScrollBar.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.Worksheets">
            <summary>
            Gets the Worksheets.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.#ctor">
            <summary>
            Create component instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.WinFormControlAdapter.TimerRun(System.Object)">
            <summary>
            Threading to update frames of focus highlighted range
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides mouse-down events
            </summary>
            <param name="e">Argument of mouse pressing event.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides mouse-move events
            </summary>
            <param name="e">Argument of mouse moving event.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides mouse-up events
            </summary>
            <param name="e">Argument of mouse release event.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides mouse-wheel events.
            </summary>
            <param name="e">Argument of mouse wheel event.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides mouse-double-click events.
            </summary>
            <param name="e">Argument of mouse double click event.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Overrides is-input-key process
            </summary>
            <param name="keyData">Windows virtual key code</param>
            <returns>true to override</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides key-down event
            </summary>
            <param name="e">Argument of key-down event</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides key-up event
            </summary>
            <param name="e">Argument of key-up event</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.SheetTabContextMenuStrip">
            <summary>
            Get or set menu strip of sheet tab control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.ColumnHeaderContextMenuStrip">
            <summary>
            Context menu strip displayed when user click on header of column
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.RowHeaderContextMenuStrip">
            <summary>
            Context menu strip displayed when user click on header of row
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Spreadsheet.LeadHeaderContextMenuStrip">
            <summary>
            Context menu strip displayed when user click on header of row
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.ProcessDialogChar(System.Char)">
            <summary>
            Handle the dialog char input event.
            </summary>
            <param name="charCode">Character code inputted by user.</param>
            <returns>True if event has been handled; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides system message process method
            </summary>
            <param name="m">Windows message</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Spreadsheet.OnResize(System.EventArgs)">
            <summary>
            Overrides on-resize process method
            </summary>
            <param name="e">Argument of on-resize event</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpireHScrollProperties.#ctor(System.Windows.Forms.ScrollableControl,System.Windows.Forms.HScrollBar)">
             Summary:
                 Initializes a new instance of the System.Windows.Forms.ScrollProperties class.
            
             Parameters:
               container:
                 The System.Windows.Forms.ScrollableControl whose scrolling properties this
                 object describes.
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Main.SheetTabMouseEventArgs">
            <summary>
            Mouse event arguments for sheet tab control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.SheetTabMouseEventArgs.MouseButtons">
            <summary>
            Mouse button flags. (Left, Right or Centred)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.SheetTabMouseEventArgs.Location">
            <summary>
            Mouse location related to sheet tab control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.SheetTabMouseEventArgs.Index">
            <summary>
            Number of tab specified by this index to be moved.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.SheetTabMouseEventArgs.Handled">
            <summary>
            Get or set whether the user-code handled this event. 
            Built-in operations will be cancelled if this property is set to true.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Main.SheetTabMovedEventArgs">
            <summary>
            Sheet moved event arguments.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.SheetTabMovedEventArgs.Index">
            <summary>
            Number of tab specified by this index to be moved.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.SheetTabMovedEventArgs.TargetIndex">
            <summary>
            Number of tab as position moved to.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Main.SheetTabBorderStyle">
            <summary>
            Represents the border style of tab item.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Main.SheetTabBorderStyle.RectShadow">
            <summary>
            Sharp Rectangle
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Main.SheetTabBorderStyle.SplitRouned">
            <summary>
            Separated Rounded Rectangle
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Main.SheetTabBorderStyle.NoBorder">
            <summary>
            No Borders (Windows 8 Style)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Main.SheetTabControlPosition">
            <summary>
            Position of tab control will be located.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Main.SheetTabControlPosition.Top">
            <summary>
            Put at top to other controls.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Main.SheetTabControlPosition.Bottom">
            <summary>
            Put at bottom to other controls.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Main.ISheetTabControl">
            <summary>
            Representes the sheet tab control interface.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.ISheetTabControl.SelectedIndex">
            <summary>
            Get or set the current tab index.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Main.ISheetTabControl.TabMoved">
            <summary>
            Event raised when tab item is moved.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Main.ISheetTabControl.SelectedIndexChanged">
            <summary>
            Event raised when selected tab is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Main.ISheetTabControl.SplitterMoving">
            <summary>
            Event raised when splitter is moved.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Main.ISheetTabControl.SheetListClick">
            <summary>
            Event raised when sheet list button is clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Main.ISheetTabControl.NewSheetClick">
            <summary>
            Event raised when new sheet butotn is clicked.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Main.ISheetTabControl.TabMouseDown">
            <summary>
            Event raised when mouse is pressed down on tab items.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Main.ISheetTabControl.ScrollToItem(System.Int32)">
            <summary>
            Scroll view to show tab item by specified index.
            </summary>
            <param name="index">Number of item to scrolled.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.ISheetTabControl.ControlWidth">
            <summary>
            Get or set the width of sheet tab control
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Main.ISheetTabControl.AddTab(System.String)">
            <summary>
            Add tab.
            </summary>
            <param name="title">Title of tab.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Main.ISheetTabControl.InsertTab(System.Int32,System.String)">
            <summary>
            Insert tab
            </summary>
            <param name="index">Zero-based number of tab.</param>
            <param name="title">Title of tab.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Main.ISheetTabControl.UpdateTab(System.Int32,System.String,System.Drawing.Color)">
            <summary>
            Update tab title.
            </summary>
            <param name="index">Zero-based number of tab.</param>
            <param name="title">Title of tab.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Main.ISheetTabControl.RemoveTab(System.Int32)">
            <summary>
            Remove specified tab.
            </summary>
            <param name="index">Zero-based number of tab.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Main.ISheetTabControl.ClearTabs">
            <summary>
            Clear all tabs.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.ISheetTabControl.AllowDragToMove">
            <summary>
            Determine whether or not allow to move tab by dragging mouse.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Main.ISheetTabControl.NewButtonVisible">
            <summary>
            Determine whether or not to show new sheet button.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Core.ReoGridRenderHorAlign">
            <summary>
            Cell horizontal alignment for render. (cell-auto-format)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BorderPositions">
            <summary>
            Position of borders for a range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.None">
            <summary>
            No border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.Top">
            <summary>
            Top border inside range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.Bottom">
            <summary>
            Bottom border inside range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.Left">
            <summary>
            Left side border inside range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.Right">
            <summary>
            Right side border inside range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.InsideHorizontal">
            <summary>
            Horizontal borders inside range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.InsideVertical">
            <summary>
            Vertical borders inside range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.Slash">
            <summary>
            Slash lines inside cell (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.Backslash">
            <summary>
            Backslash lines inside cell (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.LeftRight">
            <summary>
            Borders in left and right side in range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.TopBottom">
            <summary>
            Borders in top and bottom in range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.Outside">
            <summary>
            Borders around range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.InsideAll">
            <summary>
            Horizontal and vertical borders inside range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.All">
            <summary>
            All borders belong to range or cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderPositions.X">
            <summary>
            Cross line in single cell (Both Slash and Backslash, Reserved)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BorderStyle">
            <summary>
            Represents a border style of range or cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.Empty">
            <summary>
            No border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BorderStyle.Style">
            <summary>
            The border style
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BorderStyle.Color">
            <summary>
            Color of border
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BorderStyle.IsEmpty">
            <summary>
            Determines whether this style is empty
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderStyle.Equals(System.Object)">
            <summary>
            Compare two border styles check whether they are same
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>True if two object are same; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderStyle.op_Equality(Spire.Spreadsheet.Forms.BorderStyle,System.Object)">
            <summary>
            Compare two styles and check whether or not they are same.
            </summary>
            <param name="s1">First style to be compared.</param>
            <param name="s2">Second style to be compared.</param>
            <returns>Return true if two styles are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderStyle.op_Inequality(Spire.Spreadsheet.Forms.BorderStyle,System.Object)">
            <summary>
            Compare two styles and check whether or not they are not same.
            </summary>
            <param name="s1">First style to be compared.</param>
            <param name="s2">Second style to be compared.</param>
            <returns>Return true if two styles are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderStyle.GetHashCode">
            <summary>
            Return the hashcode of this object.
            </summary>
            <returns>Hashcode calculated from this object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderStyle.ToString">
            <summary>
            Convert style object into friendly description string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderStyle.#ctor(Spire.Spreadsheet.Forms.Graphics.SolidColor,Spire.Spreadsheet.Forms.Utility.BorderLineType)">
            <summary>
            Create range border style object with specified color and style.
            </summary>
            <param name="color">Color to display borders on worksheet.</param>
            <param name="style">Style to display borders on worksheet.</param>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.BlackSolid">
            <summary>
            Predefined border style of solid black border.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.BlackBoldSolid">
            <summary>
            Predefined border style of solid black border.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.GraySolid">
            <summary>
            Predefined border style of solid gray border.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.SilverSolid">
            <summary>
            Predefined border style of solid silver border.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.BlackDotted">
            <summary>
            Predefined border style of dotted black border.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.GrayDotted">
            <summary>
            Predefined border style of dotted gray border.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.BlackDash">
            <summary>
            Predefined border style of dashed black border.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.BorderStyle.GrayDash">
            <summary>
            Predefined border style of dashed gray border.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeBorderInfo">
            <summary>
            This class contains the position and style information of a segment of border for a range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfo.Pos">
            <summary>
            Get or set the position of this border in a range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfo.Style">
            <summary>
            Get or set the style of border in a range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeBorderInfo.#ctor(Spire.Spreadsheet.Forms.BorderPositions,Spire.Spreadsheet.Forms.BorderStyle)">
            <summary>
            Create border information instance with specified position and style.
            </summary>
            <param name="pos">The position of border in a range.</param>
            <param name="style">The style of border in a range.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeBorderInfoSet">
            <summary>
            This class contains the information of all borders in specified range. 
            This class only be used as return value form <see cref="!:GetRangeBorders">GetRangeBorders</see> method.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.NonUniformPos">
            <summary>
            Borders at the positions are not same
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeBorderInfoSet.IsNonUniform(Spire.Spreadsheet.Forms.BorderPositions)">
            <summary>
            Indicates whether the borders to each cells in a specified range are not same 
            </summary>
            <param name="pos">border position in range</param>
            <returns>true if borders at position are not same</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.Top">
            <summary>
            Border style at top of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.Right">
            <summary>
            Border style at right of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.Bottom">
            <summary>
            Border style at bottom of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.Left">
            <summary>
            Border  style at left of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.InsideHorizontal">
            <summary>
            Horizontal border style inside range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.InsideVertical">
            <summary>
            Vertical border style inside range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.Backslash">
            <summary>
            Backslash border style inside range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeBorderInfoSet.Slash">
            <summary>
            Slash border style inside range
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetCustomProperty">
            <summary>
             Represents worksheet custom property.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetCustomProperty.Name">
            <summary>
             Gets or sets name of the property.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetCustomProperty.Value">
            <summary>
            Gets / sets value of the property.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.ScientificDataFormatter">
            <summary>
            Scientific data formatter
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.ScientificDataFormatter.FormatCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Format specified cell
            </summary>
            <param name="cell">cell instance</param>
            <returns>true if cell has been formatted</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.ScientificDataFormatter.ScientificFormatArgs">
            <summary>
            Represents arguments of Scientific data format.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.ScientificDataFormatter.ScientificFormatArgs.DecimalPlaces">
            <summary>
            Number of decimal places.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.ScientificDataFormatter.ScientificFormatArgs.Equals(System.Object)">
            <summary>
            Check whether or not two objects are same.
            </summary>
            <param name="obj">Another object to be compared.</param>
            <returns>True if two objects are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.ScientificDataFormatter.ScientificFormatArgs.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.ScientificDataFormatter.PerformTestFormat">
            <summary>
            Determine whether or not to perform format test
            </summary>
            <returns>True to perform test; False to abort</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.CustomDataFormatter.CustomFormatArgs.#ctor">
            <summary>
            Create custom format arguments.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.CustomDataFormatter.CustomFormatArgs.CustomPattern">
            <summary>
            Custom pattern.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter">
            <summary>
            Currency data formatter
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.FormatCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Format specified cell
            </summary>
            <param name="cell">cell instance</param>
            <returns>true if cell has been formatted</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs">
            <summary>
            Represents arguments of currency data format.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.PrefixSymbol">
            <summary>
            Currency symbol that displayed before currency number.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.PostfixSymbol">
            <summary>
            Currency symbol that displayed after currency number.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.CultureEnglishName">
            <summary>
            Culture name in English. (e.g. en-US)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.Equals(System.Object)">
            <summary>
            Check whether or not two objects are same.
            </summary>
            <param name="obj">Another object to be compared.</param>
            <returns>True if two objects are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.CurrencyFormatArgs.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.CurrencyDataFormatter.PerformTestFormat">
            <summary>
            Determine whether or not to perform format test
            </summary>
            <returns>True to perform test; False to abort</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.AccountingDataFormatter.FormatCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Format specified cell
            </summary>
            <param name="cell">cell instance</param>
            <returns>true if cell has been formatted</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.AccountingDataFormatter.AccountingFormatArgs.PrefixSymbol">
            <summary>
            Currency symbol that displayed before currency number.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.AccountingDataFormatter.AccountingFormatArgs.PostfixSymbol">
            <summary>
            Currency symbol that displayed after currency number.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.AccountingDataFormatter.AccountingFormatArgs.CultureEnglishName">
            <summary>
            Culture name in English. (e.g. en-US)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.AccountingDataFormatter.AccountingFormatArgs.Equals(System.Object)">
            <summary>
            Check whether or not two objects are same.
            </summary>
            <param name="obj">Another object to be compared.</param>
            <returns>True if two objects are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.AccountingDataFormatter.AccountingFormatArgs.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.AccountingDataFormatter.PerformTestFormat">
            <summary>
            Determine whether or not to perform format test
            </summary>
            <returns>True to perform test; False to abort</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag">
            <summary>
            Cell data format type
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.General">
            <summary>
            Auto format type (compliant with Text and Number)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Number">
            <summary>
            Number Type
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Date">
            <summary>
            Date Type
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Time">
            <summary>
            Time Type
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Percent">
            <summary>
            Percent Type
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Currency">
            <summary>
            Currency Type
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Accounting">
            <summary>
             Accounting Type
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Scientific">
            <summary>
            Scientific Type
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Text">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.CellDataFormatFlag.Custom">
            <summary>
            User custom data formatter
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.IDataFormatter">
            <summary>
            Data format provider interface
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.IDataFormatter.FormatCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Format data stored in specified cell.
            </summary>
            <param name="cell">Instance of cell to be formatted.</param>
            <returns>Return non-empty string if formatting was performed successfully; Otherwise return null.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.IDataFormatter.PerformTestFormat">
            <summary>
            Indicate that whether or not to check the data type before format.
            </summary>
            <returns>True to perform test; Otherwise return false.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.DataFormatterManager">
            <summary>
            Data Formatter Manager
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.DataFormatterManager.Instance">
            <summary>
            Instance for this class
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.DataFormatterManager.DataFormatters">
            <summary>
            Built-in data formatters
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter">
            <summary>
            Datetime data formatter
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.BaseStartDate">
            <summary>
            Base start time used to calculcate the date from a number value
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.FormatCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Format cell
            </summary>
            <param name="cell">cell to be formatted</param>
            <returns>Formatted text used to display as cell content</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.DateTimeFormatArgs">
            <summary>
            Represents the argument that is used during format a cell as data time.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.DateTimeFormatArgs.Format">
            <summary>
            Get or set the date time pattern. (Standard .NET datetime pattern is supported, e.g.: yyyy/MM/dd)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.DateTimeFormatArgs.CultureName">
            <summary>
            Get or set the culture name that is used to format datetime according to localization settings.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.DateTimeFormatArgs.Equals(System.Object)">
            <summary>
            Compare to another object, check whether or not two objects are same.
            </summary>
            <param name="obj">Another object to be compared.</param>
            <returns>True if two objects are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.DateTimeFormatArgs.GetHashCode">
            <summary>
            Get the hash code of this argument object.
            </summary>
            <returns>Hash code of argument object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.DateTimeDataFormatter.PerformTestFormat">
            <summary>
            Determines whether or not to perform a test when target cell is not set as datetime format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter">
            <summary>
            Time data formatter
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.BaseStartDate">
            <summary>
            Base start time used to calculcate the date from a number value
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.FormatCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Format cell
            </summary>
            <param name="cell">cell to be formatted</param>
            <returns>Formatted text used to display as cell content</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.TimeFormatArgs">
            <summary>
            Represents the argument that is used during format a cell as data time.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.TimeFormatArgs.Format">
            <summary>
            Get or set the date time pattern. (Standard .NET datetime pattern is supported, e.g.: yyyy/MM/dd)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.TimeFormatArgs.CultureName">
            <summary>
            Get or set the culture name that is used to format datetime according to localization settings.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.TimeFormatArgs.Equals(System.Object)">
            <summary>
            Compare to another object, check whether or not two objects are same.
            </summary>
            <param name="obj">Another object to be compared.</param>
            <returns>True if two objects are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.TimeFormatArgs.GetHashCode">
            <summary>
            Get the hash code of this argument object.
            </summary>
            <returns>Hash code of argument object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.TimeDataFormatter.PerformTestFormat">
            <summary>
            Determines whether or not to perform a test when target cell is not set as datetime format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.GeneralDataFormatter">
            <summary>
            GeneralDataFormatter supports both Text and Numeric format.
            And format type can be switched after data changed by user inputing.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter">
            <summary>
            Number Formatter used to format data as numeric format.
            Available also to format data with different negative styles.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.FormatCell(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Format given cell
            </summary>
            <param name="cell">Instance of cell to be formatted</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.TwoDecimalDigitsArgument">
            <summary>
            Predefined format argument with using separator and two decimal digits (e.g. 1,234.56)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NoDecimalDigitsArgument">
            <summary>
            Predefined format argument with using separator but without decimal digits (e.g. 1,234)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.INumberFormatArgs">
            <summary>
            Represents an interface for all number formats.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.INumberFormatArgs.DecimalPlaces">
            <summary>
            Get or set the digis places for number.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.INumberFormatArgs.NegativeStyle">
            <summary>
            Get or set the negative number styles.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.INumberFormatArgs.UseSeparator">
            <summary>
            Determines that whether or not show the separators in numbers.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.INumberFormatArgs.CustomNegativePrefix">
            <summary>
            Prefix symbol before negative numbers. (Requires that <code>NegativeStyle</code> set to <code>Custom</code>)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.INumberFormatArgs.CustomNegativePostfix">
            <summary>
            Postfix symbol after negative numbers. (Requires that <code>NegativeStyle</code> set to <code>Custom</code>)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs">
            <summary>
            Represents number format arguments.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.#ctor">
            <summary>
            Create number format arguments.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.DecimalPlaces">
            <summary>
            Number of decimal places.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.NegativeStyle">
            <summary>
            Determine the negative number style. (Minus, Red and Brackets)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.UseSeparator">
            <summary>
            Determine whether to use a separator to split number every 3 digits.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.CustomNegativePrefix">
            <summary>
            Prefix symbol before negative numbers. (Requires that <code>NegativeStyle</code> set to <code>Custom</code>)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.CustomNegativePostfix">
            <summary>
            Postfix symbol after negative numbers. (Requires that <code>NegativeStyle</code> set to <code>Custom</code>)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.Equals(System.Object)">
            <summary>
            Compare to another argument instance of NumberFormatArgs.
            </summary>
            <param name="obj">Another instance to be compared.</param>
            <returns>true if two argument object are same.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberFormatArgs.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle">
            <summary>
            Represents the negative number styles.
            </summary>
            <example>
            Default							:		-1234.56
            Minus								:		-1234.56
            Red									:		<span style='color:red;'>1,234.56</span>
            RedMinus						:		<span style='color:red;'>-1,234.56</span>
            Brackets						:		(1,234.56)
            RedBrackets					:		<span style='color:red;'>(1,234.56)</span>
            RedBracketsMinus		:		<span style='color:red;'>(-1,234.56)</span>
            JapaneseSankaku			:		▲ 1,234.00
            JapaneseRedSankaku	:		<span style='color:red;'>▲ 1,234.00</span>
            </example>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.Default">
            <summary>
            Regular negative style. (e.g. -1234.56)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.Minus">
            <summary>
            Regular negative style. (e.g. -1234.56)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.Red">
            <summary>
            Negative number displayed as red without prefix symbol. (e.g. <span style='color:red;'>1234.56</span>)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.Brackets">
            <summary>
            Negative number surrounded by brackets. (e.g. (1234.56))
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.RedMinus">
            <summary>
            Negative number displayed as red. Equals (Minus | Red) (e.g. <span style='color:red;'>-1234.56</span>)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.BracketsMinus">
            <summary>
            Negative number displayed with prefix symbol and brackets. Equals (Minus | Brackets) 
            (e.g. <span style='color:red;'>-1234.56</span>)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.RedBrackets">
            <summary>
            Negative number surrounded by brackets and displayed as red.
            Equals (Red | Brackets) e.g. <span style='color:red;'>(1234.56)</span>
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.RedBracketsMinus">
            <summary>
            Negative number displayed as red with prefix symbol, surrounded by brackets.
            Equals (Minus | Red | Brackets). (e.g. <span style='color:red;'>(-1234.56)</span>)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.Prefix_Sankaku">
            <summary>
            Negative number with Sankaku symbol prefix. (Japanese negative number style e.g. ▲ 1,234.00)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.NumberNegativeStyle.CustomSymbol">
            <summary>
            Set custom prefix and/or postfix for negative numbers.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.NumberDataFormatter.PerformTestFormat">
            <summary>
            Determine whether or not to perform a test when cell is not be set to use current format.
            </summary>
            <returns>True to perform test; False to do not perform test.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter">
            <summary>
            Percent data formatter
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.IPercentFormatArgs">
            <summary>
            Represents an interface for all number formats.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.IPercentFormatArgs.DecimalPlaces">
            <summary>
            Get or set the digis places for number.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.PercentFormatArgs">
            <summary>
            Represents number format arguments.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.PercentFormatArgs.#ctor">
            <summary>
            Create number format arguments.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.PercentFormatArgs.DecimalPlaces">
            <summary>
            Number of decimal places.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.PercentFormatArgs.Equals(System.Object)">
            <summary>
            Compare to another argument instance of NumberFormatArgs.
            </summary>
            <param name="obj">Another instance to be compared.</param>
            <returns>true if two argument object are same.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.PercentFormatArgs.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.PercentDataFormatter.PerformTestFormat">
            <summary>
            Perform a format check
            </summary>
            <returns>true if the data is in this format</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.DataFormat.TextDataFormatter.TextFormatArgs.#ctor">
            <summary>
            Create text format arguments.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DropDownType">
            <summary>
            Specifies the drop down style.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DropDownType.DropDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.DropDownType.DropDownList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.FontUIToolkit">
            <summary>
            Font toolkit
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.FontUIToolkit.GetFontStyleName(System.Drawing.FontStyle,System.String,System.String,System.String)">
            <summary>
            Join specified font style names
            </summary>
            <param name="style">font style flag</param>
            <param name="regularText">name for regular style</param>
            <param name="italicText">name for italic style</param>
            <param name="boldText">name for bold style</param>
            <returns>joined font style</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.FontUIToolkit.GetFontStyleByName(System.String,System.String,System.String)">
            <summary>
            Convert font name string to font style flags
            </summary>
            <param name="text">font style names</param>
            <param name="italicText">name for italic style</param>
            <param name="boldText">name for bold style</param>
            <returns>font style flag</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.BorderLineType">
            <summary>
            Specifies the border line type for a gridCell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.None">
            <summary>
            None border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.Thin">
            <summary>
            Solid border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.Hair">
            <summary>
            Dotted border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.Dashed">
            <summary>
            Dashed border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.Double">
            <summary>
            Double line border (not supported in WPF version)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.Dotted">
            <summary>
            Dashed (style 2) border (not supported in WPF version)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.DashDot">
            <summary>
            Dashed (style 3) border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.DashDotDot">
            <summary>
            Dashed (style 4) border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.MediumDashDot">
            <summary>
            Bold dashed (style 2) border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.MediumDashDotDot">
            <summary>
            Bold dashed (style 3) border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.MediumDashed">
            <summary>
            Bold dashed border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.MediumDashDotted">
            <summary>
            Bold dotted border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.Medium">
            <summary>
            Bold solid border
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.BorderLineType.Thick">
            <summary>
            Strong solid border (Bold x2)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.CellUtility">
            <summary>
            Common utility functions for cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.CopyCell(Spire.Spreadsheet.Forms.SpreadCell,Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Clone new cell instance from another cell.
            </summary>
            <param name="toCell">Target cell to be copied into.</param>
            <param name="fromCell">Original cell to be copied from.</param>
            <returns>Instance of cell cloned</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.CopyCellContent(Spire.Spreadsheet.Forms.SpreadCell,Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Copy all content from a cell to another cell.
            </summary>
            <param name="toCell">Target cell to be copied into.</param>
            <param name="fromCell">Source cell to be copied from.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.IsNumberData(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Check specified data from a cell is whether or not a number.
            </summary>
            <param name="cell">Cell instance of data.</param>
            <returns>True if data from the cell is number.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.IsNumberData(System.Object)">
            <summary>
            Check specified data is whether or not a number.
            </summary>
            <param name="data">Data to be check.</param>
            <returns>True if data is number.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.TryGetNumberData(Spire.Spreadsheet.Forms.SpreadCell,System.Double@)">
            <summary>
            Try get double value from specified cell.
            </summary>
            <param name="cell">Instance of cell.</param>
            <param name="value">The output value converted from data.</param>
            <returns>True if convert is succesful.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.TryGetNumberData(System.Object,System.Double@)">
            <summary>
            Try get double value from specified object.
            </summary>
            <param name="data">Data to be check and converted.</param>
            <param name="value">The output value converted from data.</param>
            <returns>True if convert is succesful.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.ConvertData``1(System.Object)">
            <summary>
            Convert cell data into another type if possible.
            </summary>
            <param name="data">Cell data to be converted.</param>
            <returns>Output object after convert.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellUtility.ConvertData``1(System.Object,``0@)">
            <summary>
            Convert cell data into another type if possible.
            </summary>
            <typeparam name="T">Type after convert.</typeparam>
            <param name="data">Cell data to be converted.</param>
            <param name="value">Output object after convert.</param>
            <returns>True if convert is successful.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.CellStyle">
            <summary>
            Styles of range or cells. By specifying PlainStyleFlag to determine 
            what styles should be used in this set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Flag">
            <summary>
            Get or set the styles flag that indicates what styles are contained in this style set
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.BackgroundColor">
            <summary>
            Get or set background color 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.ForegroundColor">
            <summary>
            Get or set backgrond pattern color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.FillPattern">
            <summary>
            Get or set pattern style.
            When set pattern color or pattern style, the background color should also be set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.HorizontalAlignment">
            <summary>
            Get or set horizontal alignment
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.VerticalAlignment">
            <summary>
            Get or set vertical alignment
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.RightToLeft">
            <summary>
            Get or set if cell contents read from right to left.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Trimming">
            <summary>
            Get or set how text is trimmed when it exceeds the edges of the cell text rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.WrapText">
            <summary>
            Get or set text-wrap mode
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Indent">
            <summary>
            Get or set text indent (0-65535)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Padding">
            <summary>
            Get or set padding of cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Rotation">
            <summary>
            Get or set rotate angle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Readonly">
            <summary>
            Get or set locked.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.StyleName">
            <summary>
            Gets or sets the style name.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.NumberFormat">
            <summary>
            Gets or sets the custom number format.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.BuiltInFormatIndex">
            <summary>
            Gets or sets the number format index.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.FontColor">
            <summary>
            Get or set text color
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.FontName">
            <summary>
            Get or set font name
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.FontSize">
            <summary>
            Get or set font size
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Bold">
            <summary>
            Get or set bold style
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Italic">
            <summary>
            Get or set italic style
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Strikethrough">
            <summary>
            Get or set strikethrough style
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Underline">
            <summary>
            Get or set underline style
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.#ctor">
            <summary>
            Create an empty style.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.#ctor(Spire.Spreadsheet.Forms.Spreadsheet)">
            <summary>
            Create an default style.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.Copy(Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Copy styles from another specified one.
            </summary>
            <param name="style">Style to be copied.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.Clone">
            <summary>
            Clone object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.Clone(Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Clone style set from specified another style set.
            </summary>
            <param name="source">Another style to be cloned.</param>
            <returns>New cloned style set.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.Equals(System.Object)">
            <summary>
            Check two styles and compare whether or not they are same.
            </summary>
            <param name="obj">Another style object compared to this object.</param>
            <returns>True if thay are same; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.GetHashCode">
            <summary>
            Get hash code of this object.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.CellStyle.HasStyle(Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Check whether this set of style contains specified style item.
            </summary>
            <param name="flag">Style item to be checked.</param>
            <returns>Ture if this set contains specified style item.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Utility.CellStyle.Borders">
            <summary>
            Gets or sets cell's border.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType">
            <summary>
            Specifies how a gridcell is horizontally aligned.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.General">
            <summary>
            Gerneral type.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.Left">
            <summary>
            Specifies that the contents of a cell are aligned with the left.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.Centred">
            <summary>
            Specifies that the contents of a cell are aligned with the center.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.Right">
            <summary>
            Specifies that the contents of a cell are aligned with the right.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.Filled">
            <summary>
            Specifies that the contents of a cell are filled in the cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.Justified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.CentredAcross">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.HorizontalAlignmentType.Distributed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.VerticalAlignmentType">
            <summary>
            Specifies the vertical alignment of an object or text in a cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.VerticalAlignmentType.Top">
            <summary>
            Specifies that the contents of a cell are aligned with the top.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.VerticalAlignmentType.Centred">
            <summary>
             Specifies that the contents of a cell are aligned with the center.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.VerticalAlignmentType.Bottom">
            <summary>
            Specifies that the contents of a control are aligned with the bottom.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.VerticalAlignmentType.Justified">
            <summary>
            
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.VerticalAlignmentType.Distributed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.FontStyles">
            <summary>
            Font style
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.FontStyles.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.FontStyles.Bold">
            <summary>
            Bold
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.FontStyles.Italic">
            <summary>
            Italic
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.FontStyles.Underline">
            <summary>
            Underline
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.FontStyles.Strikethrough">
            <summary>
            Strikethrough
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.FontStyles.Superscrit">
            <summary>
            Superscript
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Utility.FontStyles.Subscript">
            <summary>
            Subscript
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Utility.StyleUtility">
            <summary>
            Range style utility
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.StyleUtility.HasStyle(Spire.Spreadsheet.Forms.Utility.CellStyle,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Check whether or not the style set contains the specified item
            </summary>
            <param name="style">style set to be checked</param>
            <param name="flag">style item to be checked</param>
            <returns>true if the style set contains the specified item</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.StyleUtility.CheckAndRemoveCellStyle(Spire.Spreadsheet.Forms.Worksheet,Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Remove repeated styles if it does same as default style.
            This function also can be used to create a default style for specified cell.
            </summary>
            <param name="grid">Instance of worksheet.</param>
            <param name="cell">The style from this cell will be checked.</param>
            <returns>Checked style, null if given cell or style of cell is null.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.StyleUtility.GetStyleItem(Spire.Spreadsheet.Forms.Utility.CellStyle,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Get single style from style set
            </summary>
            <param name="style">style set to find specified single style</param>
            <param name="flag">single style specifeid by this flag to be get</param>
            <returns>single style as object returned from style set</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Utility.StyleUtility.CreateFontStyle(Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Convert to union font style flag from worksheet styleset object.
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.DataFormatCondition">
            <summary>
            DataFormatCondition Class
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormatCondition.ConditionType">
            <summary>
            Get or set condition type.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormatCondition.ComparisonOperation">
            <summary>
            Get or set comparison operation type
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormatCondition.Font">
            <summary>
            Get or set font.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormatCondition.Style">
            <summary>
            Get style.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormatCondition.Formula1">
            <summary>
            Get or set Formula1.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormatCondition.Formula2">
            <summary>
            Get or set Formula2.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.DataFormatCondition.Priority">
            <summary>
            Get or set priority.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ConditionType">
            <summary>
            Specifies whether the conditional format is based on a cell value or an expression.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.Worksheet">
            <summary>
            Get worksheet of the picture;
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.Position">
            <summary>
            Get position of the picture;
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.HorizontalOffset">
            <summary>
            Get or set the horizontal offset from its left column, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.VerticalOffset">
            <summary>
            Get or set the vertical offset from its top row, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.HorizontalScale">
            <summary>
            Get and set the horizontal scale.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.VerticalScale">
            <summary>
            Get and set the vertical scale.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.Width">
            <summary>
            Get and set the width, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.Height">
            <summary>
            Get and set the height, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICellPicture.Image">
            <summary>
            Get the image object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ICellPicture.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FindReplaceDialog">
            <summary>
            Summary description for FormFindReplace.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FindReplaceDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.FindReplaceDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.FindReplaceDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IDataFormatCondition.ConditionType">
            <summary>
            Get or set condition type.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IDataFormatCondition.ComparisonOperation">
            <summary>
            Get or set comparison operation type
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IDataFormatCondition.Font">
            <summary>
            Get or set font.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IDataFormatCondition.Style">
            <summary>
            Get style.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IDataFormatCondition.Formula1">
            <summary>
            Get or set Formula1.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IDataFormatCondition.Formula2">
            <summary>
            Get or set Formula2.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IDataFormatCondition.Priority">
            <summary>
            Get or set priority.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IHyperlink.Worksheet">
            <summary>
            Gets the worksheet of hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IHyperlink.Position">
            <summary>
            Gets the position of hyperlink.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IHyperlink.TargetUri">
            <summary>
            Gets or set the url of a hyperlink. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IHyperlink.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IHyperlink.SetTargetUri(System.String)">
            <summary>
            Set taget url of hyperlink.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IHyperlink.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INamedRange.Name">
            <summary>
            Gets the name of the object. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.INamedRange.RefersTo">
            <summary>
            Gets the name refer to.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.Worksheet">
            <summary>
            Gets worksheet of button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.SelectedIndex">
            <summary>
            Gets or sets the index of selected item.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.Width">
            <summary>
            Gets or sets the width of the Combobox control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.Height">
            <summary>
            Gets or sets the height of the Combobox control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.DropDownType">
            <summary>
            Gets or sets drop down type of combobox.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.Items">
            <summary>
            Gets an object representing the collection of the items contained in this ComboBox.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComboBoxControl.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IComboBoxControl.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Worksheet">
            <summary>
            Gets worksheet of button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Width">
            <summary>
            Gets or sets the width of the button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Height">
            <summary>
            Gets or sets the height of the button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Visible">
            <summary>
            Gets or sets if the Button should visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Image">
            <summary>
            Gets or sets the background image of button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IButtonControl.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IButtonControl.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICheckBoxControl.Worksheet">
            <summary>
            Gets worksheet of button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICheckBoxControl.Position">
            <summary>
            Gets Position of Button control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICheckBoxControl.Checked">
            <summary>
            Indicates whether the check box is in the checked.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICheckBoxControl.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ICheckBoxControl.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ICheckBoxControl.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IOleControl.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IOleControl.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IOleControl.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.OutlineLevel">
            <summary>
            Outline level.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.Worksheet">
            <summary>
            Get worksheet object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.Index">
            <summary>
            Get index of column object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.Style">
            <summary>
            Get style of the column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.Font">
            <summary>
            Get or set font of the column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.FontColor">
            <summary>
            Get or set font color of the column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.Width">
            <summary>
            Get or set the width of column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.IsHidden">
            <summary>
            Get or set the hidden of column object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.Text">
            <summary>
            Get or set the header text of the column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadColumn.OleControl">
            <summary>
            Get the Ole control object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISpreadColumn.AddButtonControl(System.Int32,System.Int32,System.String)">
            <summary>
            Add a button to the column.
            </summary>
            <param name="width">Width of button.</param>
            <param name="height">Height of button.</param>
            <param name="caption">Caption.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISpreadColumn.AddCheckBox">
            <summary>
            Add a checkbox.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISpreadColumn.AddComboBoxControl(System.Collections.IList)">
            <summary>
            Add a combobox.
            </summary>
            <param name="items">The list item.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISpreadColumn.RemoveOleControl">
            <summary>
            Remove the control from the column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.OutlineLevel">
            <summary>
            Outline level.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.Worksheet">
            <summary>
            Get worksheet object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.Index">
            <summary>
            Get index of row object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.Height">
            <summary>
            Get or set the height of row object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.IsHidden">
            <summary>
            Get or set the hidden of the row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.Text">
            <summary>
            Get or set the header text of the row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.Style">
            <summary>
            Get style of the row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.Font">
            <summary>
            Get or set font of the row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadRow.FontColor">
            <summary>
            Get or set font color of the row.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISpreadRow.GetFontColor">
            <summary>
            Get font color of row.
            </summary>
            <returns>Font color of row.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheetCustomProperty.Name">
            <summary>
             Gets or sets name of the property.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheetCustomProperty.Value">
            <summary>
            Gets / sets value of the property.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.LangResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Address">
            <summary>
              查找类似 Address 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Alignment">
            <summary>
              查找类似 Alignment 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Degrees">
            <summary>
              查找类似 Degrees 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Horizontal">
            <summary>
              查找类似 &amp;Horizontal: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Indent">
            <summary>
              查找类似 &amp;Indent: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Orientation">
            <summary>
              查找类似 Orientation 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Text_Alignment">
            <summary>
              查找类似 Text alignment 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Text_Control">
            <summary>
              查找类似 Text control 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Vertical">
            <summary>
              查找类似 &amp;Vertical: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AlignmentPage_Wrap_Text">
            <summary>
              查找类似 &amp;Wrap text 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.All">
            <summary>
              查找类似 All 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Caption">
            <summary>
              查找类似 Control Appearance Editor 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Export_CSharp">
            <summary>
              查找类似 Export C# 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Export_VBNET">
            <summary>
              查找类似 Export VB.NET 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Highlight">
            <summary>
              查找类似 &amp;Highlight: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Main">
            <summary>
              查找类似 &amp;Main: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Reset_To_Default">
            <summary>
              查找类似 Reset to &amp;Default 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Selection_Border_Width">
            <summary>
              查找类似 Selection Border &amp;Width: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.AppearanceEditor_Use_System_Highligh_Color">
            <summary>
              查找类似 Use &amp;System Highlight Color 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Border">
            <summary>
              查找类似 Border 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.BorderPage_Line">
            <summary>
              查找类似 Line 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.BorderPage_Presets">
            <summary>
              查找类似 &amp;Presets 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.BorderPage_Style">
            <summary>
              查找类似 &amp;Style: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Btn_Cancel">
            <summary>
              查找类似 &amp;Cancel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Btn_Close">
            <summary>
              查找类似 &amp;Close 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Btn_Delete">
            <summary>
              查找类似 &amp;Delete 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Btn_Edit">
            <summary>
              查找类似 &amp;Edit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Btn_New">
            <summary>
              查找类似 &amp;New 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Btn_OK">
            <summary>
              查找类似 OK 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CellBody">
            <summary>
              查找类似 Body 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Column">
            <summary>
              查找类似 Column 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Cell_Merge">
            <summary>
              查找类似 &amp;Merge 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Cell_Unmerge">
            <summary>
              查找类似 &amp;Unmerge 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Col_Clear_Filter">
            <summary>
              查找类似 Clear Filter 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Col_Column_Width">
            <summary>
              查找类似 Column &amp;Width... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Col_Delete_Columns">
            <summary>
              查找类似 &amp;Delete Columns 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Col_Filter">
            <summary>
              查找类似 &amp;Filter 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Col_Insert_Columns">
            <summary>
              查找类似 &amp;Insert Columns 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Col_Reset_To_Default_Width">
            <summary>
              查找类似 Reset to Default Width 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Row_Delete_Rows">
            <summary>
              查找类似 &amp;Delete Rows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Row_Insert_Rows">
            <summary>
              查找类似 &amp;Insert Rows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Row_Reset_to_Default_Height">
            <summary>
              查找类似 Reset to Default Height 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.CtxMenu_Row_Row_Height">
            <summary>
              查找类似 Row &amp;Height... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Currency">
            <summary>
              查找类似 Currency 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Data">
            <summary>
              查找类似 Data 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Data_Format">
            <summary>
              查找类似 Data Format 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.DateTime">
            <summary>
              查找类似 DateTime 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Default">
            <summary>
              查找类似 Default 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.DefineNamedRange_Caption">
            <summary>
              查找类似 New Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.DefineNamedRange_Comment">
            <summary>
              查找类似 &amp;Comment: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.DefineNamedRange_Name">
            <summary>
              查找类似 &amp;Name: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.DefineNamedRange_Range">
            <summary>
              查找类似 &amp;Range: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Fill">
            <summary>
              查找类似 Fill 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FillPage_Background_Color">
            <summary>
              查找类似 &amp;Background Color: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FillPage_Fill_Pattern">
            <summary>
              查找类似 Fill &amp;Pattern 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FillPage_Fill_Pattern_Color">
            <summary>
              查找类似 Fill Pattern &amp;Color 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FillPage_Fill_Pattern_Style">
            <summary>
              查找类似 Fill Pattern &amp;Style 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Filter_Export_As_CSV">
            <summary>
              查找类似 CSV File(*.csv)|*.csv|Text file(*.txt)|*.txt|All files(*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Filter_Load_File">
            <summary>
              查找类似 All Supported Files(*.xlsx;*.csv;*.rgf)|*.xlsx;*.csv;*.rgf|ReoGrid XML Format(*.rgf)|*.rgf|Excel 2007(*.xlsx)|*.xlsx|CSV File(*.csv)|*.csv|All Files(*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Filter_Save_File">
            <summary>
              查找类似 Excel 2007(*.xlsx)|*.xlsx|ReoGrid XML Format(*.rgf)|*.rgf|CSV File(*.csv)|*.csv|All Files(*.*)|*.* 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Format">
            <summary>
              查找类似 Format 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Caption">
            <summary>
              查找类似 Format Cells 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Category">
            <summary>
              查找类似 &amp;Category: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Decimal_Places">
            <summary>
              查找类似 &amp;Decimal Places: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Locale">
            <summary>
              查找类似 &amp;Locale (location): 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Negative_Numbers">
            <summary>
              查找类似 &amp;Negative numbers: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Pattern">
            <summary>
              查找类似 &amp;Pattern: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Symbol">
            <summary>
              查找类似 &amp;Symbol: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Type">
            <summary>
              查找类似 &amp;Type: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.FormatPage_Use_1000_Separator">
            <summary>
              查找类似 &amp;Use 1000 Separator ({0}) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Formula">
            <summary>
              查找类似 Formula 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.General">
            <summary>
              查找类似 General 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HeaderProperty_Auto_Fit_To_Cell">
            <summary>
              查找类似 Auto &amp;fit to cell 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HeaderProperty_Caption">
            <summary>
              查找类似 Header Properties 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HeaderProperty_Default_Column_Type">
            <summary>
              查找类似 Default Column &amp;Type: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HeaderProperty_Panel_Width">
            <summary>
              查找类似 Panel &amp;Width: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HeaderProperty_Text">
            <summary>
              查找类似 &amp;Text: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HeaderProperty_Text_Color">
            <summary>
              查找类似 Text &amp;Color: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Horizontal_Alignment_Center">
            <summary>
              查找类似 Center 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Horizontal_Alignment_Distributed">
            <summary>
              查找类似 Distributed (Indent) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Horizontal_Alignment_General">
            <summary>
              查找类似 General 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Horizontal_Alignment_Left">
            <summary>
              查找类似 Left 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Horizontal_Alignment_Right">
            <summary>
              查找类似 Right 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HP_Homepage">
            <summary>
              查找类似 http://reogrid.net/ 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.HP_Homepage_Document">
            <summary>
              查找类似 http://reogrid.net/document 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Inch">
            <summary>
              查找类似 inch 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Label_Color">
            <summary>
              查找类似 &amp;Color: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Landscape">
            <summary>
              查找类似 Landscape 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Cells">
            <summary>
              查找类似 &amp;Cells 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Cells_Merge_Cells">
            <summary>
              查找类似 &amp;Merge Cells 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Cells_Unmerge_Cells">
            <summary>
              查找类似 &amp;Unmerge Cells 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Change_Cells_Type">
            <summary>
              查找类似 Change Cells &amp;Type 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Copy">
            <summary>
              查找类似 &amp;Copy 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Cut">
            <summary>
              查找类似 C&amp;ut 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit">
            <summary>
              查找类似 &amp;Edit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Clear">
            <summary>
              查找类似 Clear 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Focus_Cell_Style">
            <summary>
              查找类似 Focus Cell Style 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Readonly">
            <summary>
              查找类似 Read-only 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Repeat_Last_Action">
            <summary>
              查找类似 Repeat Last &amp;Action 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Select_All">
            <summary>
              查找类似 Select &amp;All 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection">
            <summary>
              查找类似 &amp;Selection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Drag_To_Fill_Serial">
            <summary>
              查找类似 Drag To &amp;Fill Serial 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Drag_To_Move_Content">
            <summary>
              查找类似 &amp;Drag To Move Content 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Mode">
            <summary>
              查找类似 Selection &amp;Mode 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Mode_Cell">
            <summary>
              查找类似 Cell 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Mode_Column">
            <summary>
              查找类似 Column 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Mode_None">
            <summary>
              查找类似 None 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Mode_Range">
            <summary>
              查找类似 &amp;Range (Default) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Mode_Row">
            <summary>
              查找类似 Row 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Move_Direction">
            <summary>
              查找类似 &amp;Move Direction 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Move_Direction_Down">
            <summary>
              查找类似 &amp;Down 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Move_Direction_Right">
            <summary>
              查找类似 &amp;Right (Default) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Style">
            <summary>
              查找类似 Selection S&amp;tyle 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Style_Default">
            <summary>
              查找类似 Default Solid Rectangle 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Style_Focus_Rect">
            <summary>
              查找类似 Windows Focus Rectangle 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Edit_Selection_Style_None">
            <summary>
              查找类似 None 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File">
            <summary>
              查找类似 &amp;File 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Edit_RGF_XML">
            <summary>
              查找类似 Edit RGF &amp;XML... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Exit">
            <summary>
              查找类似 &amp;Exit 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Export_As_CSV">
            <summary>
              查找类似 Export As &amp;CSV... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Export_As_CSV_Current_Worksheet">
            <summary>
              查找类似 Export Current Worksheet... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Export_As_CSV_Selected_Range">
            <summary>
              查找类似 Export Selected Range... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Export_As_HTML">
            <summary>
              查找类似 Export As &amp;HTML... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_New">
            <summary>
              查找类似 &amp;New 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_New_Window">
            <summary>
              查找类似 New &amp;Window... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Open">
            <summary>
              查找类似 &amp;Open 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Print">
            <summary>
              查找类似 &amp;Print... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Print_Preview">
            <summary>
              查找类似 Print P&amp;review... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Print_Settings">
            <summary>
              查找类似 Print Se&amp;ttings... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Save">
            <summary>
              查找类似 &amp;Save 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_File_Save_As">
            <summary>
              查找类似 Save &amp;As... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Format_Cells">
            <summary>
              查找类似 &amp;Format Cells... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula">
            <summary>
              查找类似 &amp;Formula 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Auto_Function">
            <summary>
              查找类似 &amp;Auto Function 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Define_Name">
            <summary>
              查找类似 Define &amp;Name... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Name_Manager">
            <summary>
              查找类似 Name &amp;Manager... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Recalculate_Worksheet">
            <summary>
              查找类似 Recalculate Worksheet 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Remove_Trace_Arrows">
            <summary>
              查找类似 &amp;Remove Trace Arrows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Remove_Trace_Arrows_Remove_All_Arrows">
            <summary>
              查找类似 Remove All &amp;Arrows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Remove_Trace_Arrows_Remove_Dependent_Arrows">
            <summary>
              查找类似 Remove &amp;Dependent Arrows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Remove_Trace_Arrows_Remove_Precedent_Arrows">
            <summary>
              查找类似 Remove &amp;Precedent Arrows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Suspend_Reference_Updates">
            <summary>
              查找类似 &amp;Suspend Reference Updates 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Trace_Dependents">
            <summary>
              查找类似 Trace &amp;Dependents 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Formula_Trace_Precedents">
            <summary>
              查找类似 Trace &amp;Precedents 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Group">
            <summary>
              查找类似 &amp;Group 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Help">
            <summary>
              查找类似 &amp;Help 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Help_About">
            <summary>
              查找类似 &amp;About... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Help_Documents">
            <summary>
              查找类似 &amp;Documents... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Help_Homepage">
            <summary>
              查找类似 &amp;Homepage... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Hide">
            <summary>
              查找类似 &amp;Hide 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Insert_Page_Break">
            <summary>
              查找类似 Insert Page &amp;Break 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_More">
            <summary>
              查找类似 More... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Paste">
            <summary>
              查找类似 &amp;Paste 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Property">
            <summary>
              查找类似 &amp;Property... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Redo">
            <summary>
              查找类似 &amp;Redo 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Remove_Page_Break">
            <summary>
              查找类似 Remove Page Break 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Reset_All_Page_Breaks">
            <summary>
              查找类似 Reset All Page &amp;Breaks 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Script">
            <summary>
              查找类似 Sc&amp;ript 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Script_Run_Function">
            <summary>
              查找类似 Run &amp;Function... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Script_Script_Editor">
            <summary>
              查找类似 Script &amp;Editor... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet">
            <summary>
              查找类似 &amp;Sheet 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Clear_Filter">
            <summary>
              查找类似 Clear Filter 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Filter">
            <summary>
              查找类似 &amp;Filter 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Group">
            <summary>
              查找类似 &amp;Group 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Group_Columns">
            <summary>
              查找类似 Group &amp;Columns 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Group_Rows">
            <summary>
              查找类似 Group &amp;Rows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Insert">
            <summary>
              查找类似 &amp;Insert 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Resize">
            <summary>
              查找类似 &amp;Resize... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Settings">
            <summary>
              查找类似 &amp;Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Ungroup">
            <summary>
              查找类似 Ungroup 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Ungroup_All_Columns">
            <summary>
              查找类似 All Columns 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Ungroup_All_Rows">
            <summary>
              查找类似 All Rows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Ungroup_Selection_Columns">
            <summary>
              查找类似 Selection Columns 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Sheet_Ungroup_Selection_Rows">
            <summary>
              查找类似 Selection Rows 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Tools">
            <summary>
              查找类似 &amp;Tools 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Tools_Control_Appearance">
            <summary>
              查找类似 Control &amp;Appearance... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Undo">
            <summary>
              查找类似 &amp;Undo 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Ungroup">
            <summary>
              查找类似 Ungroup 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Ungroup_All">
            <summary>
              查找类似 Ungroup All 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_Unhide">
            <summary>
              查找类似 &amp;Unhide 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View">
            <summary>
              查找类似 &amp;View 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Components">
            <summary>
              查找类似 &amp;Components 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Components_FormulaBar">
            <summary>
              查找类似 &amp;Formula Bar 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Components_StatusBar">
            <summary>
              查找类似 &amp;Status Bar 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Components_Toolbar">
            <summary>
              查找类似 &amp;Toolbar 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Cell">
            <summary>
              查找类似 &amp;Freeze To Cell 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges">
            <summary>
              查找类似 Freeze To &amp;Edges 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Bottom">
            <summary>
              查找类似 &amp;Bottom 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Bottom_Left">
            <summary>
              查找类似 Bottom Le&amp;ft 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Bottom_Right">
            <summary>
              查找类似 Bottom Ri&amp;ght 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Left">
            <summary>
              查找类似 &amp;Left 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Right">
            <summary>
              查找类似 Right 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Top">
            <summary>
              查找类似 &amp;Top 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Top_Left">
            <summary>
              查找类似 Top &amp;Left 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Freeze_To_Edges_Top_Right">
            <summary>
              查找类似 Top &amp;Right 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Unfreeze">
            <summary>
              查找类似 Unfreeze 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible">
            <summary>
              查找类似 &amp;Visible 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Column_Header">
            <summary>
              查找类似 &amp;Column Header 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Column_Outline_Panel">
            <summary>
              查找类似 Column Outline &amp;Panel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Forzen_Line">
            <summary>
              查找类似 &amp;Frozen Line 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Grid_Lines">
            <summary>
              查找类似 &amp;Grid Lines 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Horizontal_ScrollBar">
            <summary>
              查找类似 &amp;Horizontal Scrollbar 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Page_Breaks">
            <summary>
              查找类似 Page &amp;Breaks 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Row_Header">
            <summary>
              查找类似 &amp;Row Header 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Row_Outline_Panel">
            <summary>
              查找类似 Row &amp;Outline Panel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Sheet_Tab">
            <summary>
              查找类似 &amp;Sheet Tab 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Menu_View_Visible_Vertical_ScrollBar">
            <summary>
              查找类似 &amp;Vertical Scrollbar 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Create_Named_Range_Failed">
            <summary>
              查找类似 Cannot define named range by specified name. Make sure:
             The name does not begin with a number
             The name does not contain spaces or any invalid characters
             The name is not same as any address of cell and range
             The name is not same as any built-in function names 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Create_Named_Range_Failed_Title">
            <summary>
              查找类似 Define named range failed 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Delete_Named_Range_Confirm">
            <summary>
              查找类似 Are you sure to delete selected named range? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Delete_Named_Range_Confirm_Title">
            <summary>
              查找类似 Delete named range 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_File_Not_Found">
            <summary>
              查找类似 Specified file cannot be found:  的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Input_Name_Of_Range">
            <summary>
              查找类似 Please input the name of range. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Invalid_Address_Of_Range">
            <summary>
              查找类似 The address of range is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Load_File_Failed">
            <summary>
              查找类似 Loading file failed:  的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Load_Script_Prompt">
            <summary>
              查找类似 The document contains macro and executable script. Do you want to run the script now? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Load_Script_Prompt_Title">
            <summary>
              查找类似 Executable Script 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Named_Range_Overwrite">
            <summary>
              查找类似 Another range with this name has already existed, are you sure to overwrite it? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_No_Current_Worksheet">
            <summary>
              查找类似 No worksheet contained in workbook. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Only_RGF_Edit_XML">
            <summary>
              查找类似 XML edit only available when current file format is ReoGrid Format File (.rgf;*.xml). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Operation_Aborted">
            <summary>
              查找类似 Operation cannot be performed. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Outline_Already_Exist">
            <summary>
              查找类似 Another outline has already exists at same position. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Outline_Intersected">
            <summary>
              查找类似 The outline to be added intersects with another one. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Outline_Not_Found">
            <summary>
              查找类似 No outline found at specified position. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Outline_Out_Of_Range">
            <summary>
              查找类似 Invalid range to group row or columns. Make sure that the last row or column of worksheet not grouped into any outlines. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Outline_Too_Much">
            <summary>
              查找类似 Level of outlines reached the maximum number of levels (10). 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Range_Intersection_Exception">
            <summary>
              查找类似 Operation cannot be performed, range may contains a part of another merged cell. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Save_Changes">
            <summary>
              查找类似 Do you want to save changes? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Save_File_Immediately">
            <summary>
              查找类似 Editor will save current file, continue? 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Script_Not_Available">
            <summary>
              查找类似 Script execution is not supported by this edition. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Msg_Source_Code_Exported_Into_Clipboard">
            <summary>
              查找类似 code exported into Clipboard. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Name">
            <summary>
              查找类似 Name 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.NamedRangeManage_Caption">
            <summary>
              查找类似 Named Range Management 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.NamedRangeManage_Named_Ranges">
            <summary>
              查找类似 Named ranges: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.NamedRangeManage_New">
            <summary>
              查找类似 &amp;New... 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.NoColor">
            <summary>
              查找类似 No Color 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.None">
            <summary>
              查找类似 None 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Number">
            <summary>
              查找类似 Number 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Paging_Order">
            <summary>
              查找类似 Paging Order 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Paper">
            <summary>
              查找类似 Paper 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Percentage">
            <summary>
              查找类似 Percentage 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Pixel">
            <summary>
              查找类似 Pixel 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Portrait">
            <summary>
              查找类似 Portrait 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Adjust_To">
            <summary>
              查找类似 Adjust_To 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Caption">
            <summary>
              查找类似 Print Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Down_Then_Over">
            <summary>
              查找类似 Down, then over 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Orientation">
            <summary>
              查找类似 Orientation: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Over_Then_Down">
            <summary>
              查找类似 Over, then down 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Paper_Size">
            <summary>
              查找类似 Paper Size: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Percent_Normal_Size">
            <summary>
              查找类似 % normal size 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Setup">
            <summary>
              查找类似 &amp;Setup 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Show_Grid_Lines">
            <summary>
              查找类似 Show &amp;Grid Lines 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Show_Margins">
            <summary>
              查找类似 Show &amp;Margins 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.PrintSettings_Visible_Settings">
            <summary>
              查找类似 Visible Settings 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Protection">
            <summary>
              查找类似 Protection 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.ProtectionPage_Locked">
            <summary>
              查找类似 Locked (Read-only) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Resize_Caption">
            <summary>
              查找类似 Resize worksheet 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Resize_Columns">
            <summary>
              查找类似 &amp;Columns: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Resize_Columns_Remark">
            <summary>
              查找类似 (max: 32,768) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Resize_Rows">
            <summary>
              查找类似 &amp;Rows: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Resize_Rows_Remark">
            <summary>
              查找类似 (max: 1,048,576) 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Row">
            <summary>
              查找类似 Row 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.RunFunction_Caption">
            <summary>
              查找类似 Run Script Function 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.RunFunction_Close_This_Window_After_Running">
            <summary>
              查找类似 &amp;Close this window after running 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.RunFunction_Functions">
            <summary>
              查找类似 &amp;Functions: 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.RunFunction_Run">
            <summary>
              查找类似 &amp;Run 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Sample">
            <summary>
              查找类似 Sample 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Scaling">
            <summary>
              查找类似 Scaling 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.SetHeaderSize_Caption_Column">
            <summary>
              查找类似 Column width 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.SetHeaderSize_Caption_Row">
            <summary>
              查找类似 Row height 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.SolidColor">
            <summary>
              查找类似 Solid 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Style">
            <summary>
              查找类似 Style 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Text">
            <summary>
              查找类似 Text 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Untitled">
            <summary>
              查找类似 Untitled 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Vertical_Alignment_Bottom">
            <summary>
              查找类似 Bottom 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Vertical_Alignment_General">
            <summary>
              查找类似 General 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Vertical_Alignment_Middle">
            <summary>
              查找类似 Middle 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.LangResource.Vertical_Alignment_Top">
            <summary>
              查找类似 Top 的本地化字符串。
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ComparisonOperationType">
            <summary>
            Represents the operator type of conditional format and data validation.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.Between">
            <summary>
            Represents Between operator.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.Equal">
            <summary>
            Represents Equal operator.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.Greater">
            <summary>
            Represents GreaterThan.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.GreaterEqual">
            <summary>
            Represents Greater Or Equal operator.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.Less">
            <summary>
            Represents Less Than operator.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.LessEqual">
            <summary>
            Represents Lessthan Or Equal operator.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.NoComparision">
            <summary>
            Represents no comparision.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.NotBetween">
            <summary>
            Represents NotBetween.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ComparisonOperationType.NotEqual">
            <summary>
            Represents NotEqual operator of conditional format and data validation.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SpreadCell">
            <summary>
            Represents a spreadsheet cell. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Row">
            <summary>
            Get zero-based row index of this cell
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Column">
            <summary>
            Get zero-based column index of this cell
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Name">
            <summary>
            Gets cell name.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Location">
            <summary>
            Gets cell location.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.FormulaValue">
            <summary>
             Gets formula value of the cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Font">
            <summary>
            Gets or sets font of spread cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.FontColor">
            <summary>
            Gets or set font color of spread cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Protected">
            <summary>
            Indicates whether the cell is protected.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.SetCellValue(System.Object)">
            <summary>
            Sets cell value.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.IsFormula">
            <summary>
            Indicates the cell is a formula or not.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SpreadCell.worksheet">
            <summary>
            Instance of worksheet that the cell belongs to
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Worksheet">
            <summary>
            Get the worksheet that is the owner of this cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.#ctor(Spire.Spreadsheet.Forms.Worksheet,Spire.Xls.Core.Converter.Spreadsheet.Cell)">
            <summary>
            Construct cell instance with specified owner grid instance.
            Cell instance managed by ReoGrid core, it cannot be created by user-code.
            </summary>
            <param name="worksheet">Owner grid control for this cell</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Position">
            <summary>
            Get position of this cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.PositionAsRange">
            <summary>
            Get position as a range position which contains the cell rowspan and colspan.
            This property is useful when the cell is a merged cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Address">
            <summary>
            Get address string of this cell
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.DataFormat">
            <summary>
            Get or set the data format type
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.DataFormatArgs">
            <summary>
            Get or set the argument of data format type
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.InnerData">
            <summary>
            cell data
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Value">
            <summary>
            Get or set cell data
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.GetData``1">
            <summary>
            Get and convert data into specified type
            </summary>
            <typeparam name="T">Type try to convert</typeparam>
            <returns>Converted data in specified type</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Text">
            <summary>
            Get the text displayed in cell. Set <code>Data</code> property to change this text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.InnerFormula">
            <summary>
            cell formula
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Formula">
            <summary>
            Get or set the cell formula
            </summary>
            <returns>Formula of cell in string</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.HasFormula">
            <summary>
            Identify whether or not this cell contains the formula and the value has been evaluated
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.CFStyle">
            <summary>
            Get conditional formatting style.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Tag">
            <summary>
            Get or set the user data attaching to this cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.Body">
            <summary>
            Get or set the cell body.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.Clone">
            <summary>
            Clone this cell instance by copying its all of properties
            </summary>
            <returns>new cell instance copied from this cell</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.StartEdit">
            <summary>
            Start edit this cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.EndEdit">
            <summary>
            Finish edit this cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.ExpandRowHeight">
            <summary>
            Expand or shrink row height to fit the display text in this cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadCell.ExpandColumnWidth">
            <summary>
            Expand or shrink column width to fit the display text in this cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.IsMerged">
            <summary>
            Check whether this cell is merged cell
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.IsValidCell">
            <summary>
            Check whether or not this cell is an valid cell, only valid cells can be set data and styles.
            Cells merged by another cell will become invalid.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.InsideMergedRange">
            <summary>
            Check whether or not this cell is inside a merged range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.TextBounds">
            <summary>
            text boundary for display
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.RenderHorAlign">
            <summary>
            Horizontal alignement for display
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.RenderTextColumnSpan">
            <summary>
            Column span if text larger than the cell it inside
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.RenderColor">
            <summary>
            Get the render color of cell text. Render color is the final color that used to render the text on the worksheet.
            Whatever cell style with text color is specified, negative numbers may displayed as red.
            This property cannot be changed directly. 
            To change text color, set cell style with text color by call SetRangeStyles method, or change the Cell.Style.TextColor property.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadCell.RenderFont">
            <summary>
            Render font is the final font used to render text inside cell.
            Render font is scaled according to worksheet's scaling.
            Render font could be set to null, then it will be updated when cell was required to be rendered.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellElementFlag">
            <summary>
            Cell element flags
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellElementFlag.All">
            <summary>
            All elements
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellElementFlag.Data">
            <summary>
            Cell value
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellElementFlag.Formula">
            <summary>
            Cell formuals
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellElementFlag.Body">
            <summary>
            Cell body
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellElementFlag.DataFormat">
            <summary>
            Data format setting
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellElementFlag.Style">
            <summary>
            Styles
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellElementFlag.Border">
            <summary>
            Border around the cell
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Comment.Position">
            <summary>
            Get position of the comment.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Comment.PlainText">
            <summary>
            Gets or sets the text of the Comment. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Comment.Width">
            <summary>
            Get or set the width of the comment.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Comment.Height">
            <summary>
            Get or set the height of the comment. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Comment.Visible">
            <summary>
            Represents the visibility of a Comment.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Comment.GetPlainText">
            <summary>
            Get plain text of the comment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Comment.SetPlainText(System.String)">
            <summary>
            Set plain text of the comment.
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SortOrder">
            <summary>
            Sort order.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SortOrder.Ascending">
            <summary>
            Ascending
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SortOrder.Descending">
            <summary>
            Descending
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ColumnCollection">
            <summary>
            Column header collection
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnCollection.Item(System.Int32)">
            <summary>
            Get column header by zero-based index of number of column
            </summary>
            <param name="index">Zero-based number of column</param>
            <returns>Column header instance</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnCollection.Items">
            <summary>
            Gets item array in collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnCollection.Item(System.String)">
            <summary>
            Get column header by address code (e.g. A, B, Z)
            </summary>
            <param name="address">Address code to get column header</param>
            <returns>Column header instance</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the columns to an array.
            </summary>
            <param name="array">The array object.</param>
            <param name="index">The index of the first column to copy.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnCollection.Count">
            <summary>
            Gets the count of the columns.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnCollection.GetEnumerator">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnCollection.IsSynchronized">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnCollection.SyncRoot">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RowCollection">
            <summary>
            Row header collection
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowCollection.Items">
            <summary>
            Gets item array in collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowCollection.Item(System.Int32)">
            <summary>
            Gets a gridrow object at specified index.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RowCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the rows to an array.
            </summary>
            <param name="array">The array object.</param>
            <param name="index">The index of the first row to copy.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowCollection.Count">
            <summary>
            Gets the count of the rows.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RowCollection.GetEnumerator">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowCollection.IsSynchronized">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowCollection.SyncRoot">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RowColumnHeader">
            <summary>
            Represents a base class for header instances of worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowColumnHeader.Index">
            <summary>
            Zero-bsed number used to locate the header on worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowColumnHeader.Tag">
            <summary>
            Get or set user data.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowColumnHeader.DefaultCellBody">
            <summary>
            Get or set the default cell body type for all cells on this column.
            If this value is not null, when an new instance of cells on this column is created,
            the cell will have a body automatically that is the instance of the type specified by this value.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SpreadColumn">
            <summary>
            Represents a column header on worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.Left">
            <summary>
            Get the left position of this column header. (in pixel)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.Width">
            <summary>
            Get or set the width of this column header. (in pixel)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.Index">
            <summary>
            Get the number of column. (index cannot be changed, it managed by grid control)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.Text">
            <summary>
            Get or set the text of column header.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.Right">
            <summary>
            Get the right position of column header. (in pixel)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.Style">
            <summary>
            Gets style of the column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.Font">
            <summary>
            Get or set font of the row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.FontColor">
            <summary>
            Get or set font color of the row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.IsAutoWidth">
            <summary>
            Get or set whether or not to auto adjust the width of this column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadColumn.TextColor">
            <summary>
            Get or set color for display the header text on spreadsheet.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.SpreadColumn.WidthChanged">
            <summary>
            Event raised when width changed of this column.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadColumn.AddButtonControl(System.Int32,System.Int32,System.String)">
            <summary>
            Add a button to the column.
            </summary>
            <param name="width">Width of button.</param>
            <param name="height">Height of button.</param>
            <param name="caption">Caption.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadColumn.AddCheckBox">
            <summary>
            Add a checkbox.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadColumn.AddComboBoxControl(System.Collections.IList)">
            <summary>
            Add a combobox.
            </summary>
            <param name="items">The list item.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadColumn.RemoveOleControl">
            <summary>
            Remove the control from the column.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SpreadRow">
            <summary>
            Represents a row header instance of worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.Top">
            <summary>
            Get the top position of header. (in pixel)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.Height">
            <summary>
            Get or set height of row. (in pixel)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.Bottom">
            <summary>
            Get the bottom position of header. (in pixel)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.Index">
            <summary>
            Get the number of row. (index cannot be changed, it managed by grid control)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.Text">
            <summary>
            Get or set display text for the row header.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.HeaderTextColor">
            <summary>
            Get or set the color that is used to display the header text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.Font">
            <summary>
            Get or set font of the row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.FontColor">
            <summary>
            Get or set font color of the row.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SpreadRow.GetFontColor">
            <summary>
            Get font color of row.
            </summary>
            <returns>Font color of row.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SpreadRow.IsAutoHeight">
            <summary>
            Get or set whether or not allow to automatically adjust the height in order to fit the largest cell.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.SpreadRow.HeightChanged">
            <summary>
            Event raised when width changed of this column.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RowOrColumn">
            <summary>
            Flag to decide which orientation will be handled
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.RowOrColumn.Row">
            <summary>
            Row orientation
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.RowOrColumn.Column">
            <summary>
            Column orientation
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.RowOrColumn.Both">
            <summary>
            Both row and column (some approaches do not work with 'Both')
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1">
            <summary>
            Outline Collection for both Row and Column Outline.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1.#ctor">
            <summary>
            Only allowed to create instance by Spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1.Reset">
            <summary>
            Clear all outlines, reset to default status.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1.IterateOutlines(Spire.Spreadsheet.Forms.Outline.CollectionIterateOutlinesHandler)">
            <summary>
            Iterate over the all outlines
            </summary>
            <param name="iterator">iterator callback function</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1.IterateReverseOutlines(Spire.Spreadsheet.Forms.Outline.CollectionIterateOutlinesHandler)">
            <summary>
            Reverse iterate over the all outlines
            </summary>
            <param name="iterator"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1.HasSame(Spire.Spreadsheet.Forms.Outline.IGroupOutline,System.Collections.Generic.IList{Spire.Spreadsheet.Forms.Outline.IGroupOutline})">
            <summary>
            Check whether there is same outline exist
            </summary>
            <param name="target">Outline used to find</param>
            <param name="exclusions">Outline in this list will not be compare</param>
            <returns>true if there is another same as target</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1.HasOutlines">
            <summary>
            Determine whether any outlines existed in this collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.OutlineCollection`1.OutlineCount">
            <summary>
            Get number of outlines.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.IGroupOutline">
            <summary>
            Represents the interface of row or column outline.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.IGroupOutline.Start">
            <summary>
            Start position of outline.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.IGroupOutline.Count">
            <summary>
            Number of rows or columns in this outline.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.IGroupOutline.End">
            <summary>
            End position of outline
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.IGroupOutline.Collapse">
            <summary>
            Collapse this outline. (Hide all the cells which are contained by this outline)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.IGroupOutline.Expand">
            <summary>
            Expand this outline. (Show all the cells which are contained by this outline)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.IGroupOutline.Collapsed">
            <summary>
            Determine whether current outline is collapsed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.IGroupOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.IGroupOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.IGroupOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.IGroupOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.OutlineGroup`1">
            <summary>
            Outline group for both Row and Column Outline.
            </summary>
            <typeparam name="T">Outline define type, must be IReoGridOutline</typeparam>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineGroup`1.#ctor">
            <summary>
            Only allowed to create instance by Spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.OutlineGroup`1.NumberButtonBounds">
            <summary>
            Number Button Rectangle.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineGroup`1.CollapseAll">
            <summary>
            Collapse all outlines inside this group.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineGroup`1.ExpandAll">
            <summary>
            Expand all outlines inside this group.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.GroupOutline">
            <summary>
            Outline instance for both Row and Column Outline.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.GroupOutline.sheet">
            <summary>
            instance of Spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.GroupOutline.Start">
            <summary>
            Outline start index. (either number of row or number of column)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.GroupOutline.Count">
            <summary>
            Outline number of count. (either number of rows or number of columns)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.GroupOutline.End">
            <summary>
            Outline end index. (either number of row or number of column)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.GroupOutline.InternalCollapsed">
            <summary>
            Internal flag to determine whether this outline is collapsed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.GroupOutline.Collapsed">
            <summary>
            Check whether current outline is collapsed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.GroupOutline.Contains(Spire.Spreadsheet.Forms.Outline.GroupOutline)">
            <summary>
            Determine whether specified outline is contained entirely by this outline.
            </summary>
            <param name="outline">The outline to be tested.</param>
            <returns>True if another outline is contained by this outline; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.GroupOutline.Contains(System.Int32)">
            <summary>
            Determine whether specified index is contained by this outline.
            </summary>
            <param name="index">index to be tested.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.GroupOutline.IntersectWith(Spire.Spreadsheet.Forms.Outline.GroupOutline)">
            <summary>
            Determine whether specified outline is intersected with this outline.
            </summary>
            <param name="outline">Outline to be tested.</param>
            <returns>True if the specified outline is intersected with this outline.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.GroupOutline.IntersectWith(System.Int32,System.Int32)">
            <summary>
            Determine whether specified range is intersected with this outline.
            </summary>
            <param name="start">Start index. (either number of row or number of column)</param>
            <param name="count">Number of count. (either number of rows or number of columns)</param>
            <returns>True if the specified outline is intersected with this outline.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.GroupOutline.Collapse">
            <summary>
            Collapse specified outline.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.GroupOutline.Expand">
            <summary>
            Expand specified outline.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.GroupOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.GroupOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.GroupOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.GroupOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.OutlineCollectionProperty`1">
            <summary>
            Outline collection property
            </summary>
            <typeparam name="T">Row or column outline instance type</typeparam>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollectionProperty`1.AddOutline(System.Int32,System.Int32)">
            <summary>
            Add outline on worksheet.
            </summary>
            <param name="start">Zero-based start position to add outline.</param>
            <param name="count">Number of rows or columns to be added into outline.</param>
            <returns>Instance of new outline.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollectionProperty`1.RemoveOutline(System.Int32,System.Int32)">
            <summary>
            Remove outline from worksheet.
            </summary>
            <param name="start">Zero-based start position to add outline.</param>
            <param name="count">Number of rows or columns exist in the outline.</param>
            <returns>Instance of removed outline.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.OutlineCollectionProperty`1.Item(System.Int32,System.Int32)">
            <summary>
            Get outline by specified position. (start position and number of rows or columns)
            </summary>
            <param name="start">Zero-based start position to find outline.</param>
            <param name="count">Number of rows or columns that is contained in target outline.</param>
            <returns>Instance of outline</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollectionProperty`1.GetEnumerator">
            <summary>
            Get enumerator of outline collection.
            </summary>
            <returns>Enumerator of outline collection.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineCollectionProperty`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get enumerator of outline collection.
            </summary>
            <returns>Enumerator of outline collection.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.RowOutline">
            <summary>
            Represents instance of row outline.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.RowOutline.Collapse">
            <summary>
            Collapse outline
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.RowOutline.Expand">
            <summary>
            Expand outline
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.RowOutline.Top">
            <summary>
            Get or set the number of row (Same as Start property)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.RowOutline.Rows">
            <summary>
            Get or set the number of rows (Same as Count property)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.RowOutline.Bottom">
            <summary>
            Get the number of end row (Same as End property - 1)
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.RowOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.RowOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.RowOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.RowOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.ColumnOutline">
            <summary>
            Represents instance of column outline.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.ColumnOutline.Collapse">
            <summary>
            Collapse outline
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.ColumnOutline.Expand">
            <summary>
            Expand outline
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.ColumnOutline.Left">
            <summary>
            Get or set the number of column (Same as Start property)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.ColumnOutline.Cols">
            <summary>
            Get or set the number of columns (Same as Count property)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.ColumnOutline.Right">
            <summary>
            Get the number of end column (Same as End property)
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.ColumnOutline.BeforeCollapse">
            <summary>
            Event is raised before this outline collapse
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.ColumnOutline.AfterCollapse">
            <summary>
            Event is raised after this outline collapse
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.ColumnOutline.BeforeExpand">
            <summary>
            Event is raised before this outline expanding
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Outline.ColumnOutline.AfterExpand">
            <summary>
            Event is raised after this outline expanding
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.OutlineEventArgs">
            <summary>
            Common outline event argument.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.OutlineEventArgs.Outline">
            <summary>
            Outline instance for both row and column outline.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineEventArgs.#ctor(Spire.Spreadsheet.Forms.Outline.IGroupOutline)">
            <summary>
            Create outline event argument with specified outline instance.
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.OutlineAddedEventArgs">
            <summary>
            Event raised when outline has been added into spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineAddedEventArgs.#ctor(Spire.Spreadsheet.Forms.Outline.IGroupOutline)">
            <summary>
            Create outline event argument with specified outline instance.
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.OutlineRemovedEventArgs">
            <summary>
            Event raised when outline has been removed into spreadsheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.OutlineRemovedEventArgs.#ctor(Spire.Spreadsheet.Forms.Outline.IGroupOutline)">
            <summary>
            Create outline event argument with specified outline instance.
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.BeforeOutlineCollapseEventArgs">
            <summary>
            Event raised before outline collapsing.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.BeforeOutlineCollapseEventArgs.#ctor(Spire.Spreadsheet.Forms.Outline.IGroupOutline)">
            <summary>
            Create outline event argument with specified outline instance.
            </summary>
            <param name="outline">instance of either row or column outline</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.BeforeOutlineCollapseEventArgs.IsCancelled">
            <summary>
            Get or set whether or not to abort current operation.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.BeforeOutlineExpandingEventArgs">
            <summary>
            Event raised before outline expanding.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.BeforeOutlineExpandingEventArgs.#ctor(Spire.Spreadsheet.Forms.Outline.IGroupOutline)">
            <summary>
            Create event arguments instance.
            </summary>
            <param name="outline"></param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Outline.BeforeOutlineExpandingEventArgs.IsCancelled">
            <summary>
            Get or set whether or not to abort current operation.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.AfterOutlineCollapseEventArgs">
            <summary>
            Event raised after outline collapsing.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.AfterOutlineCollapseEventArgs.#ctor(Spire.Spreadsheet.Forms.Outline.IGroupOutline)">
            <summary>
            Create event arguments instance.
            </summary>
            <param name="outline">The outline has been collapsed.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Outline.AfterOutlineExpandingEventArgs">
            <summary>
            Event raised after outline expanding.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Outline.AfterOutlineExpandingEventArgs.#ctor(Spire.Spreadsheet.Forms.Outline.IGroupOutline)">
            <summary>
            Create event arguments instance.
            </summary>
            <param name="outline">The outline has been expanded.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PartialGridCopyFlag">
            <summary>
            Partial spreadsheet copy operation flag
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.All">
            <summary>
            All content will be processed
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.CellAll">
            <summary>
            Cell value and cell styles will be processed (CellData | CellFormula | CellFormat | CellStyle)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.CellData">
            <summary>
            Copy cells data.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.CellFormula">
            <summary>
            Copy cells formula.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.CellFormat">
            <summary>
            Copy cells data format.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.CellStyle">
            <summary>
            Copy cells style.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.BorderAll">
            <summary>
            Copy all borders. (HBorder | VBorder)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.HBorder">
            <summary>
            Only horizontal borders will be processed
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PartialGridCopyFlag.VBorder">
            <summary>
            Only vertical borders will be processed
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ExPartialGridCopyFlag.BorderOutsideOwner">
            <summary>
            Copy all borders that around the cells (ignores border's owner property)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PartialGrid">
            <summary>
            Partial grid contains the cells and borders, including the data and styles from 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PartialGrid.Rows">
            <summary>
            Number of rows in this partial grid
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PartialGrid.Columns">
            <summary>
            Number of columns in this partial grid
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PartialGrid.#ctor">
            <summary>
            Create an empty partial grid without and data, borders and styles
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PartialGrid.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an empty partial grid with specified capacity
            </summary>
            <param name="initRows">capacity of rows</param>
            <param name="initCols">capacity of cols</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PartialGrid.#ctor(System.Object[0:,0:])">
            <summary>
            Create grid with specified data
            </summary>
            <param name="data">data to fill this partial grid</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PartialGrid.Equals(System.Object)">
            <summary>
            Compare this partial grid to another object
            </summary>
            <param name="obj">object to be compared</param>
            <returns>true if the object is same as this partial grid, otherwise false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PartialGrid.Equals(Spire.Spreadsheet.Forms.PartialGrid,Spire.Spreadsheet.Forms.PartialGridCopyFlag)">
            <summary>
            Compare this partial grid to another grid with specified comparison flag
            </summary>
            <param name="anotherPartialGrid">another partial grid to be compared</param>
            <param name="flag">comparison flag</param>
            <returns>true if two partial grid are same, otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PartialGrid.GetHashCode">
            <summary>
            Get hash code of this prtail grid object
            </summary>
            <returns>generated hash code</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ISheetAddress">
            <summary>
            Absolute address interface reference to a cell or range on spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISheetAddress.Address">
            <summary>
            Convert into address identifier.
            </summary>
            <returns>Address identifier in string.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISheetAddress.RelativeAddress">
            <summary>
            Convert into relative address identifier.
            </summary>
            <returns>Address identifier in string.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISheetAddress.AbsoluteAddress">
            <summary>
            Convert into absolute address identifier.
            </summary>
            <returns>Address identifier in string.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.IRowRange">
            <summary>
            Interface that represents a range of row on worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IRowRange.Top">
            <summary>
            Get or set the number of row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IRowRange.Rows">
            <summary>
            Get or set the number of rows in this range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IRowRange.Bottom">
            <summary>
            Get the number of last row in this range
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.IColumnRange">
            <summary>
            Interface to represents a range of column on worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IColumnRange.Left">
            <summary>
            Get or set the number of col.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IColumnRange.Cols">
            <summary>
            Get or set the number of rows in this range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IColumnRange.Right">
            <summary>
            Get the number of last column in this range.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.IRange">
            <summary>
            Interface that represents a range location on worksheet. (Combine from IRowRange and IColumnRange)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellAdressInfo">
            <summary>
            Represents a cell position on worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAdressInfo.Row">
            <summary>
            Gets or sets the row of the cell position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAdressInfo.Column">
            <summary>
            Gets or sets the column of the cell position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAdressInfo.RowProperty">
            <summary>
            Determines the property (Absolute or Relative) for row position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAdressInfo.ColumnProperty">
            <summary>
            Determines the property (Absolute or Relative) for column position.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Create position with specified number of row and number of column.
            </summary>
            <param name="row">Zero-based number of row.</param>
            <param name="col">Zero-based number of column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.#ctor(System.String)">
            <summary>
            Create instance with alphabet code of position. (e.g. new CellPosition("A10"))
            </summary>
            <param name="address">an address string to locate the cell in spreadsheet. (e.g. 'A10')</param>
            <exception cref="T:System.ArgumentException">if address is not in correct format.</exception>
            <example>var pos = new CellPosition("A10");</example>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.ToString">
            <summary>
            Convert position to address string.
            </summary>
            <returns>String of this position.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAdressInfo.Address">
            <summary>
            Convert position into relative address string. (format: A1)
            </summary>
            <returns>Related address in string.</returns>
            <seealso cref="M:Spire.Spreadsheet.Forms.CellAdressInfo.AbsoluteAddress"/>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.AbsoluteAddress">
            <summary>
            Convert position into absolute address string. (format: $A$1)
            </summary>
            <returns>Absolute address in string</returns>
            <seealso cref="P:Spire.Spreadsheet.Forms.CellAdressInfo.Address"/>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.IsValidAddress(System.String)">
            <summary>
            Check whether or not the specified string is valid address descriptor.
            </summary>
            <param name="address">address descriptor as string to be checked.</param>
            <returns>true if specified address is valid, otherwise returning false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.Equals(System.Object)">
            <summary>
            Compare this position to another object
            </summary>
            <param name="obj">object to be compared</param>
            <returns>true if this position is same as the specified object, otherwise false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.Equals(System.Int32,System.Int32)">
            <summary>
            Compare this position to specified number of row and number of column
            </summary>
            <param name="row">number of row to be compared</param>
            <param name="col">number of column to be compared</param>
            <returns>true if position is same to specified number of row and number of column</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.Equals(System.String)">
            <summary>
            Compare position to specified address descriptor 
            </summary>
            <param name="address">address descriptor to be compared</param>
            <returns>true if position is same as the specified address descriptor, otherwise false if not</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.op_Equality(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Compare this position to another position, return true if two positions are same.
            </summary>
            <param name="r1">this position to be compared</param>
            <param name="r2">another position to be compared</param>
            <returns>true if two positions are same, otherwise false if not</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.op_Inequality(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Compare this position to another position, return true if two positions are different.
            </summary>
            <param name="r1">this position to be compared</param>
            <param name="r2">another position to be compared</param>
            <returns>true if two positions are different, otherwise false if not</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.Equals(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Compare two position.
            </summary>
            <param name="pos1">first position to be compared.</param>
            <param name="pos2">second position to be compared.</param>
            <returns>true if two positions are same, otherwise false if two positions are different.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.Equals(Spire.Spreadsheet.Forms.CellAdressInfo,System.Int32,System.Int32)">
            <summary>
            Compare a position to specified number of row and number of column.
            </summary>
            <param name="pos">position to be compared.</param>
            <param name="row">number of row of another position to be compared.</param>
            <param name="col">number of column of another position to be compared.</param>
            <returns>true if the position is same as specified number of row and number of column.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.GetHashCode">
            <summary>
            Get hash code of this position.
            </summary>
            <returns>generated hash code</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.Offset(System.Int32,System.Int32)">
            <summary>
            Offset by specified rows and columns.
            </summary>
            <param name="rows">Number of rows to offset.</param>
            <param name="cols">Number of columns to offset.</param>
            <returns>Position after offset.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.op_Addition(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Offset pos1 by number of rows and columns that is specified in pos2. (Same as method Offset)
            </summary>
            <param name="pos1">Position to be offset.</param>
            <param name="pos2">Position indicates that how many rows and columns to offset.</param>
            <returns>Position after offset.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAdressInfo.op_Subtraction(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Offset pos1 by number of rows and columns that is specified in pos2. (Same as method Offset)
            </summary>
            <param name="pos1">Position to be offset.</param>
            <param name="pos2">Position indicates that how many rows and columns to offset.</param>
            <returns>Position after offset.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellRangeInfo">
            <summary>
            Define a range on spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.Worksheet">
            <summary>
            Gets worksheet object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.Top">
            <summary>
            The start row of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.Left">
            <summary>
            The start column of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.Rows">
            <summary>
            Rows of range. (minimum is 1)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.Cols">
            <summary>
            Columns of range. (minimum is 1)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.Bottom">
            <summary>
            Then end row of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.Right">
            <summary>
            The end column of range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.StartPos">
            <summary>
            The start location of range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.EndPos">
            <summary>
            The end location of range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.StartRowProperty">
            <summary>
            Get or set the property of start row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.StartColumnProperty">
            <summary>
            Get or set the property of start column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.EndRowProperty">
            <summary>
            Get or set the property of end row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.EndColumnProperty">
            <summary>
            Get or set the property of end column.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.#ctor(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Create range position by specify the top left and bottom right cell position.
            </summary>
            <param name="startPos">Top left cell position to create range position.</param>
            <param name="endPos">Bottom right cell position to create range position.</param>
            <exception cref="T:System.ArgumentException">Throw when specified address is invalid.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.#ctor(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Create range position which contains single cell position.
            </summary>
            <param name="singlePos">Cell position used to create range position.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new CellrangeInfo object.
            </summary>
            <param name="top">Top Row index.</param>
            <param name="left">Left Column index.</param>
            <param name="bottom">Bottom Row index.</param>
            <param name="right">Right Column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.NewRangePosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create range position instance from specified coordinates. 
            This method finds and uses the minimum and maximum row and column automatically.
            </summary>
            <param name="startRow">Number of row.</param>
            <param name="startColumn">Number of column.</param>
            <param name="endRow">Number of end row.</param>
            <param name="endColumn">Number of end column.</param>
            <returns>Range created from two cell positions.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.#ctor(System.String,System.String)">
            <summary>
            Create range position by specified two cell addresses. (Top left and bottom right) 
            </summary>
            <param name="startCell">Address at top left of range.</param>
            <param name="endCell">Address at bottom right of range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.#ctor(System.String,Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Initializes a new CellRangeInfo object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.#ctor(System.String)">
            <summary>
            Create range position from a range or cell address.
            </summary>
            <param name="rangeName">Address to locate the range position.</param>
            <exception cref="T:System.ArgumentException">Throw when specified address is invalid.</exception>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Equals(System.Object)">
            <summary>
            Check for whether or not specified object is same as this range.
            </summary>
            <param name="obj">target range to be checked.</param>
            <returns>true if two ranges are same, otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.op_Equality(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Compare whether or not specified two ranges are same.
            </summary>
            <param name="r1">first range to be compared.</param>
            <param name="r2">second range to be compared.</param>
            <returns>true if two ranges are same, false if ranges are not same.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.op_Inequality(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Compare whether or not specified two ranges are same.
            </summary>
            <param name="r1">first range to be compared.</param>
            <param name="r2">second range to be compared.</param>
            <returns>true if two ranges are not same, false if ranges are same.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.GetHashCode">
            <summary>
            Calculate hash code for this range.
            </summary>
            <returns>hash code calculated for this range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Contains(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Check whether the position is contained by this range.
            </summary>
            <param name="pos">Position to be checked.</param>
            <returns>true if the position is contained by this range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Contains(System.Int32,System.Int32)">
            <summary>
            Check whether the position specified by row and col is contained by this range.
            </summary>
            <param name="row">row of position.</param>
            <param name="col">col of position.</param>
            <returns>true if position is contained by this range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Contains(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Copmpare another range and check whether or not the range is contained by this range.
            </summary>
            <param name="range">Another range to be checked.</param>
            <returns>True if the specified range is contained by this range; otherwise false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.ContainsRow(System.Int32)">
            <summary>
            Check whether the spcified row is contained by this range.
            </summary>
            <param name="row">zero-based index of row to be checked.</param>
            <returns>true if specified row is contained by this range; otherwise false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.ContainsColumn(System.Int32)">
            <summary>
            Check whether the specified column is contained by this range.
            </summary>
            <param name="col">zero-based index of column to be checked.</param>
            <returns>true if specified column is contained by this range; otherwise false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.IntersectWith(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether or not specified range is intersected with current range.
            </summary>
            <param name="range">another range to be checked.</param>
            <returns>true if specified range is intersected with current range; otherwise false.</returns>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellRangeInfo.Empty">
            <summary>
            Empty range constant define.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.CellRangeInfo.Null">
            <summary>
            Entire range constant define.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.IsEmpty">
            <summary>
            Return whether or not current range is empty. (Both Rows and Columns is zero)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.IsNull">
            <summary>
            Check whether or not this range contains whole rows and columns.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.RelativeAddress">
            <summary>
            Convert range into address string A1:B1 style.
            </summary>
            <returns>Address string converted from range position.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.AbsoluteAddress">
            <summary>
            Convert into absolute address.
            </summary>
            <returns>absolute address identifier.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.ToStringSpans">
            <summary>
            Convert range into string in span style. (4R x 3C)
            </summary>
            <returns>converted string of span style.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Copy(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Copies from another CellRange object.
            </summary>
            <param name="cellRange">The CellRange object to copy from.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.InsertRows(System.Int32,System.Int32)">
            <summary>
            Insert rows
            </summary>
            <param name="rowIndex">row index.</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.InsertColumns(System.Int32,System.Int32)">
            <summary>
            Inserts columns.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.IntersectRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Get inasect range.
            </summary>
            <param name="rangeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.IntersectRange(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Get intasect range.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Offset(System.Int32,System.Int32)">
            <summary>
            Offset range by specified number of rows and cols.
            </summary>
            <param name="rows">rows to be offseted.</param>
            <param name="cols">cols to be offseted.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.IsValidAddress(System.String)">
            <summary>
            Check whether the string is a valid address in current spreadsheet.
            </summary>
            <param name="address">address to be checked.</param>
            <returns>true if address is valid.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellRangeInfo.IsSingleCell">
            <summary>
            Identify whether this range only contains one single cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.SetRows(System.Int32)">
            <summary>
            Set number of rows.
            </summary>
            <param name="rows">Number of rows.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.SetCols(System.Int32)">
            <summary>
            Set number of columns.
            </summary>
            <param name="cols">Number of columns.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Sort(Spire.Spreadsheet.Forms.SortOrder[],Spire.Spreadsheet.Forms.SortOrientation,System.Boolean)">
            <summary>
            Sort data in this range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellRangeInfo.Sort(System.Int32[],Spire.Spreadsheet.Forms.SortOrder[],Spire.Spreadsheet.Forms.SortOrientation,System.Boolean)">
            <summary>
            Sort data in this range.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PositionProperty">
            <summary>
            Represents the range or cell position properties.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PositionProperty.Relative">
            <summary>
            Relative address for cell or range position.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PositionProperty.Absolute">
            <summary>
            Absolute address for cell or range position.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Page.PrintPageOrder">
            <summary>
            Paging order decide print each pages in what order
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PrintPageOrder.DownThenOver">
            <summary>
            First down, then over (Vertical Paging) (Default)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PrintPageOrder.OverThenDown">
            <summary>
            First over, then down (Horizontal Paging)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Page.PaperSize">
            <summary>
            Perdefiend paper size
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.Paper10x14">
            <summary>
            Represents paper size of 10 inches X 14 inches 
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.Paper11x17">
             <summary>
            Represents paper size of 11 inches X 17 inches 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperA3">
             <summary>
            Represents A3 (297 mm x  420 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperA4">
             <summary>
            Represents A4 (210 mm x  297 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperA4Small">
             <summary>
            Represents A4 Small (210 mm x  297 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperA5">
             <summary>
            Represents A5 (148 mm x  210 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperB4">
             <summary>
            Represents B4 (250 mm x  353 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperB5">
             <summary>
            Represents B5 (176 mm x  250 mm) paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperCSheet">
             <summary>
            Represents C paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperDSheet">
             <summary>
            Represents D paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelope10">
             <summary>
            Represents Envelope# 10 paper size(4-1/8 X 9-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelope11">
             <summary>
            Represents Envelope# 11 paper size( (4-1/2 X 10-3/8 inches). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelope12">
             <summary>
            Represents Envelope# 12 paper size(4-3/4 X 11 inches). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelope14">
             <summary>
            Represents Envelope# 14 paper size(5 X 11-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelope9">
             <summary>
            Represents Envelope# 9 paper size(3-7/8  X 8-7/8 inches). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeB4">
             <summary>
            Represents B4 Envelope paper size (250 mm x 353 mm).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeB5">
             <summary>
            Represents B5 Envelope paper size (176 mm x 250 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeB6">
             <summary>
            Represents B6 Envelope paper size (176 mm x 125 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeC3">
             <summary>
            Represents C3 Envelope paper size (324 mm x 458 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeC4">
             <summary>
            Represents C4 Envelope paper size (229 mm x 324 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeC5">
             <summary>
            Represents C5 Envelope paper size (162 mm x 229 mm).  
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeC6">
             <summary>
            Represents C6 Envelope paper size (114 mm x 162 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeC65">
             <summary>
            Represents C65 Envelope paper size (114 mm x 229 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeDL">
             <summary>
            Represents DL Envelope paper size (110 mm x 220 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeItaly">
             <summary>
            Represents Italy Envelope paper size (110 mm x 230 mm). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopeMonarch">
             <summary>
            Represents Monarch Envelope paper size (3-7/8  X 7-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEnvelopePersonal">
             <summary>
            Represents Personal Envelope paper size (3-5/8  X 6-1/2 inches). 
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperEsheet">
             <summary>
            Represents E paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperExecutive">
             <summary>
            Represents Executive paper size (7-1/2  X 10-1/2 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperFanfoldLegalGerman">
             <summary>
            Represents German Fanfold paper size (8-1/2  X 13 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperFanfoldStdGerman">
             <summary>
            Represents German Standard Fanfold paper size (8-1/2  X 12 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperFanfoldUS">
             <summary>
            Represents U.S. Standard Fanfold  paper size (14-7/8  X 11 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperFolio">
             <summary>
            Represents Folio paper size (8-1/2  X 13 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperLedger">
             <summary>
            Represents Ledger paper size (17  X 11 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperLegal">
             <summary>
            Represents Legal paper size (8-1/2  X 14 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperLetter">
             <summary>
            Represents Letter paper size (8-1/2  X 11 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperLetterSmall">
             <summary>
            Represents Letter Small paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperNote">
             <summary>
            Represents Note paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperQuarto">
             <summary>
            Represents Quarto paper size(215 mm x 275 mm).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperStatement">
             <summary>
            Represents Statement paper size(5-1/2  X 8-1/2 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperTabloid">
             <summary>
            Represents Tabloid paper size(11 X 17 inches).
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.PaperUser">
             <summary>
            Represents User paper size.
             </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.ISOB4">
            <summary>
            Represents ISO B4 paper size(250 mm by 353 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.JapaneseDoublePostcard">
            <summary>
            Represents Japanese double postcard(200 mm by 148 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.StandardPaper9By11">
            <summary>
            Represents Standard paper(9 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.StandardPaper10By11">
            <summary>
            Represents Standard paper(10 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.StandardPaper15By11">
            <summary>
            Represents Standard paper(15 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.InviteEnvelope">
            <summary>
            Represents Invite envelope (220 mm by 220 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.LetterExtraPaper9275By12">
            <summary>
            Represents Letter extra paper (9.275 in. by 12 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.LegalExtraPaper9275By15">
            <summary>
            Represents Legal extra paper (9.275 in. by 15 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.TabloidExtraPaper">
            <summary>
            Represents Tabloid extra paper (11.69 in. by 18 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A4ExtraPaper">
            <summary>
            Represents A4 extra paper (236 mm by 322 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.LetterTransversePaper">
            <summary>
            Represents Letter transverse paper (8.275 in. by 11 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A4TransversePaper">
            <summary>
            Represents A4 transverse paper (210 mm by 297 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.LetterExtraTransversePaper">
            <summary>
            Represents Letter extra transverse paper (9.275 in. by 12 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.SuperASuperAA4Paper">
            <summary>
            Represents SuperA/SuperA/A4 paper (227 mm by 356 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.SuperBSuperBA3Paper">
            <summary>
            Represents SuperB/SuperB/A3 paper (305 mm by 487 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.LetterPlusPaper">
            <summary>
            Represents Letter plus paper (8.5 in. by 12.69 in.).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A4PlusPaper">
            <summary>
            Represents A4 plus paper (210 mm by 330 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A5TransversePaper">
            <summary>
            Represents A5 transverse paper (148 mm by 210 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.JISB5TransversePaper">
            <summary>
            Represents JIS B5 transverse paper (182 mm by 257 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A3ExtraPaper">
            <summary>
            Represents A3 extra paper (322 mm by 445 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A5ExtraPpaper">
            <summary>
            Represents A5 extra paper (174 mm by 235 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.ISOB5ExtraPaper">
            <summary>
            Represents ISO B5 extra paper (201 mm by 276 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A2Paper">
            <summary>
            Represents A2 paper (420 mm by 594 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A3TransversePaper">
            <summary>
            Represents A3 transverse paper (297 mm by 420 mm).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Page.PaperSize.A3ExtraTransversePaper">
            <summary>
            Represents A3 extra transverse paper (322 mm by 445 mm).
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Page.PageSetup">
            <summary>
            Print settings for spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.PrintArea">
            <summary>
            Determine the print area range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.PageOrder">
            <summary>
            Determine the orientation to output the print pages.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.PrintGridlines">
            <summary>
            Determines whether or not print grid lines.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.PageScaling">
            <summary>
            Scale factor for printing each pages (0.1f - 4f).
            This property might be changed by adjusting the break lines automatically.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.PaperSize">
            <summary>
            Get or set the name of this paper type.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.Landscape">
            <summary>
            Determine the paper orientation (landscape or portrait).
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.PaperWidth">
            <summary>
            Get or set the width of the paper, in hundredths of an inch. (only available when PaperSize is custom)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.PaperHeight">
            <summary>
            Get or set the height of the paper, in hundredths of an inch. (only available when PaperSize is custom)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageSetup.Margins">
            <summary>
            Get or set the paper margins.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Page.PageSetup.#ctor(Spire.Xls.Core.Converter.Spreadsheet.PageSetup.PageSetup)">
            <summary>
            Construct print settings instance.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Page.PageMargins">
            <summary>
            Page margin values (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageMargins.Top">
            <summary>
            Get or set top margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageMargins.Bottom">
            <summary>
            Get or set bottom margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageMargins.Left">
            <summary>
            Get or set left margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageMargins.Right">
            <summary>
            Get or set right margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageMargins.Header">
            <summary>
            Get or set header margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Page.PageMargins.Footer">
            <summary>
            Get or set footer margin (in hundredths of an inch)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Page.PageMargins.#ctor(Spire.Xls.Core.Converter.Spreadsheet.PageSetup.PageSetup)">
            <summary>
            Create and set all values with same value.
            </summary>
            <param name="all">Value applied to all margins.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RowPageBreakCollection">
            <summary>
            Collection of row page-break indexes
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RowPageBreakCollection.Add(System.Int32)">
            <summary>
            Insert a new index
            </summary>
            <param name="rowIndex">row index to be inserted</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RowPageBreakCollection.Clear">
            <summary>
            Clear all row break indexes
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RowPageBreakCollection.Contains(System.Int32)">
            <summary>
            Check whether or not the specified index is contained in current collection
            </summary>
            <param name="rowIndex">row index to be checked</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowPageBreakCollection.Count">
            <summary>
            Get the number of elements
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RowPageBreakCollection.Remove(System.Int32)">
            <summary>
            Remove element by specified index
            </summary>
            <param name="rowIndex">Row index to be removed</param>
            <returns>True if element was found and removed successfully</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowPageBreakCollection.Item(System.Int32)">
            <summary>
            Get or set page-break by zero-based index
            </summary>
            <param name="index">Index to get page-break index</param>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ColumnPageBreakCollection">
            <summary>
            Collection of column page break indexes
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnPageBreakCollection.Add(System.Int32)">
            <summary>
            Add a column page break
            </summary>
            <param name="columnIndex">number of column to be added as page break</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnPageBreakCollection.Clear">
            <summary>
            Clear all column page breaks
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnPageBreakCollection.Contains(System.Int32)">
            <summary>
            Check whether or not a column page break has already added
            </summary>
            <param name="columnIndex">number of column index to be checked</param>
            <returns>true if the page break has been added, otherwise return false</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnPageBreakCollection.Count">
            <summary>
            Get the column page break count
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnPageBreakCollection.Remove(System.Int32)">
            <summary>
            Remove a column page break from spreadsheet
            </summary>
            <param name="columnIndex">number of column index to be removed</param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnPageBreakCollection.Item(System.Int32)">
            <summary>
            Get or set the column page break
            </summary>
            <param name="index">number of column index to be added or removed</param>
            <returns>number of column index returned from current spreadsheet</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.HighlightRange">
            <summary>
            Highlight range reference to spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.HighlightRange.HighlightColor">
            <summary>
            Highlight color to display range on spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.HighlightRange.Hover">
            <summary>
            Decide whether this range is hover.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRange">
            <summary>
            Named range reference to spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRange.Worksheet">
            <summary>
            Instance for the grid control will be setted before action performed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRange.Name">
            <summary>
            Name to the range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRange.Comment">
            <summary>
            Comment for describing this range
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.NamedRange.NameChanged">
            <summary>
            Event raised when name is changed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRange.IsValidName(System.String)">
            <summary>
            Check whether or not the specified name is valid name
            </summary>
            <param name="name">Name to be checked</param>
            <returns>True if specified name is valid; otherwise return false</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRange.Scope">
            <summary>
            Get or set the scope of named range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRange.ToString">
            <summary>
            Convert named range to string.
            </summary>
            <returns>String to describe the named range.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRangeScope">
            <summary>
            Scope flags for named range
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.NamedRangeScope.Workbook">
            <summary>
            Named range is valid inside whole workbook (available for all worksheets)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.NamedRangeScope.Worksheet">
            <summary>
            Named range is valid inside specified worksheet
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRangeCollection">
            <summary>
            Collection of named range on workbook.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeCollection.Add(System.String,System.String)">
            <summary>
            Add named range to registeredNamedRange and xlsNamedRange
            </summary>
            <param name="name">name of the range to be added</param>
            <param name="refersTo">refersTo of the range to be added</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeCollection.Remove(Spire.Spreadsheet.Forms.INamedRange)">
            <summary>
            Remove named range of registeredNamedRange and xlsNamedRange
            </summary>
            <param name="name">range to be removed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeCollection.Remove(System.String)">
            <summary>
            Remove named range of registeredNamedRange and xlsNamedRange
            </summary>
            <param name="name">name of the range to be removed</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRangeCollection.Item(System.String)">
            <summary>
            Get or set the named range by specified name.
            </summary>
            <param name="name">Name of range.</param>
            <returns>Instance of named range.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRangeCollection.Count">
            <summary>
            Get number of named ranges
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReferenceRange">
            <summary>
            Represents a range object refer to spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Worksheet">
            <summary>
            Get or set the worksheet which contains this range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.StartPos">
            <summary>
            Get or set start position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.EndPos">
            <summary>
            Get or set end position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Top">
            <summary>
            Zero-based number of row to locate the start position of this range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Left">
            <summary>
            Zero-based number of column to locate the start position of this range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Rows">
            <summary>
            Get or set number of rows.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Cols">
            <summary>
            Get or set number of columns.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Bottom">
            <summary>
            Get or set end number of row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Right">
            <summary>
            Get or set end number of column.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.Position">
            <summary>
            Get or set the position of range on worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.Contains(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Check whether or not the specified position is contained by this range.
            </summary>
            <param name="pos">Position to be checked.</param>
            <returns>True if specified position is contained by this range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.Contains(Spire.Spreadsheet.Forms.ReferenceRange)">
            <summary>
            Check whether or not a specified range is contained by this range.
            </summary>
            <param name="range">Range position to be checked.</param>
            <returns>True if the specified range is contained by this range; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.Contains(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether or not a specified range is contained by this range.
            </summary>
            <param name="range">Range position to be checked.</param>
            <returns>True if the specified range is contained by this range; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.IntersectWith(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Check whether or not that the specified range intersects with this range.
            </summary>
            <param name="range">The range to be checked.</param>
            <returns>True if specified range intersects with this range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.IntersectWith(Spire.Spreadsheet.Forms.ReferenceRange)">
            <summary>
            Check whether or not that the specified range intersects with this range.
            </summary>
            <param name="range">The range to be checked.</param>
            <returns>True if specified range intersects with this range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.op_Implicit(Spire.Spreadsheet.Forms.ReferenceRange)~Spire.Spreadsheet.Forms.CellRangeInfo">
            <summary>
            Convert to ReoGridRange structure.
            </summary>
            <param name="refRange">The object to be converted.</param>
            <returns>ReoGridRange structure converted from reference range instance.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.ToString">
            <summary>
            Convert reference range into description string.
            </summary>
            <returns>String to describe this reference range.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.ToAddress">
            <summary>
            Convert referenced range into address position string. 
            </summary>
            <returns>Address position string to describe this range on worksheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.ToAbsoluteAddress">
            <summary>
            Convert referenced range into absolute address position string. 
            </summary>
            <returns>Absolute address position string to describe this range on worksheet.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.Merge">
            <summary>
            Merge this range into single cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.Unmerge">
            <summary>
            Unmerge this range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.IsMergedCell">
            <summary>
            Determine whether or not this range contains only one merged cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.GroupRows">
            <summary>
            Group all rows in this range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.GroupColumns">
            <summary>
            Group all columns in this range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.UngroupRows">
            <summary>
            Ungroup all rows in this range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRange.UngroupColumns">
            <summary>
            Ungroup all columns in this range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReferenceRange.CellCollection">
            <summary>
            Get the collection of all cell instances in this range
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PlainStyleFlag">
            <summary>
            Key of cell style item
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.None">
            <summary>
            None style will be added or removed
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontName">
            <summary>
            Font name
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontSize">
            <summary>
            Font size
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontStyleBold">
            <summary>
            Font bold
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontStyleItalic">
            <summary>
            Font italic
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontStyleStrikethrough">
            <summary>
            Font strikethrough
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontStyleUnderline">
            <summary>
            Font underline
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.BackColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.LineColor">
            <summary>
            Line color (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.LineStyle">
            <summary>
            Line style (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.LineWeight">
            <summary>
            Line weight (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.LineStartCap">
            <summary>
            Line start cap (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.LineEndCap">
            <summary>
            Line end cap (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.HorizontalAlign">
            <summary>
            Horizontal alignements
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.VerticalAlign">
            <summary>
            Vertical alignement
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.ForegroundColor">
            <summary>
            Background pattern color (not supported in WPF version)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FillPatternStyle">
            <summary>
            Background pattern style (not supported in WPF version)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.TextWrap">
            <summary>
            Text wrap (word-break mode)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.Indent">
            <summary>
            Padding
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.Padding">
            <summary>
            Padding
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.RotationAngle">
            <summary>
            Rotation angle for cell text
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.ShrinkToFit">
            <summary>
            ShrinkToFit
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.Merge">
            <summary>
            Merge
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontStyleAll">
            <summary>
            [Union flag] All flags of font style
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FontAll">
            <summary>
            [Union flag] All font styles (name, size and style)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.LineAll">
            <summary>
            [Union flag] All line styles (color, style, weight and caps)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.LayoutAll">
            <summary>
            [Union flag] All layout styles (Text-wrap, padding and angle)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.AlignAll">
            <summary>
            [Union flag] Both horizontal and vertical alignments
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.FillPattern">
            <summary>
            [Union flag] Background pattern (color and style)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.BackAll">
            <summary>
            [Union flag] All background styles (color and pattern)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PlainStyleFlag.All">
            <summary>
            [Union flag] All styles
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.TextWrapMode">
            <summary>
            Text-wrap mode of cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.TextWrapMode.NoWrap">
            <summary>
            No break (default)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.TextWrapMode.WordBreak">
            <summary>
            Normal word break
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.TextWrapMode.BreakAll">
            <summary>
            Break enabled for all characters
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PaddingValue">
            <summary>
            Padding value struct
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PaddingValue.Top">
            <summary>
            Get or set top padding
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PaddingValue.Bottom">
            <summary>
            Get or set bottom padding
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PaddingValue.Left">
            <summary>
            Get or set left padding
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PaddingValue.Right">
            <summary>
            Get or set right padding
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PaddingValue.#ctor(System.Int32)">
            <summary>
            Create padding and set all values with same specified value.
            </summary>
            <param name="all">Value applied to all padding.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PaddingValue.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create padding with every specified values. (in pixel)
            </summary>
            <param name="top">Top padding.</param>
            <param name="bottom">Bottom padding.</param>
            <param name="left">Left padding.</param>
            <param name="right">Right padding.</param>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.PaddingValue.Empty">
            <summary>
            Predefined empty padding value
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PaddingValue.op_Equality(Spire.Spreadsheet.Forms.PaddingValue,Spire.Spreadsheet.Forms.PaddingValue)">
            <summary>
            Compare two padding values whether are same
            </summary>
            <param name="p1">Padding value 1 to be compared</param>
            <param name="p2">Padding value 2 to be compared</param>
            <returns>True if two padding values are same; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PaddingValue.op_Inequality(Spire.Spreadsheet.Forms.PaddingValue,Spire.Spreadsheet.Forms.PaddingValue)">
            <summary>
            Compare two padding values whether are not same
            </summary>
            <param name="p1">Padding value 1 to be compared</param>
            <param name="p2">Padding value 2 to be compared</param>
            <returns>True if two padding values are not same; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PaddingValue.Equals(System.Object)">
            <summary>
            Compare an object and check whether two padding value are same
            </summary>
            <param name="obj">Another object to be checked</param>
            <returns>True if two padding values are same; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PaddingValue.GetHashCode">
            <summary>
            Get hash code of this object
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ControlAppearanceColors">
            <summary>
            Key of control appearance item
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ControlAppearanceStyle">
            <summary>
            ReoGrid Control Appearance Colors
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ControlAppearanceStyle.GetColor(Spire.Spreadsheet.Forms.ControlAppearanceColors,Spire.Spreadsheet.Forms.Graphics.SolidColor@)">
            <summary>
            Get color for appearance item
            </summary>
            <param name="colorKey">key to get the color item</param>
            <param name="color">output color get by specified key</param>
            <returns>true if color is found by specified key</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ControlAppearanceStyle.SetColor(Spire.Spreadsheet.Forms.ControlAppearanceColors,Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Set color for appearance item
            </summary>
            <param name="colorKey">Key of appearance item</param>
            <param name="color">Color to be set</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ControlAppearanceStyle.Item(Spire.Spreadsheet.Forms.ControlAppearanceColors)">
            <summary>
            Get or set color for appearance items
            </summary>
            <param name="colorKey"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ControlAppearanceStyle.TryGetColor(Spire.Spreadsheet.Forms.ControlAppearanceColors,Spire.Spreadsheet.Forms.Graphics.SolidColor@)">
            <summary>
            Try get a color item from control appearance style set
            </summary>
            <param name="key">Key used to specify a item</param>
            <param name="color">Output color struction</param>
            <returns>True if key was found and color could be returned; otherwise return false</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ControlAppearanceStyle.SelectionBorderWidth">
            <summary>
            Get or set selection border weight
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ControlAppearanceStyle.#ctor">
            <summary>
            Construct empty control appearance
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ControlAppearanceStyle.#ctor(Spire.Spreadsheet.Forms.Graphics.SolidColor,Spire.Spreadsheet.Forms.Graphics.SolidColor,System.Boolean)">
            <summary>
            Construct control appearance with two theme colors
            </summary>
            <param name="mainTheme">Main theme color</param>
            <param name="salientTheme">Salient theme color</param>
            <param name="useSystemHighlight">Whether use highlight colors of system default</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ControlAppearanceStyle.CreateDefaultControlStyle">
            <summary>
            Create default style for grid control.
            </summary>
            <returns>Default style created</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.LanguageResource">
            <summary>
            Static language resources
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Filter_SortAtoZ">
            <summary>
            Text displayed on column filter. (Sort A to Z)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Filter_SortZtoA">
            <summary>
            Text displayed on column filter (Sort Z to A)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Filter_SelectAll">
            <summary>
            Text displayed on column filter (Select All)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Filter_Blanks">
            <summary>
            Text of blank option in filter list. (Blanks)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Menu_InsertSheet">
            <summary>
            Text displayed on sheet tab control (Insert)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Menu_DeleteSheet">
            <summary>
            Text displayed on sheet tab control (Delete)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Menu_RenameSheet">
            <summary>
            Text displayed on sheet tab control (Rename...)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Sheet_RenameDialog_Title">
            <summary>
            Text displayed on sheet renaming dialog (Rename sheet)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Sheet_RenameDialog_NameLabel">
            <summary>
            Label text displayed on sheet renaming dialog (Name: )
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Button_OK">
            <summary>
            Common text displayed as label of OK button (OK)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Button_Cancel">
            <summary>
            Common text displayed as label of Cancel button (Cancel)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.LanguageResource.Sheet">
            <summary>
            Text of word sheet (Sheet)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.#ctor(Spire.Spreadsheet.Forms.Main.IControlAdapter,Spire.Spreadsheet.Forms.Spreadsheet)">
            <summary>
            Create workbook instance
            </summary>
            <param name="adapter">Control instance adapter</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.Clear">
            <summary>
            Clear all worksheets.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.LoadFromFile(System.IO.Stream)">
            <summary>
            Load an excel file from stream.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.LoadFromFile(System.IO.Stream,System.Boolean)">
            <summary>
             Load an excel file from stream. 
            </summary>
            <param name="stream">excel stream .</param>
            <param name="forceRefresh">Indicates whether refresh data.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.LoadFromFile(System.String)">
            <summary>
            Load data from an excel file. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.LoadFromFile(System.String,System.Boolean)">
            <summary>
             Load data from an excel file. 
            </summary>
            <param name="fileName">excel file name.</param>
            <param name="forceRefresh">Indicates whether refresh data.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.SaveToFile(System.IO.Stream)">
            <summary>
            Save to an excel file stream. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.SaveToHtml(System.String)">
            <summary>
            Save to an html file. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.SaveToFile(System.IO.Stream,Spire.Spreadsheet.Forms.FileFormatType)">
            <summary>
            Save to an excel file stream. 
            </summary>
            <param name="stream">excel stream.</param>
            <param name="fileFormatType">file format type.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.SaveToFile(System.String)">
            <summary>
            Save to an excel file. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.SaveToFile(System.String,Spire.Spreadsheet.Forms.FileFormatType)">
            <summary>
            Save to an excel file. 
            </summary>
            <param name="fileName">file name.</param>
            <param name="fileFormatType">file format type.</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorkbookLoaded">
            <summary>
            Event raised when workbook loaded from stream or file
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorkbookSaved">
            <summary>
            Event raised when workbook saved into stream or file
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Workbook.Worksheets">
            <summary>
            Collection of worksheets
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorksheetCreated">
            <summary>
            Event raised when new worksheet is created
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorksheetInserted">
            <summary>
            Event raised when new worksheet is inserted
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorksheetRemoved">
            <summary>
            Event raised when new worksheet is removed
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.BeforeWorksheetNameChange">
            <summary>
            Event raised before name of worksheet changing
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorksheetNameChanged">
            <summary>
            Event raised when name of worksheet is changed
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorksheetNameBackColorChanged">
            <summary>
            Event raised when background color of worksheet name is changed.
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.WorksheetNameTextColorChanged">
            <summary>
            Event raised when text color of worksheet name is changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.SetSettings(Spire.Spreadsheet.Forms.WorkbookSettings,System.Boolean)">
            <summary>
            Set settings for this workbook
            </summary>
            <param name="settings">settings to be set</param>
            <param name="value">set true to enable specified settings, false to disable</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.GetSettings">
            <summary>
            Get current settings of workbook
            </summary>
            <returns>Workbook settings set</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.HasSettings(Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Determine whether or not specified settings are set
            </summary>
            <param name="settings">settings to be checked</param>
            <returns>true if specified settings are set in current workbook</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.SettingsChanged">
            <summary>
            Event raised when workbook settings is changed
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Workbook.ExceptionHappened">
            <summary>
            Event is used to notify if there are any internal exceptions happen on worksheets
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.NotifyExceptionHappen(Spire.Spreadsheet.Forms.Worksheet,System.Exception)">
            <summary>
            Notify that there are exceptions happen on any worksheet. 
            The event ExceptionHappened of workbook will be invoked.
            </summary>
            <param name="sheet">Worksheet where the exception happened</param>
            <param name="ex">Exception to describe the details of error information</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Workbook.CalculateAllValue">
            <summary>
            Caculate all value.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.EndEditReason">
            <summary>
            Reason for ending of cell edit
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.EndEditReason.NormalFinish">
            <summary>
            User edit has done normally
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.EndEditReason.Cancel">
            <summary>
            User has cancelled edit operation
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetSelectionMode">
            <summary>
            Represents selection mode for worksheet.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionMode.None">
            <summary>
            Do not allow to select anything on worksheet.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionMode.Cell">
            <summary>
            Only allow to select single cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionMode.Range">
            <summary>
            Allow to select cell or ranges. (Default)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionMode.Row">
            <summary>
            Always to select one or more entire rows at a time.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionMode.Column">
            <summary>
            Always to select one or more entire columns at a time.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionMode.SingleRow">
            <summary>
            Allow to select only one row. (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionMode.SingleColumn">
            <summary>
            Allow to select only one column. (Reserved)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetSelectionStyle">
            <summary>
            Represents selection style for worksheet.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionStyle.None">
            <summary>
            No selection will be drawn.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionStyle.Default">
            <summary>
            Default selection style.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSelectionStyle.FocusRect">
            <summary>
            Windows classic focus rectangle style.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SelectionForwardDirection">
            <summary>
            Selection Forward Direction for worksheet. When user finished cell edit,
            or Enter key is pressed on worksheet, the focus cell moves to next cell at right column.
            By changing this direction to change the moving direction of focus cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SelectionForwardDirection.Right">
            <summary>
            Move to cell at right column.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.SelectionForwardDirection.Down">
            <summary>
            Move to cell at below row.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FocusPosStyle">
            <summary>
            Determine the style to show focus cell
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FocusPosStyle.Default">
            <summary>
            Default style (cell with no background filled)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FocusPosStyle.None">
            <summary>
            Nothing specical on focus cell
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OperationStatus">
            <summary>
            Behavior for spreadsheet operations
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.OperationStatus.Default">
            <summary>
            Change Selection Range, Edit cell, Move focus cell by keyboard and etc.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.OperationStatus.RangeSelect">
            <summary>
            Selecting focus range by dragging mouse.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.OperationStatus.AdjustRowHeight">
            <summary>
            Adjust row height or column width.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.OperationStatus.DragSelectionFillSerial">
            <summary>
            Allow drag selection to fill serial data.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.OperationStatus.SelectionRangeMove">
            <summary>
            Move a selection range by dragging mouse on border of selection.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.OperationStatus.RangePicker">
            <summary>
            Picking a range during formula inputting.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FreezeArea">
            <summary>
            Represents the frozen areas.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.None">
            <summary>
            Do not freeze to any positions.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.Left">
            <summary>
            Freeze to left.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.Top">
            <summary>
            Freeze to top.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.Right">
            <summary>
            Freeze to right.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.Bottom">
            <summary>
            Freeze to bottom.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.LeftTop">
            <summary>
            Freeze to left and top.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.LeftBottom">
            <summary>
            Freeze to left and bottom.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.RightTop">
            <summary>
            Freeze to right and top.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FreezeArea.RightBottom">
            <summary>
            Freeze to right and bottom.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReoGridViewMode">
            <summary>
            View mode of current worksheet.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ReoGridViewMode.Normal">
            <summary>
            Normal view
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ReoGridViewMode.PageView">
            <summary>
            Page view
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.ReoGridViewMode.Custom">
            <summary>
            Custom view (Reserved)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetSettings">
            <summary>
            Worksheet Settings
            </summary>
            <remarks>Refer to: https://reogrid.net/document/settings </remarks>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.None">
            <summary>
            None settings.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Default">
            <summary>
            Default settings.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_Default">
            <summary>
            All default edit settings.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_Readonly">
            <summary>
            Make worksheet read-only. Any changes are not allowed.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_AutoFormatCell">
            <summary>
            Allow data format after text editing by user.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_FriendlyPercentInput">
            <summary>
            Allow to put a '%' symbol at the end of text when start edit a cell that is set as percent data format.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_AutoExpandRowHeight">
            <summary>
            Allow automatically adjust row height to fit largest cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_AllowAdjustRowHeight">
            <summary>
            Allow user adjusts row height by mouse.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_AutoExpandColumnWidth">
            <summary>
            Allow automatically adjust column width to fit largest cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_AllowAdjustColumnWidth">
            <summary>
            Allows user adjusts column width by mouse.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_DragSelectionToMoveCells">
            <summary>
            Allow user drags and drops the selection to move cell content.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Edit_DragSelectionToFillSerial">
            <summary>
            Allow user drags and drops selection to fill data serial, reuse formulas or clear data.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_Default">
            <summary>
            All behaivor settings.
            </summary>
        </member>
        <!-- 对于成员“F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_DoubleClickToResizeHeader”忽略有格式错误的 XML 注释 -->
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_DoubleClickToFitRowHeight">
            <summary>
            Allow double click to make the row height fits to maximum text of cells.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_DoubleClickToFitColumnWidth">
            <summary>
            Allow double click to make the column width fits to maximum text of cells.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_MouseWheelToScroll">
            <summary>
            Allow to scroll spreadsheet by mouse wheeling.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_MouseWheelToZoom">
            <summary>
            Allow user zooms worksheet by wheeling mouse.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_ShortcutKeyToZoom">
            <summary>
            Allow user zooms worksheet by hotkeys. (ctrl + plus/minus)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Behavior_ScrollToFocusCell">
            <summary>
            Allow always scroll worksheet automatically to make focus cell entirely visible.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_Default">
            <summary>
            Default view settings (View_ShowHeaders | View_ShowGridLine | View_AllowShowOutlines)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowColumnHeader">
            <summary>
            Show column header.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowRowHeader">
            <summary>
            Show row header.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowHeaders">
            <summary>
            Show column header and row header.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowHorizontalRuler">
            <summary>
            Show Horizontal Ruler. (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowVerticalRuler">
            <summary>
            Show Vertical Ruler. (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowRulers">
            <summary>
            Show rulers in horizontal and vertical direction. (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowGridLine">
            <summary>
            Show guide line.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_AllowShowRowOutlines">
            <summary>
            Allow to show outlines for rows.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_AllowShowColumnOutlines">
            <summary>
            Allow to show outlines for columns.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_AllowShowOutlines">
            <summary>
            Allow to show outlines on both row and column.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowHiddenCellLine">
            <summary>
            Allow cell text be displayed overflow the boundary of cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_AllowCellTextOverflow">
            <summary>
            Allow cell text be displayed overflow the boundary of cell.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Preview_ShowPageBreaks">
            <summary>
            Enable to show pages boundaries for printing areas.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_AntialiasDrawing">
            <summary>
            Enable anti-alias drawing.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.View_ShowFrozenLine">
            <summary>
            Allow to show a gray solid line at frozen cells.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Formula_Default">
            <summary>
            Default formula settings.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Formula_AutoUpdateReferenceCell">
            <summary>
            Allow to update formula reference cells automatically.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Formula_AutoPickingCellAddress">
            <summary>
            Allow to pick an address from selected cell during formula editing. (Reserved)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorksheetSettings.Formula_AutoFormat">
            <summary>
            Allow to correct, format and rebuild formula automatically.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.AutoColumnFilter">
            <summary>
            Built-in auto column filter
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.Worksheet">
            <summary>
            Get instance of current attached worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.Columns">
            <summary>
            Get the columns of this filter.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.Apply(System.Int32)">
            <summary>
            Apply filter to update worksheet.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.FilterColumnCollection">
            <summary>
            Collection of column filters
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.FilterColumnCollection.Item(System.Int32)">
            <summary>
            Get the column filter by specified index.
            </summary>
            <param name="index">number of column to get column filter.</param>
            <returns>instance of column filter, which contains the candidates list and selected items by user.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.FilterColumnCollection.Item(System.String)">
            <summary>
            Get the column filter by specified address code of column (A, TZ, etc.)
            </summary>
            <param name="columnCode">the alphabet of address code used to locate a column in spreadsheet</param>
            <returns>instance of column filter, which contains the candidates list and selected items by user</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.FilterColumnCollection.GetEnumerator">
            <summary>
            Get all column filter header body from this filter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.SpreadCell">
            <summary>
            Column header instance
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.OnPaint(Spire.Spreadsheet.Forms.Rendering.CellDrawingContext,Spire.Spreadsheet.Forms.Graphics.Size)">
            <summary>
            Repaint filter header body
            </summary>
            <param name="dc">ReoGrid drawing context</param>
            <param name="headerSize">Header size</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.OnMouseDown(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.WorksheetMouseEventArgs)">
            <summary>
            Handling mouse-down process
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Argument of mouse-down event</param>
            <returns>True if event has been handled; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.OnMouseMove(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.WorksheetMouseEventArgs)">
            <summary>
            Handling mouse-move process
            </summary>
            <param name="headerSize">Header size</param>
            <param name="e">Argument of mouse-move event</param>
            <returns>True if event has been handled, otherwise return false</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.ContextMenuStrip">
            <summary>
            Get or set the context menu strip of column filter.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.IsSelectAll">
            <summary>
            Get or set whether or not this column is marked as SelectAll.
            The column is marked as SelectAll will be ignored during filter.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection">
            <summary>
            Collection of selected items for column filter
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Item(System.String)">
            <summary>
            Check whether or not a specified item is selected by user.
            </summary>
            <param name="item">Item to be checked.</param>
            <returns>True if item is selected by user; Otherwise return false;</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.GetEnumerator">
            <summary>
            Get the enumeration of items from this filter.
            </summary>
            <returns>Enumeration of items from this filter.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Add(System.String)">
            <summary>
            Add selected item
            </summary>
            <param name="item">item to be added</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Clear">
            <summary>
            Clear all selected items
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Contains(System.String)">
            <summary>
            Check whether the specified item is contained in selected items
            </summary>
            <param name="item">item to be checked</param>
            <returns>true if specified item has been contained in selected items, otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copy all selected items into specified array
            </summary>
            <param name="array">array to be filled</param>
            <param name="arrayIndex">number of element start to copy</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Count">
            <summary>
            Get number of selected items
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.IsReadOnly">
            <summary>
            Check whether or not the collection of selection items is read-only
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.Remove(System.String)">
            <summary>
            Remove specified item from selected items
            </summary>
            <param name="item">item to be removed</param>
            <returns>true if item exist and has been removed successfully</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.TextFilterCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add entire specified array or enumerable list into selected items
            </summary>
            <param name="items">list, array or other enumerable collection to be added</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.GetDistinctItems">
            <summary>
            Get distinct items from spreadsheet on current column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.AutoColumnFilterBody.OnDataChange(System.Int32,System.Int32)">
            <summary>
            Invoked when spreadsheet data changed on this column
            </summary>
            <param name="startRow">zero-based number of first row that data has been changed</param>
            <param name="endRow">zero-based number of last row that data has been changed</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.FilterButtonPressed">
            <summary>
            Event raised when column filter button has been clicked
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.Attach(Spire.Spreadsheet.Forms.Worksheet,Spire.Spreadsheet.Forms.Data.AutoColumnFilterUI)">
            <summary>
            Attach filter to specified worksheet
            </summary>
            <param name="worksheet">instance of worksheet to be attached</param>
            <param name="uiFlag">Flags to decide which styles of GUI to be dispalyed (default is DropdownButtonAndPanel style)</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.AutoColumnFilter.Detach">
            <summary>
            Detach filter from specified worksheet
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.AutoColumnFilterUI">
            <summary>
            Flag to create UI of column filter
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Data.AutoColumnFilterUI.NoGUI">
            <summary>
            Do not create any GUI 
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Data.AutoColumnFilterUI.DropdownButton">
            <summary>
            Only create a dropdown button on header
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Data.AutoColumnFilterUI.DropdownButtonAndPanel">
            <summary>
            Create both dropdown button and built-in panel
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.FilterButtonPressedEventArgs">
            <summary>
            Event raised when auto filter button was pressed by user
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.FilterButtonPressedEventArgs.HeaderCell">
            <summary>
            Get the instance of column header
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.FilterButtonPressedEventArgs.IsCancelled">
            <summary>
            Set this flag to prevent open the built-in popup menu
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.FilterButtonPressedEventArgs.#ctor(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Create filter button pressed event arguments with instance of column header
            </summary>
            <param name="columnHeader"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.IDataSource`1">
            <summary>
            Represents common data source.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.IDataSource`1.SerialCount">
            <summary>
            Get the number of available data serials of this source.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.IDataSource`1.Item(System.Int32)">
            <summary>
            Get data serial from specified position.
            </summary>
            <param name="index">Zero-based index to get data serial from this source.</param>
            <returns>Data serial object. Return null if given index is out of valid range.</returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Data.IDataSource`1.DataChanged">
            <summary>
            This event will be raised when any data from the serial data range changed.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.IDataSerial">
            <summary>
            Represents data serial in data source.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.IDataSerial.Count">
            <summary>
            Get the number of items of this data serial.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Data.IDataSerial.Item(System.Int32)">
            <summary>
            Get data from specified position.
            </summary>
            <param name="index">Zero-based index position to get data from current serial.</param>
            <returns>Data in double. Return null if data cannot be converted to double or data not exist.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Data.ArrayHelper">
            <summary>
            Generic Array Utility
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.ArrayHelper.QuickFind(System.Int32,System.Int32,Spire.Spreadsheet.Forms.Data.ArrayHelper.QuickFindHandler)">
            <summary>
            Binary search for an element from an ordered array
            </summary>
            <param name="start">start position of range to be searched</param>
            <param name="end">end position of range to be searched</param>
            <param name="compare">delegate method is used to test whether an element is target</param>
            <returns>element as result will be returned</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Data.ArrayHelper.QuickFind(System.Int32,System.Int32,System.Int32,Spire.Spreadsheet.Forms.Data.ArrayHelper.QuickFindHandler)">
            <summary>
            Binary search for an element from an ordered array
            </summary>
            <param name="split">first element as splitter to be tested</param>
            <param name="start">start position of range to be searched</param>
            <param name="end">end position of range to be searched</param>
            <param name="compare">delegate method is used to test whether an element is target</param>
            <returns>element as result will be returned</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.WorksheetDrawingCanvas.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Worksheet Drawing Canvas alwayas keep transparent and doesn't draw anything from itself
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.DrawingComponent">
            <summary>
            Represents drawing component object that contains others drawing objects.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingComponent.ClipBounds">
            <summary>
            Get or set the clip bounds to render final object
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingComponent.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render drawing object to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingComponent.DrawChildren(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render children objects to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingComponent.Style">
            <summary>
            Get style object.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.FloatingDrawingContext">
            <summary>
            Represents the floating objects drawing context.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingDrawingContext.CurrentObject">
            <summary>
            Get the current drawing object.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.FloatingObject">
            <summary>
            Represents basic drawing object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.#ctor">
            <summary>
            Create drawing object instance.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.X">
            <summary>
            Get or set X position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.Y">
            <summary>
            Get or set Y position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.InnerWidth">
            <summary>
            Get or set width.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.InnerHeight">
            <summary>
            Get or set height.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.Left">
            <summary>
            Get left position. (x-coordinate)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.Top">
            <summary>
            Get top position. (y-coordinate)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.Right">
            <summary>
            Get right position. (x-coordinate)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.Bottom">
            <summary>
            Get bottom position. (y-coordinate)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.Size">
            <summary>
            Get or set size.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.FloatingObject.Bounds">
            <summary>
            Get bounds position relative to object container.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.OnBoundsChanged(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            This method will be invoked when bounds of drawing object is changed.
            </summary>
            <param name="oldRect"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.GetPreferredSize">
            <summary>
            Get preferred size of drawing object. (Default is 160x100)
            </summary>
            <returns></returns>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.Drawing.FloatingObject.MouseDown">
            <summary>
            Event raised when mouse pressed down inside this drawing object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.OnMouseDown(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            This method will be invoked when mouse button pressed down inside drawing object.
            </summary>
            <param name="location">Location relateved to drawing object.</param>
            <param name="buttons">Mouse button pressing status.</param>
            <returns>True if event has been handled; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.OnMouseMove(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            This method will be invoked when mouse moving inside drawing object.
            </summary>
            <param name="location">Location relateved to drawing object.</param>
            <param name="buttons">Mouse button pressing status.</param>
            <returns>True if event has been handled; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.OnMouseUp(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            This method will be invoked when mouse button released inside drawing object.
            </summary>
            <param name="location">Location relateved to drawing object.</param>
            <param name="buttons">Mouse button pressing status.</param>
            <returns>True if event has been handled; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.OnMouseDoubleClick(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            This method will be invoked when mouse button double clicked inside drawing object.
            </summary>
            <param name="location">Location relateved to drawing object.</param>
            <param name="buttons">Mouse button pressing status.</param>
            <returns>True if event has been handled; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.OnKeyDown(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            This method will be invoked when keyboard is pressed when drawing object is focused.
            </summary>
            <param name="keys">Virtual keyboard code to determine that which key is being pressed by user.</param>
            <returns>True if event has been handled; otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.SetFocus">
            <summary>
            Make drawing object getting focus.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.FloatingObject.FreeFocus">
            <summary>
            Make drawing object losing focus.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.SelectableFloatingObject">
            <summary>
            Represents user intervatable floating object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.SelectableFloatingObject.Invalidate">
            <summary>
            Redraw this object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.SelectableFloatingObject.IsSelected">
            <summary>
            Determine whether or not this drawing object is being selected.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.SelectableFloatingObject.OnSelect">
            <summary>
            This method will be invoked when drawing object is selected by user.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.SelectableFloatingObject.OnDeselect">
            <summary>
            This method will be invoked when drawing object is no longer selected by user.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.DrawingObject">
            <summary>
            Represents drawing object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObject.#ctor">
            <summary>
            Create drawing object instance.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.Container">
            <summary>
            Get or set the container of this drawing object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObject.Invalidate">
            <summary>
            Invalidate the drawing object on rendering device.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.Visible">
            <summary>
            Get or set visibility of this object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.ClientBounds">
            <summary>
            Get client bounds position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.OriginPoint">
            <summary>
            Get the origin point of this object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.ScaleX">
            <summary>
            Get or set the horizontal display scaling.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.ScaleY">
            <summary>
            Get or set the vertial display sacling.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.Style">
            <summary>
            Get style object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObject.Draw(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render this drawing object.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObject.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render drawing object to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObject.DrawSelection(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render when object is selected.
            </summary>
            <param name="dc">Platform no-associated drawing context instance</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObject.OnSelect">
            <summary>
            This method will be invoked when drawing object is selected by user.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObject.OnDeselect">
            <summary>
            This method will be invoked when drawing object is no longer selected by user.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObject.ThumbPoints">
            <summary>
            Get thumb points.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.DrawingObjectCollection">
            <summary>
            Represents collection of drawing objects.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObjectCollection.Owner">
            <summary>
            Get container of drawing collection.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObjectCollection.#ctor(Spire.Spreadsheet.Forms.Drawing.DrawingComponent)">
            <summary>
            Create collection of drawing object.
            </summary>
            <param name="owner">Container instance of collection.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObjectCollection.Add(Spire.Spreadsheet.Forms.Drawing.DrawingObject)">
            <summary>
            Add drawing object item.
            </summary>
            <param name="item">Drawing object to be added.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObjectCollection.Item(System.Int32)">
            <summary>
            Get child object by specified index position.
            </summary>
            <param name="index">Index position in parent object container.</param>
            <returns>Child object from parent object container.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObjectCollection.Clear">
            <summary>
            Remove all object from parent object container.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.DrawingObjectCollection.Contains(Spire.Spreadsheet.Forms.Drawing.DrawingObject)">
            <summary>
            Check whether a specified object is contained by this object container.
            </summary>
            <param name="item">Object to be checked.</param>
            <returns>True if specified object is contained by this object container; Otherwise return false.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.MouseEventArgs">
            <summary>
            Represents mouse event arguments.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.MouseEventArgs.Location">
            <summary>
            Get the location of mouse event happened.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.MouseEventArgs.Buttons">
            <summary>
            Get mouse button press-down status of mouse event.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.MouseEventArgs.#ctor(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            Create an instance of mouse event arguments.
            </summary>
            <param name="location">The location of mouse event happened.</param>
            <param name="buttons">The mouse button press-down status of mous event happened.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.KeyboardEventArgs">
            <summary>
            Keyboard event arguments
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.KeyboardEventArgs.Keys">
            <summary>
            Get the merged key press-down status code
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.KeyboardEventArgs.#ctor(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Create an instance of keyboard event arguments
            </summary>
            <param name="keys">The key of user pressed down when event happening</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.IDrawingObjectCollection">
            <summary>
            Represents collection of drawing object.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.IFloatingObjectCollection">
            <summary>
            Collection of floating object
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IFloatingObjectCollection.Item(System.Int32)">
            <summary>
            Access element from collection
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.IFloatingObjectCollection.AddRange(System.Collections.Generic.IEnumerable{Spire.Spreadsheet.Forms.Drawing.DrawingObject})">
            <summary>
            Add all elements from another collection
            </summary>
            <param name="drawingObjects"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.ImageObject">
            <summary>
            Represents an image object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.ImageObject.#ctor(Spire.Xls.Core.Converter.Spreadsheet.Shapes.Picture,Spire.Spreadsheet.Forms.Worksheet)">
            <summary>
            Construct the image object with specified image instance.
            </summary>
            <param name="image">Platform image instance to be displayed on worksheet.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.ImageObject.HorizontalScale">
            <summary>
            Gets and sets the Horizontal scale.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.ImageObject.VerticalScale">
            <summary>
            Get and set the Vertical scale.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.ImageObject.Image">
            <summary>
            Get the image instance to be displayed on worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.ImageObject.RotateAngle">
            <summary>
            Get or set object rotation angle.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.ImageObject.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Draw drawing object to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.RectangleShape">
            <summary>
            Represents regular rectangle drawing object.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.EllipseShape">
            <summary>
            Represents ellipse shape object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Shapes.EllipseShape.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render ellipse shape to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.DiamondShape">
            <summary>
            Represents diamond shape object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Shapes.DiamondShape.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render diamond shape to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.Line">
            <summary>
            Represents straight line connection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.Line.StartPoint">
            <summary>
            Get or set the start position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.Line.EndPoint">
            <summary>
            Get or set the end position.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.Line.LineColor">
            <summary>
            Get or set line color of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.Line.LineWidth">
            <summary>
            Get or set line width of shape.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Shapes.Line.UpdateBoundsByTwoPoints">
            <summary>
            Update bounds by start and end positions.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Shapes.Line.Draw(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render line object to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.PathShape">
            <summary>
            Represents path shape drawing object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Shapes.PathShape.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render path shape to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.RoundedRectangleShape">
            <summary>
            Represents a rounded rectangle shape.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.PieShape">
            <summary>
            Represents a pie shape 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.PieShape.StartAngle">
            <summary>
            Get or set the start angle of pie shape
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.PieShape.SweepAngle">
            <summary>
            Get or set the sweep angle of pie shape (Sweep from start angle)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject">
            <summary>
            Represents an abstract shape drawing object.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.IsChartAreaView">
            <summary>
            Represent whether the shape is area view of chart.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.OnPaint(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Render shape object to graphics context.
            </summary>
            <param name="dc">Platform no-associated drawing context instance.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.OnPaintText(Spire.Spreadsheet.Forms.Rendering.DrawingContext)">
            <summary>
            Paint text inside this shape.
            </summary>
            <param name="dc">Instance of cross-platform drawing context.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.TextBounds">
            <summary>
            Get the text bounds for display text inside this shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.Text">
            <summary>
            Get or set the text displayed inside this shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.RichText">
            <summary>
            Get or set rich format text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.RotateAngle">
            <summary>
            Get or set object rotation angle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.Visible">
            <summary>
            Get or set visibility of this object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.BackColor">
            <summary>
            Get or set back color of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.ForeColor">
            <summary>
            Get or set fore color of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.LineColor">
            <summary>
            Get or set line color of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.LineWidth">
            <summary>
            Get or set line width of shape.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.FontName">
            <summary>
            Get or set font name of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.FontSize">
            <summary>
            Get or set font size of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.FontStyles">
            <summary>
            Get font styles of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.FontColor">
            <summary>
            Get or set font color of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.HorizontalAlignment">
            <summary>
            Get or set horizontal alignment of shape text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.ShapeObject.VerticalAlignment">
            <summary>
            Get or set vertical alignment of shape text.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Shapes.SmartShapes.BlockArcShape">
            <summary>
            Represents a block arc smart shape object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Shapes.SmartShapes.BlockArcShape.ArcWidth">
            <summary>
            Get or set the width of block arc.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.HorizontalAlignment">
            <summary>
            Represents the horizontal alignment for drawing objects.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.VerticalAlignment">
            <summary>
            Represents the vertical alignment for drawing objects.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.IDrawingObjectStyle">
            <summary>
            Represents the interface of drawing object style set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IDrawingObjectStyle.FillColor">
            <summary>
            Get or set fill background color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IDrawingObjectStyle.LineColor">
            <summary>
            Get or set line color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IDrawingObjectStyle.LineWidth">
            <summary>
            Get or set line width.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IDrawingObjectStyle.LineStyle">
            <summary>
            Get or set line style.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.IDrawingLineObjectStyle">
            <summary>
            Represents the interface of line object style.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IDrawingLineObjectStyle.StartCap">
            <summary>
            Get or set the start cap style.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IDrawingLineObjectStyle.EndCap">
            <summary>
            Get or set the end cap style.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.IDrawingComponentStyle">
            <summary>
            Represents the interface of drawing component style.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.IDrawingComponentStyle.Padding">
            <summary>
            Get or set padding.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.DrawingObjectStyle">
            <summary>
            Represents the implementation of drawing objects style set.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObjectStyle.OwnerObject">
            <summary>
            Get the instance of owner drawing object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObjectStyle.FillColor">
            <summary>
            Get or set fill background color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObjectStyle.LineColor">
            <summary>
            Get or set line color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObjectStyle.LineWidth">
            <summary>
            Get or set line width.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingObjectStyle.LineStyle">
            <summary>
            Get or set line style.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.DrawingComponentStyle">
            <summary>
            Represents 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.DrawingComponentStyle.Padding">
            <summary>
            Get or set padding.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.RichText">
            <summary>
            Represents a rich format text object that could be displayed inside cell or drawing objects.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.SuspendUpdateText">
            <summary>
            Suspend update text when size, wrap-mode etc. properties changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.ResumeUpdateText">
            <summary>
            Resume update text when size, wrap-mode etc. properties changed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.Size">
            <summary>
            Get or set the display area size. (in pixel)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.TextSize">
            <summary>
            Get the actual size to display text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.DefaultBackColor">
            <summary>
            Get or set the default background color of text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.DefaultTextColor">
            <summary>
            Get or set the default text color.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.DefaultLineHeight">
            <summary>
            Get or set the default line height scale for every lines.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.DefaultHorizontalAlignment">
            <summary>
            Determines the default horizontal alignment for paragraphs.
            This option may overwritten by settings from each paragraph.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.Overflow">
            <summary>
            Determines whether or not allow text displayed out of specified size.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.TextWrap">
            <summary>
            Determines the text wrap mode.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.VerticalAlignment">
            <summary>
            Get or set the vertical alignment mode.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.DefaultParagraphSpacing">
            <summary>
            Get or set the default paragraph spacing.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.RichText.RotationAngle">
            <summary>
            Get or set the rotation angle. (-90° ~ 90°)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.#ctor">
            <summary>
            Create an instance of rich format text.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.Finalize">
            <summary>
            Dispose rich text object and attached resources.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.#ctor(Spire.Spreadsheet.Forms.Graphics.Size)">
            <summary>
            Create an instance of rich format text with an specified initial display area size.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.AddParagraph(Spire.Spreadsheet.Forms.Drawing.Paragraph)">
            <summary>
            Append a new empty paragraph.
            </summary>
            <returns>The paragraph instance to be added.</returns>
            <param name="p">Paragraph to be added. Null to create a new empty paragraph.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.AddText(System.String,System.String,System.Nullable{System.Single},System.Nullable{Spire.Spreadsheet.Forms.Utility.FontStyles},System.Nullable{Spire.Spreadsheet.Forms.Graphics.SolidColor},System.Nullable{Spire.Spreadsheet.Forms.Graphics.SolidColor})">
            <summary>
            Add text at end of current paragraph with specified styles.
            </summary>
            <param name="text">Text to be appended.</param>
            <param name="fontName">Font name of the text to be appended. Null to use last font name or default font name.</param>
            <param name="fontSize">Font size of the text to be appended. Null to use last font size or default font size.</param>
            <param name="fontStyles">Style of the text to be appended. Null to use last font style or default font style.</param>
            <param name="textColor">Color of the text to be appended. Null to use last text color or default text color.</param>
            <param name="backColor">Background color of text to be appended. Null to use last background color or default background color.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.NewLine">
            <summary>
            End current paragraph, put following text into a new paragraph.
            </summary>
            <returns>Rich format text instance.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.Span(System.String,System.String,System.Nullable{System.Single},System.Nullable{Spire.Spreadsheet.Forms.Utility.FontStyles},System.Nullable{Spire.Spreadsheet.Forms.Graphics.SolidColor},System.Nullable{Spire.Spreadsheet.Forms.Graphics.SolidColor})">
            <summary>
            Append a text span with specified display format.
            </summary>
            <param name="text">Text to be appended.</param>
            <param name="fontName">Font name of the text to be appended. Null to use last font name or default font name.</param>
            <param name="fontSize">Font size of the text to be appended. Null to use last font size or default font size.</param>
            <param name="fontStyles">Style of the text to be appended. Null to use last font style or default font style.</param>
            <param name="textColor">Color of the text to be appended. Null to use last text color or default text color.</param>
            <param name="backColor">Background color of text to be appended. Null to use last background color or default background color.</param>
            <returns>Rich format text instance.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.Draw(Spire.Spreadsheet.Forms.Graphics.IGraphics,Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Draw rich text at specified area.
            </summary>
            <param name="g">Graphics context.</param>
            <param name="bounds">Target area to draw rich text.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.ToString">
            <summary>
            Convert rich format text to plain text.
            </summary>
            <returns>Plain text converted from this rich format text.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.RichText.ToPlainText">
            <summary>
            Convert rich format text to plain text.
            </summary>
            <returns>Plain text converted from this rich format text.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Drawing.Paragraph">
            <summary>
            Repersents a paragraph that is a part of rich format text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Paragraph.HorizontalAlign">
            <summary>
            Get or set the horizontal alignment for this paragraph.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Paragraph.VerticalAlign">
            <summary>
            Get or set the vertical alignment for this paragraph.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Drawing.Paragraph.LineHeight">
            <summary>
            Get or set the line height scale of this paragraph.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.Paragraph.AddText(System.String,System.String,System.Nullable{System.Single},System.Nullable{Spire.Spreadsheet.Forms.Utility.FontStyles},System.Nullable{Spire.Spreadsheet.Forms.Graphics.SolidColor},System.Nullable{Spire.Spreadsheet.Forms.Graphics.SolidColor},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Append text at end of line in current paragraph.
            </summary>
            <param name="text">Text to be appended.</param>
            <param name="fontName">Font name of the text to be appended. Null to use last font name or default font name.</param>
            <param name="fontSize">Font size of the text to be appended. Null to use last font size or default font size.</param>
            <param name="fontStyles">Style of the text to be appended. Null to use last font style or default font style.</param>
            <param name="textColor">Color of the text to be appended. Null to use last text color or default text color.</param>
            <param name="backColor">Background color of text to be appended. Null to use last background color or default background color.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.ColorUtility.RGBToHSL(Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="rgbColor"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.ColorUtility.HSLToRgb(Spire.Spreadsheet.Forms.Drawing.HSLColor)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="hslColor"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.ColorUtility.SetColor(System.Single,System.Single,System.Single)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="t3"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Drawing.ColorUtility.CalculateFinalLumValue(System.Single,System.Single)">
            <summary>
            Source: http://ciintelligence.blogspot.jp/2012/02/converting-excel-theme-color-and-tint.html
            </summary>
            <param name="tint"></param>
            <param name="lum"></param>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellPicture">
            <summary>
            Represents a picture object in a spreadsheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.Position">
            <summary>
            Get position of the picture;
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.HorizontalOffset">
            <summary>
            Get or set the horizontal offset from its left column, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.VerticalOffset">
            <summary>
            Get or set the vertical offset from its top row, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.HorizontalScale">
            <summary>
            Get and set the horizontal scale.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.VerticalScale">
            <summary>
            Get and set the vertical scale.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.Width">
            <summary>
            Get or set the width,in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.Height">
            <summary>
            Get or set the height, in unit of pixel.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPicture.Image">
            <summary>
            Get or set the image to be displayed in cell
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellPicture.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetEventArgs">
            <summary>
            Common worksheet event arguments 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetEventArgs.Worksheet">
            <summary>
            Instance of worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create common worksheet event arguments with specified instance of worksheet
            </summary>
            <param name="sheet">instance of worksheet related to the event</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorkbookActionEventArgs">
            <summary>
            Arguments of event which will be fired when action is performed by worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorkbookActionEventArgs.Action">
            <summary>
            Action is performed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorkbookActionEventArgs.#ctor(Spire.Spreadsheet.Forms.Common.IAction)">
            <summary>
            Create this event argument with specified action
            </summary>
            <param name="action">instance of action</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BeforeActionPerformEventArgs">
            <summary>
            Event argument for before action perform
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeActionPerformEventArgs.IsCancelled">
            <summary>
            Determine whehter to abort perform current action
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BeforeActionPerformEventArgs.#ctor(Spire.Spreadsheet.Forms.Common.IAction)">
            <summary>
            Create event argument with specified action
            </summary>
            <param name="action">Action to be performed</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetCreatedEventArgs">
            <summary>
            Worksheet creating event argument
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetCreatedEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create this event argument with specified instance of worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetInsertedEventArgs">
            <summary>
            Worksheet inserting event argument
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetInsertedEventArgs.Index">
            <summary>
            Zero-based number of sheet is inserted
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetInsertedEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetRemovedEventArgs">
            <summary>
            Worksheet removing event argument
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetRemovedEventArgs.Index">
            <summary>
            Index of worksheet in workbook before removing
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetRemovedEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetNameChangingEventArgs">
            <summary>
            Worksheet's name changing event argument
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetNameChangingEventArgs.NewName">
            <summary>
            Get or set the new name used to instead of the old name of worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetNameChangingEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,System.String)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
            <param name="name">new name of worksheet</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CurrentWorksheetChangedEventArgs">
            <summary>
            Worksheet changing event argument
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CurrentWorksheetChangedEventArgs.Index">
            <summary>
            Zero-based number of sheet has changed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CurrentWorksheetChangedEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create this event argument with specified worksheet
            </summary>
            <param name="sheet">instance of worksheet</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetScrolledEventArgs">
            <summary>
            Represents an event argument class for worksheet scrolling.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetScrolledEventArgs.X">
            <summary>
            Scrolled horizontal value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetScrolledEventArgs.Y">
            <summary>
            Scrolled vertical value.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetScrolledEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet)">
            <summary>
            Create the instance of this event argument.
            </summary>
            <param name="worksheet">The worksheet where event happened.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellPosEventArgs">
            <summary>
            Position event argument on spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellPosEventArgs.Position">
            <summary>
            Zero-based two-dimensional coordinates to locate a cell on spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellPosEventArgs.#ctor(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Construc this position event argument with specfieid position
            </summary>
            <param name="pos">zero-based two-dimensional coordinates on spreadsheet</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellEventArgs">
            <summary>
            Event raised on action was performed for any cells
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellEventArgs.Cell">
            <summary>
            Get instance of current editing cell. This property may be null.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellEventArgs.#ctor(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Create instance for CellEventArgs with specified cell.
            </summary>
            <param name="cell">Instance of current editing cell.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs">
            <summary>
            ReoGrid common mouse event argument
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.Worksheet">
            <summary>
            Worksheet instance
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.Buttons">
            <summary>
            Pressed mouse buttons
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.RelativePosition">
            <summary>
            Event source associated mouse position
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.AbsolutePosition">
            <summary>
            Event source unassociated mouse position (Position to control)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.Clicks">
            <summary>
            Number of clicks
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.Delta">
            <summary>
            Delta value (only used in mouse wheel event)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.Capture">
            <summary>
            Get or set whether to capture mouse from current event
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.CursorStyle">
            <summary>
            Get or set the cursor style during mouse over
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetMouseEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons,System.Int32)">
            <summary>
            Construct mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="relativePosition">mouse relative position to current event owner</param>
            <param name="absolutePosition">mouse absolute position to spreadsheet control</param>
            <param name="buttons">pressed button flags</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellMouseEventArgs">
            <summary>
            ReoGrid cell mouse event argument
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellMouseEventArgs.Cell">
            <summary>
            Event source instance of cell. Note: this property may be null if cell has no data and style attached. 
            Check this property and create cell instance by CellPosition property.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellMouseEventArgs.CellPosition">
            <summary>
            Zero-based cell position
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellMouseEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cellPosition">cell position</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellMouseEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons,System.Int32)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cellPosition">cell position</param>
            <param name="relativePosition">relative mouse position (position in cell)</param>
            <param name="absolutePosition">absolute mouse position (position in spreadsheet)</param>
            <param name="buttons">pressed buttons</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellMouseEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cell">cell instance</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellMouseEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,Spire.Spreadsheet.Forms.SpreadCell,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons,System.Int32)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cell">cell instance</param>
            <param name="relativePosition">relative mouse position (position in cell)</param>
            <param name="absolutePosition">absolute mouse position (position in spreadsheet)</param>
            <param name="buttons">pressed buttons</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellMouseEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,Spire.Spreadsheet.Forms.SpreadCell,Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons,System.Int32)">
            <summary>
            Create cell mouse event argument with specified parameters
            </summary>
            <param name="worksheet">worksheet instance</param>
            <param name="cell">cell instance</param>
            <param name="cellPosition">cell position</param>
            <param name="relativePosition">relative mouse position (position in cell)</param>
            <param name="absolutePosition">absolute mouse position (position in spreadsheet)</param>
            <param name="buttons">pressed buttons</param>
            <param name="clicks">number of clicks</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetKeyEventArgs">
            <summary>
            Common key event argument
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellKeyDownEventArgs">
            <summary>
            Common key event argument for cells
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellKeyDownEventArgs.Cell">
            <summary>
            Cell of event source
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellKeyDownEventArgs.CellPosition">
            <summary>
            Position of cell of event source
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BeforeCellKeyDownEventArgs">
            <summary>
            Event raised when user presses any key inside spreadsheet before built-in operations
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeCellKeyDownEventArgs.IsCancelled">
            <summary>
            Determines whether or not should to cancel the following operations of this event.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.AfterCellKeyDownEventArgs">
            <summary>
            Event raised when user presses any key inside spreadsheet after built-in operations
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellAfterEditEventArgs">
            <summary>
            Event raised after cell editing. Set 'NewData' property to a
            new value to change the data instead of edited value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAfterEditEventArgs.NewData">
            <summary>
            Set the data to new value instead of edited value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAfterEditEventArgs.EndReason">
            <summary>
            Reason of edit operation ending. Set this property to restore 
            the data to the value of before editing.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellAfterEditEventArgs.DataFormat">
            <summary>
            When new data has been inputed, ReoGrid choose one formatter to 
            try to format the data. Set this property to force change the 
            formatter for the new data.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellAfterEditEventArgs.#ctor(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Create instance for CellAfterEditEventArgs
            </summary>
            <param name="cell">Cell edited by user</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellBeforeEditEventArgs">
            <summary>
            Event raised before cell enter edit mode. Set 'IsCancelled' property force to stop default edit operation.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBeforeEditEventArgs.IsCancelled">
            <summary>
            Edit operation whether should be aborted.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellBeforeEditEventArgs.EditText">
            <summary>
            Text will display in the input field, this text could be changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellBeforeEditEventArgs.#ctor(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Create instance for CellBeforeEditEventArgs with specified cell.
            </summary>
            <param name="cell">Instance of cell will be edited by user.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellEditTextChangingEventArgs">
            <summary>
            Cell edit text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellEditTextChangingEventArgs.Text">
            <summary>
            Get or set the inputting text. Set new text to replace the text of user inputted.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellEditTextChangingEventArgs.#ctor(Spire.Spreadsheet.Forms.SpreadCell)">
            <summary>
            Create event argument with specified cell.
            </summary>
            <param name="cell">instance of cell</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellEditCharInputEventArgs">
            <summary>
            Event raised when unicode char was inputted during cell editing,
            replace the <code>InputChar</code> property to alter the input character.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellEditCharInputEventArgs.InputChar">
            <summary>
            Get or set the input character.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellEditCharInputEventArgs.CaretPositionInLine">
            <summary>
            Get position of current editing text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellEditCharInputEventArgs.LineIndex">
            <summary>
            Get line index of current editing text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellEditCharInputEventArgs.InputText">
            <summary>
            Get current edit text inputted by user.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetRowsEventArgs">
            <summary>
            Base argument for events when worksheet row changed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetRowsEventArgs.Row">
            <summary>
            Zero-based row index number.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetRowsEventArgs.Count">
            <summary>
            Number of rows changed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetRowsEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for RowEventArgs with specified row index number.
            </summary>
            <param name="row">Zero-based row index number.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RowsInsertedEventArgs">
            <summary>
            Argument for event when row inserted into worksheet.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RowsDeletedEventArgs">
            <summary>
            Event raised when rows deleted from spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RowsDeletedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instance for RowEventArgs with specified row index number.
            </summary>
            <param name="row">zero-based number of row start to delete</param>
            <param name="count">number of rows to be deleted</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RowsHeightChangedEventArgs">
            <summary>
            Argument for event that will be raised when columns width is changed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RowsHeightChangedEventArgs.Height">
            <summary>
            The new height that has been changed for rows.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetColumnsEventArgs">
            <summary>
            Event raised when an action of column header was performed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetColumnsEventArgs.Index">
            <summary>
            Zero-based number to insert columns
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetColumnsEventArgs.Count">
            <summary>
            Indicates that how many columns has been inserted or appended
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetColumnsEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create instead for ColumnEventArgs with specified column header number.
            </summary>
            <param name="index">Column index number.</param>
            <param name="count">Column count.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ColumnsInsertedEventArgs">
            <summary>
            Event raised when new column was inserted into a spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnsInsertedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create column inserted event argument
            </summary>
            <param name="index">Zero-based number of column start to insert</param>
            <param name="count">Number of columns to be inserted.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ColumnsDeletedEventArgs">
            <summary>
            Event raised when columns deleted from spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ColumnsDeletedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Create column deleted event argument
            </summary>
            <param name="index">number of column start to delete</param>
            <param name="count">number of columns to be deleted</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ColumnsWidthChangedEventArgs">
            <summary>
            Argument for event that will be raised when columns width is changed.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ColumnsWidthChangedEventArgs.Width">
            <summary>
            The new width changed for columns.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BorderAddedEventArgs">
            <summary>
            Event raised on border added to a range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BorderAddedEventArgs.Pos">
            <summary>
            Position of border added.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BorderAddedEventArgs.Style">
            <summary>
            Style of border added.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderAddedEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.BorderPositions,Spire.Spreadsheet.Forms.BorderStyle)">
            <summary>
            Create instance for BorderAddedEventArgs with specified range, 
            position of border and style of border.
            </summary>
            <param name="range"></param>
            <param name="pos"></param>
            <param name="style"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BorderRemovedEventArgs">
            <summary>
            Event raised on border removed from a range.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BorderRemovedEventArgs.Pos">
            <summary>
            Position of border removed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BorderRemovedEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.BorderPositions)">
            <summary>
            Create instance for BorderRemovedEventArgs with specified range and
            position of border.
            </summary>
            <param name="range"></param>
            <param name="pos"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FileLoadedEventArgs">
            <summary>
            Event raised on grid loaded from a stream.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.FileLoadedEventArgs.Filename">
            <summary>
            Full path of file. Available only grid was loaded from a file stream.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.FileLoadedEventArgs.#ctor(System.String)">
            <summary>
            Create instance for FileSavedEventArgs with specified file path.
            </summary>
            <param name="filename">Full path of file</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FileSavedEventArgs">
            <summary>
            Event raised on grid saved to a stream.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.FileSavedEventArgs.Filename">
            <summary>
            Full path of file. Available only grid be saved into a file stream.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.FileSavedEventArgs.#ctor(System.String)">
            <summary>
            Create instance for FileSavedEventArgs with specified file path.
            </summary>
            <param name="filename">Full path of file</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ExceptionHappenEventArgs">
            <summary>
            Event raised when any exceptions happen during built-in operations of worksheet.
            Such as Range copy/cut/move via built-in hotkeys.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ExceptionHappenEventArgs.Exception">
            <summary>
            Get or set the exception instance.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ExceptionHappenEventArgs.#ctor(Spire.Spreadsheet.Forms.IWorksheet,System.Exception)">
            <summary>
            Create exception instance.
            </summary>
            <param name="sheet">Worksheet instance.</param>
            <param name="exception">Exception instance.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SelectionMovedForwardEventArgs">
            <summary>
            Event raised when selection moved to next position. 
            ReoGrid automatically move selection to right cell or below cell according
            to <code>SelectionForwardDirection</code> property of worksheet. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SelectionMovedForwardEventArgs.IsCancelled">
            <summary>
            Decide whether to cancel current move operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SelectionMovedForwardEventArgs.#ctor">
            <summary>
            Create instance of SelectionMovedForwardEventArgs with specified position.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SelectionMovedBackwardEventArgs">
            <summary>
            Event raised when selection moved to previous position. 
            ReoGrid automatically move selection to left cell or above cell according
            to <code>SelectionForwardDirection</code> property of worksheet. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SelectionMovedBackwardEventArgs.IsCancelled">
            <summary>
            Decide whether to cancel current move operation.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.SelectionMovedBackwardEventArgs.#ctor">
            <summary>
            Create instance of SelectionMovedBackwardEventArgs with specified position.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs">
            <summary>
            Argument class for event of BeforeSelectionChange
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs.SelectionStart">
            <summary>
            Get or set selection start position
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs.SelectionEnd">
            <summary>
            Get or set selection end position
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs.StartRow">
            <summary>
            Get or set the start row of selection
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs.StartCol">
            <summary>
            Get or set this start column of selection
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs.EndRow">
            <summary>
            Get or set the end row of selection
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs.EndCol">
            <summary>
            Get or set the end column of selection
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BeforeSelectionChangeEventArgs.#ctor(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Create this argument by specified selection start and end position
            </summary>
            <param name="selectionStart">The start position of selection</param>
            <param name="selectionEnd">The end position of selection</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeEventArgs">
            <summary>
            Event raised on action was performed for range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeEventArgs.Range">
            <summary>
            Range of action performed
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create instance for RangeEventArgs with specified range.
            </summary>
            <param name="range">Range of action performed</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BeforeRangeOperationEventArgs">
            <summary>
            Event raised when operation to be performed to range, this class has
            the property 'IsCancelled' it used to notify grid control to abort
            current operation.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeRangeOperationEventArgs.IsCancelled">
            <summary>
            Get or set the flag that be used to notify the grid 
            whether to abort current operation
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BeforeRangeOperationEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create instance of this class with specified range position
            </summary>
            <param name="range">Target range where performs the operation of this event</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CopyOrMoveRangeEventArgs">
            <summary>
            Event argument for copying or moving range by dragging mouse
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CopyOrMoveRangeEventArgs.FromRange">
            <summary>
            Source range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CopyOrMoveRangeEventArgs.ToRange">
            <summary>
            Target range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CopyOrMoveRangeEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create event argument instance
            </summary>
            <param name="fromRange">Source range</param>
            <param name="toRange">Target range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.BeforeCopyOrMoveRangeEventArgs">
            <summary>
            Event argument before copying or moving range by dragging mouse
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.BeforeCopyOrMoveRangeEventArgs.IsCancelled">
            <summary>
            Cancelled flag used to notify control that abort the copy or move operation
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.BeforeCopyOrMoveRangeEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create event argument instance
            </summary>
            <param name="fromRange">Source range</param>
            <param name="toRange">Target range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeOperationErrorEventArgs">
            <summary>
            Event raised when any errors happened during range operation
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeOperationErrorEventArgs.Exception">
            <summary>
            The exception if happened during range operation
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeOperationErrorEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.Exception)">
            <summary>
            Construct instance with specified range
            </summary>
            <param name="range">Target range</param>
            <param name="ex">Additional exception associated to the range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.SettingsChangedEventArgs">
            <summary>
            Event raised when control's settings has been changed
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SettingsChangedEventArgs.AddedSettings">
            <summary>
            The setting flags what have been added
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.SettingsChangedEventArgs.RemovedSettings">
            <summary>
            The setting flags what have been removed
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRangeEventArgs">
            <summary>
            Common named range event argument
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRangeEventArgs.Name">
            <summary>
            Name of range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.String)">
            <summary>
            Create named range event argument with specified parameters
            </summary>
            <param name="range">range as operation target</param>
            <param name="name">name of range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRangeAddedEventArgs">
            <summary>
            Event raised when named range has been added into spreadsheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRangeAddedEventArgs.NamedRange">
            <summary>
            Named range instance
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeAddedEventArgs.#ctor(Spire.Spreadsheet.Forms.NamedRange)">
            <summary>
            Create event argument instance with named range instance
            </summary>
            <param name="namedRange">named range instance</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeAddedEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.String)">
            <summary>
            Create event argument instance with specified parameters
            </summary>
            <param name="range">spreadsheet range definition</param>
            <param name="name">the name of added range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRangeUndefinedEventArgs">
            <summary>
            Event raised when named range has been deleted from spreadsheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeUndefinedEventArgs.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.String)">
            <summary>
            Construct event argument with specified parameters
            </summary>
            <param name="range">spreadsheet range definition</param>
            <param name="name">the name of deleted range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ExcelPatternType">
            <summary>
            Enumerates cell pattern types.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReoGridException">
            <summary>
            Common exception of ReoGrid component
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridException.#ctor(System.String)">
            <summary>
            Create common exception with specified exception message
            </summary>
            <param name="msg">message used to describe the exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridException.#ctor(System.String,System.Exception)">
            <summary>
            Create common exception with specified message and inner exception
            </summary>
            <param name="msg">message used to describe the exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorkbookLoadException">
            <summary>
            Exception is thrown when any errors happened during loading spreadsheet from a stream.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorkbookLoadException.#ctor(System.String)">
            <summary>
            Create exception instance
            </summary>
            <param name="msg">Additional message to describe the exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorkbookLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception instance
            </summary>
            <param name="msg">Addtional message to describe the exception</param>
            <param name="ex">Addtional original exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorkbookException">
            <summary>
            Common workbook exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorkbookException.#ctor(System.String)">
            <summary>
            Create common workbook exception with specified message
            </summary>
            <param name="msg">message to describe this exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorkbookException.#ctor(System.String,System.Exception)">
            <summary>
            Create common workbook exception with specified message
            </summary>
            <param name="msg">message to describe this exception</param>
            <param name="ex">inner exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetException">
            <summary>
            Common worksheet exception
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WorksheetException.Worksheet">
            <summary>
            worksheet of exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetException.#ctor(System.String)">
            <summary>
            Create this exception with specified message
            </summary>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetException.#ctor(Spire.Spreadsheet.Forms.IWorksheet,System.String)">
            <summary>
            Create this exception with specified worksheet and message
            </summary>
            <param name="Worksheet">worksheet where exception happened</param>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FreezeUnsupportedException">
            <summary>
            Exception is thrown when current viewport controller does not support the freeze functionality.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.InvalidAddressException">
            <summary>
            Excepiton is thrown when an address is passed into a method which is described in the incorrect format, 
            or the address is out of valid range of spreadsheet.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.InvalidReferenceException">
            <summary>
            Exception is thrown when an reference as string neither is an valid address nor a registered name to locate a range.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReferenceObjectNotAssociatedException">
            <summary>
            Exception will be thrown when a reference object lost its owner object.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceObjectNotAssociatedException.#ctor(System.String)">
            <summary>
            Construct this exception with specified message
            </summary>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.InvalidWorksheetNameException">
            <summary>
            Exception thrown when an invalid name specified for worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.InvalidWorksheetNameException.#ctor(Spire.Spreadsheet.Forms.IWorksheet,System.String)">
            <summary>
            Create this exception with specified worksheet and message
            </summary>
            <param name="worksheet">worksheet where exception happened</param>
            <param name="msg">additional message to describe this exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorksheetNotFoundException">
            <summary>
            Exception caused when specified worksheet cannot be found
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WorksheetNotFoundException.#ctor(System.String)">
            <summary>
            Create exception with additional message.
            </summary>
            <param name="msg">Additional message to describe this exception.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReoGridCellException">
            <summary>
            Cell operations exception 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ReoGridCellException.Pos">
            <summary>
            Position of the cell where the exception happens
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridCellException.#ctor(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Create cell operations exception with specified cell position information
            </summary>
            <param name="pos">cell position information</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeException">
            <summary>
            Common range exception
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeException.Range">
            <summary>
            Get or set the range that is caused this exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create this exception by given range that is caused this exception happen
            </summary>
            <param name="range">Target range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.String)">
            <summary>
            Create this exception by given range and additional message
            </summary>
            <param name="msg">Additional message used to describe this exception</param>
            <param name="range">The range is caused this exception happen</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeIntersectionException">
            <summary>
            The range to be processed intersected with another merged cell will
            cause this exception happen. Often caused when attempt to merged/move/change
            a range that contains any cells belonging to some merged cell.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeIntersectionException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create instance of this exception with given range.
            </summary>
            <param name="range">Intersected another range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeIntersectionException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.String)">
            <summary>
            Create instance of this exception with given range and additional message.
            </summary>
            <param name="range">Intersected another range.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.InvalidRangeException">
            <summary>
            Event thrown when range is invalid to do specified operations
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.InvalidRangeException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create instance of this exception with given range
            </summary>
            <param name="range">Target range to do specified operations</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeTooSmallException">
            <summary>
            Event thrown when range is too small to do specified operations
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeTooSmallException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create instance of this exception with given range
            </summary>
            <param name="range">Target range to do specified operations</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReferenceRangeNotAssociatedException">
            <summary>
            This exception will be thrown when a reference range lost its reference 
            to the instance of grid control.
            
            ReferenceRange should be always created from grid control.
            If the grid control it associated has been disposed, the ReferenceRanges 
            should be also disposed and created again from the grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReferenceRangeNotAssociatedException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create exception instance with specified worksheet range.
            </summary>
            <param name="range">Range information.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRangeNotFoundException">
            <summary>
            Event thrown when attempt to reference a non-existed named range
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.NamedRangeNotFoundException.Name">
            <summary>
            Get or set the name of range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeNotFoundException.#ctor(System.String)">
            <summary>
            Create instance of this exception with additional message
            </summary>
            <param name="msg">Additional message used to describe this exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NamedRangeAlreadyDefinedException">
            <summary>
            Event thrown when attempt to define a named range with existed name 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeAlreadyDefinedException.#ctor">
            <summary>
            Create instance of this exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NamedRangeAlreadyDefinedException.#ctor(System.String)">
            <summary>
            Create instance of this exception with additional message
            </summary>
            <param name="name">Name for range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.InvalidNamedRangeException">
            <summary>
            Event thrown when attempt to define named range with an invalid name
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.InvalidNamedRangeException.Name">
            <summary>
            Get or set the name of range
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.InvalidNamedRangeException.#ctor(System.String)">
            <summary>
            Create this exception with given invalid name
            </summary>
            <param name="name">The name used to define named range</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CircularReferenceException">
            <summary>
            This exception caused when a formula has a reference that causes a circular reference problem
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CircularReferenceException.#ctor">
            <summary>
            Create the instance of this exception
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OutlineException">
            <summary>
            Exception raised when any exception happen during outline operations
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.OutlineException.Start">
            <summary>
            Zero-based start position of row or column in the outline
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.OutlineException.Count">
            <summary>
            Number of rows or columns in the outline
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.OutlineException.End">
            <summary>
            Zero-based end position of row or column in the outline
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.OutlineException.#ctor(System.String)">
            <summary>
            Create the instance of exception by additional message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OutlineIntersectedException">
            <summary>
            Exception thrown when attempt to create an outline that is intersected with other existed outlines. 
            The outlines cannot be intersected each other, they can only be either contained by each other, 
            or be added at different positions.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.OutlineIntersectedException.#ctor">
            <summary>
            Create the instance of exception
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OutlineAlreadyDefinedException">
            <summary>
            Exception thrown when adding an outline at specified position, but another outline has already exist at same position.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.OutlineAlreadyDefinedException.#ctor">
            <summary>
            Create the instance of exception
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OutlineNotFoundException">
            <summary>
            Exception thrown when performing an action to an outline but the outline cannot be found at specified position.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.OutlineNotFoundException.#ctor(System.Int32,System.String)">
            <summary>
            Create the instance of exception
            </summary>
            <param name="start"></param>
            <param name="msg"></param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OutlineOutOfRangeException">
            <summary>
            Exception thrown when adding an outline at specified position, but the position is out of available range of worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.OutlineOutOfRangeException.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Create instance of exception.
            </summary>
            <param name="start">Start position of outline to be added.</param>
            <param name="count">Number of rows or columns of outline to be added.</param>
            <param name="msg">Additional message to describe this exception.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OutlineTooMuchException">
            <summary>
            This exception is thrown when there is already maximum available outlines added into
            grid control. ReoGrid supports maximum 9 outlines in either row or column direction.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.OutlineTooMuchException.#ctor">
            <summary>
            Create the instance of exception
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.OperationOnReadonlyCellException">
            <summary>
            Exception happens when operation applied on a range that contains read-only cells.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.OperationOnReadonlyCellException.#ctor(System.String)">
            <summary>
            Create exception with additional message.
            </summary>
            <param name="msg">The additional message to describe this exception.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CellDataReadonlyException">
            <summary>
            Exception will be thrown when attempt modify the data of cell which is set to readonly.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.CellDataReadonlyException.CellPos">
            <summary>
            Get cell position. (zero-based number of row and column)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CellDataReadonlyException.#ctor(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Create exception with specified cell position.
            </summary>
            <param name="pos">Cell position on worksheet.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.RangeContainsReadonlyCellsException">
            <summary>
            Exception happens when operation applied on a range that contains read-only cells.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.RangeContainsReadonlyCellsException.Range">
            <summary>
            Range that operation applied on.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeContainsReadonlyCellsException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Create exception with the default message.
            </summary>
            <param name="range">Range that operation applied on.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RangeContainsReadonlyCellsException.#ctor(Spire.Spreadsheet.Forms.CellRangeInfo,System.String)">
            <summary>
            Create exception with additional message.
            </summary>
            <param name="range">Range that operation applied on.</param>
            <param name="msg">The additional message to describe this exception.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.CannotCreateCellBodyException">
            <summary>
            Exception will be thrown when the cell body cannot be created for a cell automatically.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CannotCreateCellBodyException.#ctor(System.String)">
            <summary>
            Create exception with additional message.
            </summary>
            <param name="msg">Additional message to describe this exception.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.CannotCreateCellBodyException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception with additional message and inner exception.
            </summary>
            <param name="msg">Additional message to describe this exception.</param>
            <param name="inner">Inner exception that happens in dependency method calls.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReoGridPrintException">
            <summary>
            Common print exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridPrintException.#ctor(System.String)">
            <summary>
            Create common print exception with specified message
            </summary>
            <param name="msg">message of exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridPrintException.#ctor(System.String,System.Exception)">
            <summary>
            Create common print exception with specified message and previous exception
            </summary>
            <param name="msg">message of exception</param>
            <param name="innerEx">previous or inner exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.NoPrintableContentException">
            <summary>
            Exception cause when print command received, but there is no valid content
            to be printed out from the spreadsheet. Check whether the PrintRange set to
            a region where not contain any valid cells if this exception happened.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NoPrintableContentException.#ctor">
            <summary>
            Create no printable content exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.NoPrintableContentException.#ctor(System.String)">
            <summary>
            Create no printable cotent exception with a message
            </summary>
            <param name="msg">message of exception</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PageBreakNotFoundException">
            <summary>
            Exception cause when specified page break cannot be found
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PageBreakNotFoundException.Index">
            <summary>
            Zero-based number of index to find specified page break
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PageBreakNotFoundException.#ctor(System.Int32)">
            <summary>
            Create excpetion with specified number of page break
            </summary>
            <param name="index">zero-based number of page break that cannot be found</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PageBreakNotFoundException.#ctor(System.String,System.Int32)">
            <summary>
            Create exception with specified message and target index
            </summary>
            <param name="msg">message of exception</param>
            <param name="index">zero-based number of page break that cannot be found</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.PageBreakCannotRemoveException">
            <summary>
            Exception for page-break index cannot be removed
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.PageBreakCannotRemoveException.Index">
            <summary>
            Get or set page-break index
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PageBreakCannotRemoveException.#ctor(System.Int32)">
            <summary>
            Create exception instance
            </summary>
            <param name="index">Number of page-break index</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.PageBreakCannotRemoveException.#ctor(System.String,System.Int32)">
            <summary>
            Create exception instance
            </summary>
            <param name="msg">Addtional message to describe the message</param>
            <param name="index">Page-break index to be removed</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReoGridIOException">
            <summary>
            ReoGrid common I/O exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridIOException.#ctor(System.String)">
            <summary>
            Create exception instance by specified message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridIOException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception instance by specified message and original exception object
            </summary>
            <param name="msg">Additional message to describe this exception</param>
            <param name="innerEx">Original exception happened inside loading process</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.ReoGridLoadException">
            <summary>
            Loading exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridLoadException.#ctor(System.String)">
            <summary>
            Create this exception with specified message
            </summary>
            <param name="msg">Addtional message to describe the exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ReoGridLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Create this exception with specified message
            </summary>
            <param name="msg">Addtional message to describe the exception</param>
            <param name="innerEx">Inner exception where original exception happened</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FileFormatNotSupportException">
            <summary>
            File format not supported exception
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.FileFormatNotSupportException.#ctor">
            <summary>
            Create exception instance
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.FileFormatNotSupportException.#ctor(System.String)">
            <summary>
            Create exception instance by specified message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.FileFormatNotSupportException.#ctor(System.String,System.Exception)">
            <summary>
            Create exception instance by specified message
            </summary>
            <param name="msg">Additional message to describe this exception</param>
            <param name="innerEx">Inner exception where original exception happened</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Has(Spire.Spreadsheet.Forms.PlainStyleFlag,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Check whether the style flags contains the specified flags
            </summary>
            <param name="flag">flags container to be checked from</param>
            <param name="target">target flags to be checked to</param>
            <returns>true if style flags contains the specified flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.HasAny(Spire.Spreadsheet.Forms.PlainStyleFlag,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Check whether the style flags contains the any one of specified flags
            </summary>
            <param name="flag">flags container to be checked from</param>
            <param name="target">target flags to be checked to</param>
            <returns>true if style flags contains the any one of specified flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Set(Spire.Spreadsheet.Forms.PlainStyleFlag,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Set style flags
            </summary>
            <param name="flag">flags container to save the value after set</param>
            <param name="target">target flags to be set</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Unset(Spire.Spreadsheet.Forms.PlainStyleFlag,Spire.Spreadsheet.Forms.PlainStyleFlag)">
            <summary>
            Remove flags from style flags
            </summary>
            <param name="flag">flags container to be removed from</param>
            <param name="target">target flags to be removed</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Has(Spire.Spreadsheet.Forms.BorderPositions,Spire.Spreadsheet.Forms.BorderPositions)">
            <summary>
            Check whether specified border position contains another position
            </summary>
            <param name="pos">border position container to be checked from</param>
            <param name="target">target border position to be checked</param>
            <returns>true if border position flags contains the specified flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.HasAny(Spire.Spreadsheet.Forms.BorderPositions,Spire.Spreadsheet.Forms.BorderPositions)">
            <summary>
            Check whether the border position contains any one of specified positions
            </summary>
            <param name="pos">border position container to be checked from</param>
            <param name="target">target border position to be checked</param>
            <returns>true if border position flags contains the specified flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Has(Spire.Spreadsheet.Forms.WorksheetSettings,Spire.Spreadsheet.Forms.WorksheetSettings)">
            <summary>
            Check whether the settings flags contains specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains specified setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.HasAny(Spire.Spreadsheet.Forms.WorksheetSettings,Spire.Spreadsheet.Forms.WorksheetSettings)">
            <summary>
            Check whether the settings flags contains any one of specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains any one of setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Add(Spire.Spreadsheet.Forms.WorksheetSettings,Spire.Spreadsheet.Forms.WorksheetSettings)">
            <summary>
            Set setting flags
            </summary>
            <param name="settings">setting flags used to save the specified flags</param>
            <param name="target">target flags to be set</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Remove(Spire.Spreadsheet.Forms.WorksheetSettings,Spire.Spreadsheet.Forms.WorksheetSettings)">
            <summary>
            Remove setting flags
            </summary>
            <param name="settings">setting flags used to remove the specified flags</param>
            <param name="target">target flags to be removed</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Has(Spire.Spreadsheet.Forms.WorkbookSettings,Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Check whether the settings flags contains specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains specified setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.HasAny(Spire.Spreadsheet.Forms.WorkbookSettings,Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Check whether the settings flags contains any one of specified setting flags
            </summary>
            <param name="settings">the setting flags container to be checked from</param>
            <param name="target">the target setting flags to be checked</param>
            <returns>true if the settings flags contains any one of setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Add(Spire.Spreadsheet.Forms.WorkbookSettings,Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Set setting flags
            </summary>
            <param name="settings">setting flags used to save the specified flags</param>
            <param name="target">target flags to be set</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.Remove(Spire.Spreadsheet.Forms.WorkbookSettings,Spire.Spreadsheet.Forms.WorkbookSettings)">
            <summary>
            Remove setting flags
            </summary>
            <param name="settings">setting flags used to remove the specified flags</param>
            <param name="target">target flags to be removed</param>
            <returns>changed setting flags</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.GenericExtends.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Comparing 2 Generic Dictionary Instances
            quoted from LukeH
            http://stackoverflow.com/questions/3928822/comparing-2-dictionarystring-string-instances
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.SolidColor">
            <summary>
            Represents 32 bits ARGB format solid color. (0~255)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.SolidColor.A">
            <summary>
            Get or set alpha value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.SolidColor.R">
            <summary>
            Get or set red value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.SolidColor.G">
            <summary>
            Get or set green value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.SolidColor.B">
            <summary>
            Get or set blue value.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.#ctor(System.Drawing.Color)">
            <summary>
            Construct color value with specified System.Drawing.Color.
            </summary>
            <param name="color">System.Drawing.Color.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct color value with specified ARGB value.
            </summary>
            <param name="a">Alpha value.</param>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct color value with specified ARGB value. (0-255)
            </summary>
            <param name="a">Alpha value.</param>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct color value with specified ARGB value. (0-255)
            </summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct color value with specified ARGB value. (0-255)
            </summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.#ctor(System.Int32,Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Create color with specified alpha factor and another solid color.
            </summary>
            <param name="alpha">Alpha factor used to decide the transparency of this color.</param>
            <param name="rgb">Another solid color used to create this color.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.#ctor(System.String)">
            <summary>
            Create color from hex format string. (e.g. AARRGGBB or #AARRGGBB)
            </summary>
            <param name="hex"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.ToArgb">
            <summary>
            Convert color value to 4 bytes integer value.
            </summary>
            <returns>Converted 4 bytes integer value.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.ToColor">
            <summary>
            Convert solid color to system drawing color.
            </summary>
            <returns>system drawing color.</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.SolidColor.IsTransparent">
            <summary>
            Check whether or not this color is transparent.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create color with specified ARGB values.
            </summary>
            <param name="a">Alpha value.</param>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
            <returns>Converted color value.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create color with specified ARGB values.
            </summary>
            <param name="a">Alpha value.</param>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
            <returns>Converted color value.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create color with specified RGB values.
            </summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
            <returns>Converted color value.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.FromArgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create color with specified RGB values.
            </summary>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
            <returns>Converted color value.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.FromArgb(System.Int32)">
            <summary>
            Construct color value with merged ARGB int value.
            </summary>
            <param name="argb">Merged ARGB int value to create color object.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.FromRGB(System.Int32)">
            <summary>
            Construct color value with merged RGB int value.
            </summary>
            <param name="rgb">Merged RGB value to create color object.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.ToString">
            <summary>
            Convert to friendly description.
            </summary>
            <returns>Description of color.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.ToStringARGB">
            <summary>
            Convert to friendly description. (e.g. A, R, G, B)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.ToStringHex">
            <summary>
            Convert to friendly description. (e.g. AABBCCDD)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.ToSolidColor">
            <summary>
            Convert to solid color. (equal to self)
            </summary>
            <returns>Converted solid color.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.Randomly">
            <summary>
            Randomly generate a color.
            </summary>
            <returns>New random solid color.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.Light(Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Returns a lighter color of specified color.
            </summary>
            <param name="color">Original color to be changed.</param>
            <returns>Lighter color.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.Dark(Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Returns a darker color of specified color.
            </summary>
            <param name="color">Original color to be changed.</param>
            <returns>Darker color.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.SetBrightness(System.Single,Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Change color brightness.
            </summary>
            <param name="bright">Brightness value.</param>
            <param name="color">Color to be changed.</param>
            <returns>Color has been changed.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.op_Equality(Spire.Spreadsheet.Forms.Graphics.SolidColor,Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Compare two colors and check whether they are same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are same</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.op_Inequality(Spire.Spreadsheet.Forms.Graphics.SolidColor,Spire.Spreadsheet.Forms.Graphics.SolidColor)">
            <summary>
            Compare two colors and check whether they are not same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are not same</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.Equals(System.Object)">
            <summary>
            Compare specified object whether is same as this object
            </summary>
            <param name="obj">Object to be compared</param>
            <returns>True if specified object are same as this object</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.GetHashCode">
            <summary>
            Get hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.op_Implicit(Spire.Spreadsheet.Forms.Graphics.SolidColor)~System.Drawing.Color">
            <summary>
            Convert from System.Drawing.Color to ReoGrid color
            </summary>
            <param name="color">System.Drawing.Color value</param>
            <returns>Converted ReoGrid</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.op_Equality(Spire.Spreadsheet.Forms.Graphics.SolidColor,System.Drawing.Color)">
            <summary>
            Compare two colors and check whether they are not same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are not same</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.SolidColor.op_Inequality(Spire.Spreadsheet.Forms.Graphics.SolidColor,System.Drawing.Color)">
            <summary>
            Compare two colors and check whether they are same
            </summary>
            <param name="c1">First color to be compared</param>
            <param name="c2">Second color to be compared</param>
            <returns>True if specified two color are same</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.GradientFill.StartColor">
            <summary>
            The start color of gradient fill.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.GradientFill.EndColor">
            <summary>
            The end color gradient fill.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.GradientFill.Angle">
            <summary>
            The angle of gradient fill.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.HatchStyles">
            <summary>
            Specifies the hatch style patterns. 
            (This enum is a copy from System.Drawing.Drawing2D.HatchStyle)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.IGraphics">
            <summary>
            Represents abstract cross-platform drawing context.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.LineStyles">
            <summary>
            Represents line styles.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineStyles.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineStyles.Dash">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineStyles.Dot">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineStyles.DashDot">
            <summary>
            Dashed dot
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineStyles.DashDotDot">
            <summary>
            Dashed double dot
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.LineCapStyles">
            <summary>
            Represents line cap styles.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineCapStyles.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineCapStyles.Arrow">
            <summary>
            Arrow
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineCapStyles.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.LineCapStyles.Round">
            <summary>
            Round
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.Matrix3x2f">
            <summary>
            Matrix for 2D graphics.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.Matrix3x2f.Identify">
            <summary>
            Predefined identify matrix.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Matrix3x2f.Translate(System.Single,System.Single)">
            <summary>
            Translate this matrix.
            </summary>
            <param name="x">value of x-coordinate to be offset.</param>
            <param name="y">Value of y-coordinate to be offset.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Matrix3x2f.Rotate(System.Single)">
            <summary>
            Rotate this matrix.
            </summary>
            <param name="angle">Angle to be rotated.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Matrix3x2f.Scale(System.Single,System.Single)">
            <summary>
            Scale this matrix.
            </summary>
            <param name="x">Value of x-aspect to be scaled.</param>
            <param name="y">Value of y-aspect to be scaled.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.Point">
            <summary>
            Represents point information that includes the x-coordinate value and y-coordinate value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Point.X">
            <summary>
            Get or set the value on x-coordinate.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Point.Y">
            <summary>
            Get or set the value on y-coordinate.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.#ctor(System.Single,System.Single)">
            <summary>
            Create point by specified x-coordinate value and y-coordinate value.
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.Equals(System.Object)">
            <summary>
            Compare two points to check whether or not they are same.
            </summary>
            <param name="obj">Another object to be compared with this point.</param>
            <returns>True if two points are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.GetHashCode">
            <summary>
            Get hash code of this point.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.ToString">
            <summary>
            Convert point into string. (Format: {x, y})
            </summary>
            <returns>String converted from this point.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.op_Equality(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Point)">
            <summary>
            Compare two points to check whether or not they are same.
            </summary>
            <param name="size1">First point to be compared.</param>
            <param name="size2">Second point to be compared.</param>
            <returns>True if two points are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.op_Inequality(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Point)">
            <summary>
            Compare two points to check whether or not they are not same.
            </summary>
            <param name="size1">First point to be compared.</param>
            <param name="size2">Second point to be compared.</param>
            <returns>True if two points are not same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.op_Multiply(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Matrix3x2f)">
            <summary>
            Transform point by specified matrix.
            </summary>
            <param name="p">Point to be transformed.</param>
            <param name="m">Matrix used to calculate the result of transform.</param>
            <returns>A transformed point from specified matrix.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.op_Implicit(System.Drawing.Point)~Spire.Spreadsheet.Forms.Graphics.Point">
            <summary>
            Convert System.Drawing.Point to Spire.Spreadsheet.Forms.Graphics.Point.
            </summary>
            <param name="p">Point of Spire.Spreadsheet.Forms.Graphics.Point.</param>
            <returns>Point of System.Drawing.Point.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.op_Implicit(System.Drawing.PointF)~Spire.Spreadsheet.Forms.Graphics.Point">
            <summary>
            Convert System.Drawing.PointF to Spire.Spreadsheet.Forms.Graphics.Point.
            </summary>
            <param name="p">Point of Spire.Spreadsheet.Forms.Graphics.Point.</param>
            <returns>Point of System.Drawing.PointF.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.op_Explicit(Spire.Spreadsheet.Forms.Graphics.Point)~System.Drawing.Point">
            <summary>
            Convert Spire.Spreadsheet.Forms.Graphics.Point to System.Drawing.Point.
            </summary>
            <param name="p">Point of Spire.Spreadsheet.Forms.Graphics.Point.</param>
            <returns>Point of System.Drawing.Point.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Point.op_Implicit(Spire.Spreadsheet.Forms.Graphics.Point)~System.Drawing.PointF">
            <summary>
            Convert Spire.Spreadsheet.Forms.Graphics.Point to System.Drawing.Point.
            </summary>
            <param name="p">Point of Spire.Spreadsheet.Forms.Graphics.Point.</param>
            <returns>Point of System.Drawing.PointF.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.Rectangle">
            <summary>
            Represents a rectangle that contains x, y, width and height information.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.Rectangle.X">
            <summary>
            Get or set the x-coordinate of rectangle.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.Rectangle.Y">
            <summary>
            Get or set the y-coordinate of rectangle.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.Rectangle.Width">
            <summary>
            Get or set the width of rectangle.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Graphics.Rectangle.Height">
            <summary>
            Get or set the height of rectangle.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create rectangle with specified x, y, width and height.
            </summary>
            <param name="x">Value on x-coordinate of rectangle.</param>
            <param name="y">Value on y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.#ctor(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Size)">
            <summary>
            Create rectangle with specified position and size.
            </summary>
            <param name="position">Position of rectangle.</param>
            <param name="size">Size of rectangle.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.#ctor(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Graphics.Point)">
            <summary>
            Create rectangle from specified two positions. This method will find the 
            top-left position and bottom-right position from two positions and create
            rectangle at correct position.
            </summary>
            <param name="firstPosition">First position.</param>
            <param name="secondPosition">Second position.</param>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.Location">
            <summary>
            Get or set the location of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.Size">
            <summary>
            Get or set the size of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.Left">
            <summary>
            Get or set the left position of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.Right">
            <summary>
            Get or set the right position of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.Top">
            <summary>
            Get or set the top position of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.Bottom">
            <summary>
            Get or set the bottom position of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.OriginX">
            <summary>
            Get origin X-coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.OriginY">
            <summary>
            Get origin Y-coordinate of rectangle.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Rectangle.Origin">
            <summary>
            Get origin of rectangle.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.Contains(Spire.Spreadsheet.Forms.Graphics.Point)">
            <summary>
            Check whether or not the specified point is contained by this rectangle.
            </summary>
            <param name="p">Point to be checked.</param>
            <returns>True if the point is contained by this rectangle; Otherwise return false;</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.Contains(System.Single,System.Single)">
            <summary>
            Check whether or not the specified point (described by x and y) is contained by this rectangle.
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
            <returns>True if the point is contained by this rectangle; Otherwise return false;</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.Offset(System.Single,System.Single)">
            <summary>
            Move the rectangle by amount specified by x and y coordinates.
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.Inflate(System.Single,System.Single)">
            <summary>
            Inflate the rectangle by amount specified by x and y coordinates.
            <remarks>
            It is also possible to shrink this rectangle by specifying negative values.
            </remarks>
            </summary>
            <param name="x">Value on x-coordinate.</param>
            <param name="y">Value on y-coordinate.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.IntersectWith(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Determines if this rectangle intersets with rect. 
            </summary>
            <param name="rect">The rectangle to test.</param>
            <returns>This method returns true if there is any intersection, otherwise false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.Intersect(Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Creates a Rectangle that represents the intersection between this Rectangle and rect.
            </summary>
            <param name="rect">The rectangle to test.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.Intersect(Spire.Spreadsheet.Forms.Graphics.Rectangle,Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Check two rectangles and calculate the intersection of two rectangles.
            If no intersection detected, a rectangle with zero width and height is returned.
            </summary>
            <param name="a">First rectangle to be test.</param>
            <param name="b">Second rectangle to be test.</param>
            <returns>Intersected rectangle.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.Equals(System.Object)">
            <summary>
            Compare two rectangles to check whether or not they are same.
            </summary>
            <param name="obj">Another rectange compared to this rectangle.</param>
            <returns>True if two rectangles are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.GetHashCode">
            <summary>
            Get hash code of this rectangle.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.op_Multiply(Spire.Spreadsheet.Forms.Graphics.Rectangle,System.Single)">
            <summary>
            Scale rectangle by multiplying specified scale factor.
            </summary>
            <param name="r">The rectangle to be scaled.</param>
            <param name="s">Scale factor to be multiplied.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.op_Equality(Spire.Spreadsheet.Forms.Graphics.Rectangle,Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Compare two rectangels to check whether or not they are same.
            </summary>
            <param name="r1">First rectangle to be compared.</param>
            <param name="r2">Second rectangle to be compared.</param>
            <returns>True if two rectangles are same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.op_Inequality(Spire.Spreadsheet.Forms.Graphics.Rectangle,Spire.Spreadsheet.Forms.Graphics.Rectangle)">
            <summary>
            Compare two rectangles to check whether or not they are not same.
            </summary>
            <param name="r1">First rectangle to be compared.</param>
            <param name="r2">Second rectangle to be compared.</param>
            <returns>True if two rectangles are not same; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.ToString">
            <summary>
            Convert this rectangle into string. (Format: {x, y, w, h})
            </summary>
            <returns>String converted from this rectangle object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.op_Implicit(System.Drawing.Rectangle)~Spire.Spreadsheet.Forms.Graphics.Rectangle">
            <summary>
            Convert System.Drawing.Rectangle to Spire.Spreadsheet.Forms.Graphics.Rectangle.
            </summary>
            <param name="r">Rectangle of System.Drawing.Rectangle.</param>
            <returns>Rectangle of Spire.Spreadsheet.Forms.Graphics.Rectangle.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.op_Implicit(System.Drawing.RectangleF)~Spire.Spreadsheet.Forms.Graphics.Rectangle">
            <summary>
            Convert System.Drawing.RectangleF to Spire.Spreadsheet.Forms.Graphics.Rectangle.
            </summary>
            <param name="r">Rectangle of System.Drawing.RectangleF.</param>
            <returns>Rectangle of Spire.Spreadsheet.Forms.Graphics.Rectangle.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.op_Explicit(Spire.Spreadsheet.Forms.Graphics.Rectangle)~System.Drawing.Rectangle">
            <summary>
            Convert Spire.Spreadsheet.Forms.Graphics.Rectangle to System.Drawing.Rectangle.
            </summary>
            <param name="r">Rectangle of Spire.Spreadsheet.Forms.Graphics.Rectangle.</param>
            <returns>Rectangle of System.Drawing.Rectangle.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Rectangle.op_Implicit(Spire.Spreadsheet.Forms.Graphics.Rectangle)~System.Drawing.RectangleF">
            <summary>
            Convert Spire.Spreadsheet.Forms.Graphics.Rectangle to System.Drawing.RectangleF.
            </summary>
            <param name="r">Rectangle of Spire.Spreadsheet.Forms.Graphics.Rectangle.</param>
            <returns>Rectangle of System.Drawing.RectangleF.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Graphics.Size">
            <summary>
            Represents size information that contains width and height value.
            </summary>
            <remarks>
            Width and height properties defined as float on Windows Form platform;
            And defined as double on other platforms.
            </remarks>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Size.Width">
            <summary>
            Get and set the width of size.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Graphics.Size.Height">
            <summary>
            Get or set the height of size.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.#ctor(System.Single,System.Single)">
            <summary>
            Create size with specified width and height value. 
            </summary>
            <param name="width">Width of size.</param>
            <param name="height">Height of size.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.Equals(System.Object)">
            <summary>
            Check another object to see whether or not two objects are same.
            </summary>
            <param name="obj">Another object to be compared.</param>
            <returns>True if specified object is size, and its width and height are same with this object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.GetHashCode">
            <summary>
            Get hash code of size object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.ToString">
            <summary>
            Convert size into string. (e.g. Size[100, 50])
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.op_Equality(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.Graphics.Size)">
            <summary>
            Compare two size objects to check whether or not thay have same width and height.
            </summary>
            <param name="size1">First size to be compared.</param>
            <param name="size2">Second size to be compared.</param>
            <returns>True if two size have same width and height; Otherwise return false.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.op_Inequality(Spire.Spreadsheet.Forms.Graphics.Size,Spire.Spreadsheet.Forms.Graphics.Size)">
            <summary>
            Compare two size objects to check whether or not thay have same width and height.
            </summary>
            <param name="size1">First size to be compared.</param>
            <param name="size2">Second size to be compared.</param>
            <returns>False if two size have same width and height; Otherwise return true.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.op_Implicit(System.Drawing.Size)~Spire.Spreadsheet.Forms.Graphics.Size">
            <summary>
            Convert System.Drawing.Size to Spire.Spreadsheet.Forms.Graphics.Size.
            </summary>
            <param name="size">System.Drawing.Size struct</param>
            <returns>Spire.Spreadsheet.Forms.Graphics.Size struct</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.op_Implicit(System.Drawing.SizeF)~Spire.Spreadsheet.Forms.Graphics.Size">
            <summary>
            Convert System.Drawing.SizeF to Spire.Spreadsheet.Forms.Graphics.Size.
            </summary>
            <param name="size">System.Drawing.SizeF struct</param>
            <returns>Spire.Spreadsheet.Forms.Graphics.Size struct</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.op_Explicit(Spire.Spreadsheet.Forms.Graphics.Size)~System.Drawing.Size">
            <summary>
            Convert Spire.Spreadsheet.Forms.Graphics.Size to System.Drawing.Size.
            </summary>
            <param name="size">Spire.Spreadsheet.Forms.Graphics.Size struct</param>
            <returns>System.Drawing.Size struct</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Graphics.Size.op_Implicit(Spire.Spreadsheet.Forms.Graphics.Size)~System.Drawing.SizeF">
            <summary>
            Convert Spire.Spreadsheet.Forms.Graphics.Size to System.Drawing.SizeF.
            </summary>
            <param name="size">Spire.Spreadsheet.Forms.Graphics.Size struct</param>
            <returns>System.Drawing.SizeF struct</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComment.Worksheet">
            <summary>
            Gets worksheet of the comment.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComment.Position">
            <summary>
            Get position of the comment.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComment.PlainText">
            <summary>
            Gets or sets the text of the Comment. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComment.Width">
            <summary>
            Get or set the width of the comment.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComment.Height">
            <summary>
            Get or set the height of the comment. 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComment.Visible">
            <summary>
            Represents the visibility of a Comment.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IComment.Parent">
            <summary>
            Reference to Parent object. Read-only.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IComment.GetPlainText">
            <summary>
            Get plain text of the comment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IComment.SetPlainText(System.String)">
            <summary>
            Set plain text of the comment.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IComment.Dispose">
            <summary>
            Dispose object and free resources.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Interaction.CursorStyle">
            <summary>
            Cursor style 
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.PlatformDefault">
            <summary>
            Default (Auto)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.Hand">
            <summary>
            Hand
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.Selection">
            <summary>
            Range Selection
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.FullRowSelect">
            <summary>
            Full Row Selector
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.FullColumnSelect">
            <summary>
            Full Column Selector
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.EntireSheet">
            <summary>
            Entire worksheet Selector
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.Move">
            <summary>
            Move object
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.Copy">
            <summary>
            Copy object
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.ChangeColumnWidth">
            <summary>
            Change Column Width
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.ChangeRowHeight">
            <summary>
            Change Row Height
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.ResizeHorizontal">
            <summary>
            Horizontal Resize
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.ResizeVertical">
            <summary>
            Vertical Resize
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.Busy">
            <summary>
            Busy (Waiting)
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.CursorStyle.Cross">
            <summary>
            Cross Cursor
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Interaction.MouseButtons">
            <summary>
            Mouse button down status
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.MouseButtons.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.MouseButtons.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.MouseButtons.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.MouseButtons.Centred">
            <summary>
            Centred
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Interaction.ToggleStatus">
            <summary>
            Represent for the button status of mouse
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.ToggleStatus.Normal">
            <summary>
            The button has its normal appearance (three-dimensional).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.ToggleStatus.Inactive">
            <summary>
            The button is inactive (grayed).
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.ToggleStatus.Pushed">
            <summary>
            The button appears pressed.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.ToggleStatus.Checked">
            <summary>
            The button has a checked or latched appearance. Use this appearance to show
            that a toggle button has been pressed.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.ToggleStatus.Flat">
            <summary>
            The button has a flat, two-dimensional appearance.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Interaction.ToggleStatus.All">
            <summary>
            All flags except Normal are set.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Interaction.IUserVisual">
            <summary>
            Represents an user-interactive object in ReoGrid cross-platform views system.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.OnMouseDown(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            Handle mouse down event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.OnMouseMove(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            Handle mouse move event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.OnMouseUp(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            Handle mouse up event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.OnMouseDoubleClick(Spire.Spreadsheet.Forms.Graphics.Point,Spire.Spreadsheet.Forms.Interaction.MouseButtons)">
            <summary>
            Handle mouse double click event
            </summary>
            <param name="location">Transformed relative location to this object</param>
            <param name="buttons">Current mouse button pressing status</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.OnKeyDown(Spire.Spreadsheet.Forms.Interaction.KeyCode)">
            <summary>
            Handle key down event
            </summary>
            <param name="keys">ReoGrid virtual keys (equal to System.Windows.Forms.Keys)</param>
            <returns>True if event handled; otherwise return false</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.SetFocus">
            <summary>
            Set this object to get user interface focus. Object after get focus can always 
            receive user's mouse and keyboard input.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.FreeFocus">
            <summary>
            Release user interface focus from this object. This object will no longer be able to 
            receive user's mouse and keyboard input.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Interaction.IUserVisual.Invalidate">
            <summary>
            Redraw this object.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.FileFormatType">
            <summary>
            File format flag
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FileFormatType.Excel97to2003">
            <summary>
            Represents an Excel 97 ~2003 file.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FileFormatType.Excel2007to2013">
            <summary>
            Represents an Excel 2007 ~ 2013 xlsx file.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.FileFormatType.CSV">
            <summary>
            Represents an csv file.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Worksheet">
            <summary>
            Gets worksheet object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Row">
            <summary>
            Gets cell row index.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Column">
            <summary>
            Gets cell column index.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Name">
            <summary>
            Gets cell name.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Location">
            <summary>
            Gets cell location.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Value">
            <summary>
            Gets or sets a cell value.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Text">
            <summary>
            Gets a cell text.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Style">
            <summary>
            Gets or sets style of cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.FormulaValue">
            <summary>
             Gets formula value of the cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Font">
            <summary>
            Gets or sets font of spread cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.FontColor">
            <summary>
            Gets or set font color of spread cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.ISpreadCell.Protected">
            <summary>
            Indicates whether the cell is protected.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISpreadCell.SetCellValue(System.Object)">
            <summary>
            Sets cell value.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.ISpreadCell.IsFormula">
            <summary>
            Indicates the cell is a formula or not.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Spreadsheet">
            <summary>
            Gets Spreadsheet object.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.PageSetup">
            <summary>
            Get page setup.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.MaxDataRow">
            <summary>
            Get max data row.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.MaxDataCol">
            <summary>
            Get max data column.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoSplitPage">
            <summary>
            Split page.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.ColumnPageBreaks">
            <summary>
            Get collection of column page breaks.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.RowPageBreaks">
            <summary>
            Get collection of row page breaks.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.ConditionalFormattings">
            <summary>
            Get conditional formattings of worksheet
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.IsProtected">
            <summary>
            Indicates whether worksheet object is protected.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.GridLinesVisible">
            <summary>
            Indicates whether the gridlines is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.SheetName">
            <summary>
            Gets or sets the name of the sheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.FrozenRows">
            <summary>
            Get or set Worksheet's frozen row count.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.FrozenColumns">
            <summary>
            Get or set Worksheet's frozen column count.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.ActiveCellAdressInfo">
            <summary>
            Get the active cell.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Hyperlinks">
            <summary>
            Gets the hyperlink collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Pictures">
            <summary>
            Gets the picture collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Shapes">
            <summary>
            Gets the shape collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Charts">
            <summary>
            Gets the chart collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Comments">
            <summary>
            Gets the comment collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Controls">
            <summary>
            Gets the cell control collection.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.ColumnCount">
            <summary>
            Get or set the column count of the Worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.FirstVisibleColumn">
            <summary>
            Get or set the first visible column of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.FirstVisibleRow">
            <summary>
            Get the first visible row of the worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Columns">
            <summary>
            Get the collection of columns that belong to this Worksheet.
            </summary>
            
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Rows">
            <summary>
            Get the collection of rows that belong to this Worksheet.
            </summary>
            
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.RowCount">
            <summary>
            Get or set the row count of the Worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Cells">
            <summary>
            Get the collection of cells that belong to this worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.MergeRangesCount">
            <summary>
            Get the count of the merges 
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.IsVisible">
            <summary>
            Represent if the worksheet is visible.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.WorksheetCustomProperties">
            <summary>
            Gets the CustomProperties. 
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.EnableRowFilter">
            <summary>
            Enable row filter.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.DisableRowFilter">
            <summary>
            Disable row filter.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.RemoveRowFilter">
            <summary>
            Remove row filter.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AppendColumns(System.Int32)">
            <summary>
            Append specified columns to worksheet.
            <param name="count">number of columns</param>
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertColumn(System.Int32)">
            <summary>
            Insert a new column.
            </summary>
            <param name="index">index of column</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AppendRows(System.Int32)">
            <summary>
            Append specified rows to spreadsheet.
            </summary>
            <param name="count">number of rows</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertRow(System.Int32)">
            <summary>
            Insert a new row.
            </summary>
            <param name="index">row index</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.RemoveColumn(System.Int32)">
            <summary>
            Remove a column at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.RemoveRow(System.Int32)">
            <summary>
            Remove a row at the specified index.
            </summary>
            
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Item(System.Int32,System.Int32)">
            <summary>
            Get spread cell at specific row and colum.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get cell range.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <param name="lastRow"></param>
            <param name="lastColumn"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Item(System.String)">
            <summary>
            Gets spread cell by cell name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.IWorksheet.Item(System.String,System.String)">
            <summary>
            Get cell range.
            </summary>
            <param name="startName"></param>
            <param name="endName"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.HasActiveCell">
            <summary>
            Determines whether the cell is actived.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetActiveCell">
            <summary>
            Get the active cell.
            </summary>
            <returns>Cell object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetActiveCell(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Set the active cell at the specified location.
            </summary>
            <param name="cellAdressInfo">Cell location.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetActiveCell(System.Int32,System.Int32)">
            <summary>
            Set the active cell at the specified column and row.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ClearCell(System.Int32,System.Int32)">
            <summary>
            Clear cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ClearCell(Spire.Spreadsheet.Forms.ISpreadCell)">
            <summary>
            Clear cell.
            </summary>
            <param name="cell">GridCell object.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ClearCell(System.String)">
            <summary>
            Clear cell.
            </summary>
            <param name="cellRange">Cell range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetSelectedRange">
            <summary>
            Get the selected cell range.
            </summary>
            <returns>CellRange object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetAllSelectedRanges">
            <summary>
            Gets all selected ranges of this worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AddSelectedRange(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Add a new selected range to the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.CheckInSelection(Spire.Spreadsheet.Forms.CellAdressInfo)">
            <summary>
            Determines whether the specified cell location is in selected.
            </summary>
            <param name="cellAdressInfo">Cell location.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.CheckInSelectionsByColumn(System.Int32)">
            <summary>
            Check whether the specified column at index is in selected.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.CheckInSelectionByRow(System.Int32)">
            <summary>
            Check whether the specified row at index is in selected.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ClearSelection">
            <summary>
            Clear the selection in Worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.FromRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get CellRangeInfo from a range of worksheet.
            </summary>
            <param name="startRow">Start Row index.</param>
            <param name="startColumn">Start Column index.</param>
            <param name="endRow">End Row index.</param>
            <param name="endColumn">End Column index.</param>
            <returns>A CellRange object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.FromRange(System.String,System.String)">
            <summary>
            Gets CellRangeInfo from a range of worksheet.
            </summary>
            <param name="startCellRange">Start cell range.</param>
            <param name="endCellRange">End cell range.</param>
            <returns>A CellRange object.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetRangeFont(Spire.Spreadsheet.Forms.CellRangeInfo,System.Drawing.Font)">
            <summary>
            Set the font to cells of specified range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetRangeFontColor(Spire.Spreadsheet.Forms.CellRangeInfo,System.Drawing.Color)">
            <summary>
            Set the font color to cells of specified range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ImportDataView(System.Data.DataView,System.Int32,System.Int32)">
            <summary>
            Import data from data view to worksheet.
            </summary>
            <param name="dataView">Dataset</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ImportDataSet(System.Data.DataSet,System.String,System.Int32,System.Int32)">
            <summary>
            Import data from a dataset to worksheet.
            </summary>
            <param name="dataSet">Dataset</param>
            <param name="dataMember">DataMember</param>
            <param name="firstRow">The first row.</param>
            <param name="firstColumn">The first column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Import data from a DataTable into worksheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Export worksheet data into a DataTable
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.ExportDataTable(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Export worksheet data into a DataTable
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.Merge(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Merge a specified range.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.Merge(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merge a specified range.
            </summary>
            <param name="firstRow">First row.</param>
            <param name="firstColumn">First column.</param>
            <param name="endRow">End row.</param>
            <param name="endColumn">End column.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.Unmerge(Spire.Spreadsheet.Forms.CellRangeInfo)">
            <summary>
            Unmerge a specified range of merged cells. 
            </summary>
            <param name="range">Merged cells range.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.RemoveAllMerges">
            <summary>
            Remove all merges.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetMerge(System.Int32)">
            <summary>
            Get the cell range of the merge at the specified index.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GroupRows(System.Int32,System.Int32)">
            <summary>
            Group rows from specified number of rows 
            </summary>
            <param name="firstRow">number of rows to start group.</param>
            <param name="count">numbers of column to be grouped</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GroupRows(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group rows from specified number of rows 
            </summary>
            <param name="firstRow">number of rows to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
            <param name="outlineLevel">outlineLevel</param>
            <param name="visible">visible.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GroupRows(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group rows from specified number of rows 
            </summary>
            <param name="firstRow">number of rows to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
            <param name="visible">visible.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.UngroupRows(System.Int32,System.Int32)">
            <summary>
            Ungroups rows.
            </summary>
            <param name="firstRow">number of row to ungroup.</param>
            <param name="count">number of rows to ungroup.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GroupColumns(System.Int32,System.Int32)">
            <summary>
            Group columns from specified number of columns 
            </summary>
            <param name="firstColumn">number of columns to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GroupColumns(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group columns from specified number of columns 
            </summary>
            <param name="firstColumn">number of columns to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
            <param name="visible">visible</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GroupColumns(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Group columns from specified number of columns.
            </summary>
            <param name="firstColumn">number of columns to start group.</param>
            <param name="count">numbers of column to be grouped.</param>
            <param name="outlineLevel">outlineLevel</param>
            <param name="visible">visible</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.UngroupColumns(System.Int32,System.Int32)">
            <summary>
            Ungroups columns.
            </summary>
            <param name="firstColumn">number of column to ungroup.</param>
            <param name="count">number of columns to ungroup.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitColumn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofit column.
            </summary>
            <param name="columnIndex">Column index.</param>
            <param name="firstRow">Zero-based index of the first row to be used for autofit operation.</param>
            <param name="lastRow">Zero-based index of the last row to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitColumn(System.Int32)">
            <summary>
            Autofit the column width.
            </summary>
            <param name="columnIndex">column index</param>     
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitColumn(System.Int32,System.Int32)">
            <summary>
            Autofit the column width.
            </summary>
            <param name="fistColumn">Zero-based index of the first column to be used for autofit operation.</param>
            <param name="lastColumn">Zero-based index of the last column to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitColumn">
            <summary>
            Autofit all columns width.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            Autofit the row height. 
            </summary>
            <param name="rowIndex">row index, zero based</param>
            <param name="firstColumn">Zero-based index of the first column to be used for autofit operation.</param>
            <param name="lastColumn">Zero-based index of the last column to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitRow(System.Int32)">
            <summary>
            Autofit the row height. 
            </summary>
            <param name="rowIndex">row index</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitRow(System.Int32,System.Int32)">
            <summary>
            Autofit the row height.
            </summary>
            <param name="firstRow">Zero-based index of the first row to be used for autofit operation.</param>
            <param name="lastRow">Zero-based index of the last row to be used for autofit operation.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.AutoFitRow">
            <summary>
            Autofit all rows height
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetFirstVisibleColumn(System.Int32)">
            <summary>
            Set the first visible column index of sheet view.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.CaculateSelectedValue">
            <summary>
            Calculates the sum of selected ranges of the worksheet.
            </summary>
            <returns>the sum or null.</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.FreezeRow(System.Int32)">
            <summary>
            Freeze grid at specified row. 
            </summary>
            <param name="Row">row index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.UnfreezeRow">
            <summary>
            UnFreeze grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.UnfreezeColumn">
            <summary>
            UnFreeze grid.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.FreezeColumn(System.Int32)">
            <summary>
             Freeze grid at specified column.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetNumber(System.Int32,System.Int32)">
            <summary>
            Gets number value from specific cell.
            </summary>
            <param name="row">Row index</param>
            <param name="column">Column index</param>
            <returns>Number value</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.Protect">
            <summary>
            Protect the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.Unprotect">
            <summary>
            Unprotect the worksheet.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetColumnWidthPixels(System.Int32)">
            <summary>
            Get column width.
            </summary>
            <param name="col">Col index</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetRowHeightPixels(System.Int32)">
            <summary>
            Get row height.
            </summary>
            <param name="row">Row index</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.GetText(System.Int32,System.Int32)">
            <summary>
            Gets string value from specific cell.
            </summary>
            <param name="row">Row index.</param>
            <param name="column">Column index.</param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.Object[0:,0:],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrObject"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDateTime"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.DateTime[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDateTime"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.Double[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDouble"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.Double[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrDouble"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrInt"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.Int32[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrInt"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.Object[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrObject"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.Object[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrObject"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.String[],System.Int32,System.Int32)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrString"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertArray(System.String[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Insert array value to worksheet.
            </summary>
            <param name="arrString"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
            <param name="IsVertical"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertDataColumn(System.Data.DataColumn,System.Int32,System.Int32)">
            <summary>
            Insert data column to worksheet.
            </summary>
            <param name="dataColumn"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertDataTable(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            Insert datatable to workhseet.
            </summary>
            <param name="dataTable"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.InsertDataView(System.Data.DataView,System.Int32,System.Int32)">
            <summary>
            Insert dataview to workhseet.
            </summary>
            <param name="dataView"></param>
            <param name="firstRow"></param>
            <param name="firstColumn"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.IsColumnVisible(System.Int32)">
            <summary>
            Checks whether the column is visible.
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.IsRowVisible(System.Int32)">
            <summary>
            Checks whether the row is visible.
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetColumnWidthInPixels(System.Int32,System.Int32)">
            <summary>
            Sets column with.
            </summary>
            <param name="columnIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetDefaultColumnStyle(System.Int32,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Sets column style.
            </summary>
            <param name="columnIndex"></param>
            <param name="defaultStyle"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetDefaultRowStyle(System.Int32,Spire.Spreadsheet.Forms.Utility.CellStyle)">
            <summary>
            Set row style.
            </summary>
            <param name="rowIndex"></param>
            <param name="defaultStyle"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetFormula(System.Int32,System.Int32,System.String)">
            <summary>
            Sets formula value to specific cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetNumber(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets number value to specific cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetRowHeightPixels(System.Int32,System.Double)">
            <summary>
            Sets row height.
            </summary>
            <param name="row"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetText(System.Int32,System.Int32,System.String)">
            <summary>
            Sets string value to specific cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Sets value to specific cell.
            </summary>
            <param name="iRow"></param>
            <param name="iColumn"></param>
            <param name="value"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.Resize(System.Int32,System.Int32)">
            <summary>
            Resets row count and column count.
            </summary>
            <param name="rows"></param>
            <param name="cols"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetRows(System.Int32)">
            <summary>
            Sets rows count.
            </summary>
            <param name="rows"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SetColumns(System.Int32)">
            <summary>
            Set columns count.
            </summary>
            <param name="columns"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SortColumn(System.Int32)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex">column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SortColumns(System.Int32,System.Int32)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SortColumn(System.Int32,Spire.Spreadsheet.Forms.SortOrder,System.Boolean)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex">column index.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SortColumns(System.Int32,System.Int32,Spire.Spreadsheet.Forms.SortOrder,System.Boolean)">
            <summary>
            Sort data on specified column.
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.SortColumns(System.Int32[],Spire.Spreadsheet.Forms.SortOrder[],System.Boolean)">
            <summary>
            Sort data on specified columns.
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.IWorksheet.CalculateAllValue">
            <summary>
            Caculate all value of whole sheet.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Rendering.BorderPainter">
            <summary>
            Draw borders at the specified location.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Rendering.BorderPainter.Instance">
            <summary>
            Get BorderPainter instance
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Rendering.BorderPainter.DrawLine(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single,Spire.Spreadsheet.Forms.BorderStyle)">
            <summary>
            Draw border at specified location
            </summary>
            <param name="g">instance for graphics object</param>
            <param name="x">x coordinate of start point</param>
            <param name="y">y coordinate of start point</param>
            <param name="x2">x coordinate of end point</param>
            <param name="y2">y coordinate of end point</param>
            <param name="style">style instance of border</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Rendering.BorderPainter.DrawLine(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single,Spire.Spreadsheet.Forms.Utility.BorderLineType,Spire.Spreadsheet.Forms.Graphics.SolidColor,System.Drawing.Pen)">
            <summary>
            Draw border at specified position.
            </summary>
            <param name="g">Instance for graphics object.</param>
            <param name="x">X coordinate of start point.</param>
            <param name="y">Y coordinate of start point.</param>
            <param name="x2">X coordinate of end point.</param>
            <param name="y2">Y coordinate of end point.</param>
            <param name="style">Style flag of border.</param>
            <param name="color">Color of border.</param>
            <param name="bgPen">Fill pen used when drawing double outline.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Rendering.BorderPainter.Dispose">
            <summary>
            Release all cached objects.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Rendering.SheetView">
            <summary>
            Drawing Mode for render grid control
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Rendering.SheetView.Normal">
            <summary>
            View on screen
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Rendering.SheetView.Preview">
            <summary>
            Print preview 
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.Rendering.SheetView.LayoutView">
            <summary>
            Print
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Rendering.DrawingContext">
            <summary>
            Represents the platform no-associated drawing context.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Rendering.DrawingContext.Worksheet">
            <summary>
            Get current instance of worksheet.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Rendering.DrawingContext.Graphics">
            <summary>
            Platform independent drawing context.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Rendering.DrawingContext.DrawMode">
            <summary>
            Draw mode that decides what kind of content will be drawn during this drawing event.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Rendering.CellDrawingContext">
            <summary>
            Drawing context for rendering cells.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Rendering.CellDrawingContext.Cell">
            <summary>
            Cell instance if enter a cell drawing event
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Rendering.CellDrawingContext.DrawCellText">
            <summary>
            Recall core renderer to draw cell text
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Rendering.CellDrawingContext.DrawCellBackground">
            <summary>
            Recall core renderer to draw cell background.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WorkbookSettings">
            <summary>
            Workbook Control Settings
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.Default">
            <summary>
            Default Settings
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.Behavior_Default">
            <summary>
            Default behavior settings
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.View_Default">
            <summary>
            Default View Settings 
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.View_ShowSheetTabControl">
            <summary>
            Determine whether or not to show sheet tab control
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.View_ShowScrolls">
            <summary>
            Determine whether or not to show horizontal and vertical scroll bars
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.View_ShowHorScroll">
            <summary>
            Determine whether or not to show horizontal scroll bar
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WorkbookSettings.View_ShowVerScroll">
            <summary>
            Determine whether or not to show vertical scroll bar
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.GetAlphaChar(System.Int64)">
            <summary>
            Get alphabet of number (eg. A is 1 and 30 is AD)
            </summary>
            <param name="a">number to be converted</param>
            <returns>alphabet of number</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.GetNumberOfChar(System.String)">
            <summary>
            Get number of alphabet from string (eg. A is 1 and AD is 30)
            </summary>
            <param name="address">alphabet to be converted</param>
            <returns>number of alphabet</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.IsValidAddress(System.String)">
            <summary>
            Check whether specified string is an valid address to locate cell or range 
            </summary>
            <param name="address">address for cell or range</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.IsValidName(System.String)">
            <summary>
            Chck whether specified string is valid name to define a range
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.ParseTabbedString(System.String)">
            <summary>
            Parse tabbed string into regular array
            </summary>
            <param name="str">string to be parsed</param>
            <returns>parsed regular array</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="absNum">Determine that which R1C1 format should be used.<br/>
            <ul>
            <li>1: [Absolute Row][Absolute Col] R1C1</li>
            <li>2: [Absolute Row][Relative Col] R1C[1]</li>
            <li>3: [Relative Row][Absolute Col] R[1]C1</li>
            <li>4: [Relative Row][Relative Col] R[1]C[1]</li>
            </ul>
            </param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.ToAddress(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="absNum">Determine that which R1C1 format should be used.<br/>
            <ul>
            <li>1: [Absolute Row][Absolute Col] R1C1</li>
            <li>2: [Absolute Row][Relative Col] R1C[1]</li>
            <li>3: [Relative Row][Absolute Col] R[1]C1</li>
            <li>4: [Relative Row][Relative Col] R[1]C[1]</li>
            </ul>
            </param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="rows">Zero-based number of rows</param>
            <param name="cols">Zero-based number of columns</param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.RGUtility.ToAddress(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert position or range into address stringConvert position or range into address string
            </summary>
            <param name="row">Zero-based index number of row</param>
            <param name="col">Zero-based index number of column</param>
            <param name="rows">Zero-based number of rows</param>
            <param name="cols">Zero-based number of columns</param>
            <param name="absNum">Determine that which R1C1 format should be used.<br/>
            <ul>
            <li>1: [Absolute Row][Absolute Col] R1C1</li>
            <li>2: [Absolute Row][Relative Col] R1C[1]</li>
            <li>3: [Relative Row][Absolute Col] R[1]C1</li>
            <li>4: [Relative Row][Relative Col] R[1]C[1]</li>
            </ul>
            </param>
            <param name="a1style">true to use A1 style; false use the R1C1 style</param>
            <returns>position or range in address string</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Views.CellsViewport.TryGetCellPositionToControl(Spire.Spreadsheet.Forms.Views.IView,Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.Graphics.Point@)">
            <summary>
            Transform position of specified cell into the position on control
            </summary>
            <param name="view">Source view of the specified cell position.</param>
            <param name="pos">Cell position to be converted.</param>
            <param name="p">Output point of the cell position related to grid control.</param>
            <returns>True if conversion is successful; Otherwise return false.</returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Views.IFreezableViewportController">
            <summary>
            Interface for freezable ViewportController
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Views.IFreezableViewportController.Freeze(Spire.Spreadsheet.Forms.CellAdressInfo,Spire.Spreadsheet.Forms.FreezeArea)">
            <summary>
            Freeze to specified cell and position.
            </summary>
            <param name="pos">Position of cell to start freeze.</param>
            <param name="area">Decides the frozen view area.</param>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Views.NormalViewportController">
            <summary>
            Standard view controller for normal scene of control
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Views.NormalViewportController.GetVisibleRegion(Spire.Spreadsheet.Forms.Views.Viewport)">
            <summary>
            Update visible region for viewport. Visible region decides how many rows and columns 
            of cells (from...to) will be displayed.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.Views.GridRegion.ToRange">
            <summary>
            Convert into range struct
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Views.IView">
            <summary>
            A view is a visual region which can be independent rendered on ReoGrid control.
            A view can contains multiple child views.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Views.Viewport.VisibleRegion">
            <summary>
            View window for cell address, decides how many cells are visible for this viewport.
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Views.Viewport.ViewStart">
            <summary>
            View window start position. (Scroll position)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Views.Viewport.ViewTop">
            <summary>
            Top position of view window. (Vertial scroll position)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Views.Viewport.ViewLeft">
            <summary>
            Left position of view window. (Horizontal scroll position)
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Views.Viewport.ViewBounds">
            <summary>
            The bounds of view window, starts from scroll position, ends at scroll position + window size.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WinForm.AboutForm">
            <summary>
            About dialog form of ReoGrid
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.AboutForm.#ctor">
            <summary>
            Create about dialog
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WinForm.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WinForm.DebugForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.DebugForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.DebugForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WinForm.Designer.WorkbookEditorForm">
            <summary>
            Workbook editor for design-time of Visual Studio
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.Designer.WorkbookEditorForm.#ctor">
            <summary>
            Create editor instance
            </summary>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WinForm.Designer.WorkbookEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.Designer.WorkbookEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.Designer.WorkbookEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.GDIGraphics.PushTransform">
            <summary>
            Push a new transform matrix into stack. (Backup current transform matrix)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.GDIGraphics.PushTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Push specified transform matrix into stack. (Backup current transform matrix)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.GDIGraphics.PopTransform">
            <summary>
            Pop the last transform matrix from stack. (Restore transform matrix to previous status)
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.GDIGraphics.ScaleTransform(System.Single,System.Single)">
            <summary>
            Scale current transform matrix.
            </summary>
            <param name="sx">X-factor to be scaled.</param>
            <param name="sy">Y-factor to be scaled.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.GDIGraphics.TranslateTransform(System.Single,System.Single)">
            <summary>
            Translate current transform matrix.
            </summary>
            <param name="x">X-offset value to be translated.</param>
            <param name="y">Y-offset value to be translated.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.GDIGraphics.RotateTransform(System.Single)">
            <summary>
            Rotate current transform matrix by specified angle.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.GDIGraphics.ResetTransform">
            <summary>
            Reset current transform matrix. (Load identity)
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WinForm.RenameSheetDialog">
            <summary>
            Represents the sheet rename dialog
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WinForm.RenameSheetDialog.SheetName">
            <summary>
            Name of sheet
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.RenameSheetDialog.#ctor">
            <summary>
            Create dialog
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.RenameSheetDialog.OnLoad(System.EventArgs)">
            <summary>
            Event when dialog was loaded
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Spire.Spreadsheet.Forms.WinForm.RenameSheetDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.RenameSheetDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.RenameSheetDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.WinForm.SheetTabControl">
            <summary>
            Represents the sheet tab control.
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.#ctor(Spire.Spreadsheet.Forms.Spreadsheet)">
            <summary>
            Construct the control
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.Position">
            <summary>
            Specifies the position of tab control
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.BorderStyle">
            <summary>
            Specifies the border style of every tabs
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.Shadow">
            <summary>
            Show shadows beside of every tabs
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.AllowDragToMove">
            <summary>
            Determine whether or not allow to move tab by dragging mouse
            </summary>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaint method
            </summary>
            <param name="e">paint event argument</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Override system mouse down event
            </summary>
            <param name="e">mouse down event argument</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.GetItemByPoint(System.Int32)">
            <summary>
            Return index of item by specified x-coordinate point.
            </summary>
            <param name="x">value of x-coordinate point</param>
            <returns>zero-based number of tab at specified screen coordinate, returns -1 if no found</returns>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.MoveItem(System.Int32,System.Int32)">
            <summary>
            Move item to specified position
            </summary>
            <param name="fromIndex">number of tab to be moved</param>
            <param name="targetIndex">position of moved to</param>
        </member>
        <member name="M:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.ScrollToItem(System.Int32)">
            <summary>
            Scroll to display specified tab item
            </summary>
            <param name="index">zero-based number of item to be displayed for scrolling</param>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.SelectedIndexChanged">
            <summary>
            Event raised when selected tab is changed
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.SplitterMoving">
            <summary>
            Event raised when splitter is moved
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.SheetListClick">
            <summary>
            Event raised when sheet list button is clicked
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.NewSheetClick">
            <summary>
            Event raised when new sheet butotn is clicked
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.TabMouseDown">
            <summary>
            Event raised when mouse is pressed down on tab items
            </summary>
        </member>
        <member name="E:Spire.Spreadsheet.Forms.WinForm.SheetTabControl.TabMoved">
            <summary>
            Event raised when tab item is moved
            </summary>
        </member>
        <member name="T:Spire.Spreadsheet.Forms.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.AlignLayoutBottom">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.AlignLayoutMiddle">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.AlignLayoutTop">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.AlignTableCellMiddleCenterHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.AlignTableCellMiddleLeftJustHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.AlignTableCellMiddleRightHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.all_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.all_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.all_design">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.all_design_32">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.all_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.all_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bottom_line_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bottom_line_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bottom_line_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bottom_line_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bottom_line_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bounds_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bounds_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bounds_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.bounds_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.cell_merge">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.cell_merge_bak">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.cell_unmerge">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.center_line_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.center_line_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.center_line_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.center_line_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.center_line_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.ColorHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.CopyHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.cross">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.CutHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.Edit_RedoHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.Edit_UndoHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.EULA_EN">
            <summary>
              查找类似 END-USER LICENSE AGREEMENT FOR UNVELL IMPORTANT PLEASE READ THE TERMS AND CONDITIONS OF THIS LICENSE AGREEMENT CAREFULLY BEFORE CONTINUING WITH THIS PROGRAM INSTALL: UNVELL End-User License Agreement (&quot;EULA&quot;) is a legal agreement between you (either an individual or a single entity) and UNVELL. for the UNVELL software product(s) identified above which may include associated software components, media, printed materials, and &quot;online&quot; or electronic documentation (&quot;EULA&quot;). By installing, copying, or otherwise  [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.Filter2HS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.font_larger">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.font_smaller">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.FontDialogHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.formula">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.full_col_select">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.full_row_select">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.FunctionHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.grid_select">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.inside_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.inside_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.inside_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.inside_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.inside_solid_32">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.inside_solid_321">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.italic">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.LandscapeHH">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_bottom_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_bottom_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_bottom_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_bottom_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_line_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_line_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_line_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_line_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_line_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_right_blod">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_right_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_right_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_right_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_top_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_top_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.left_top_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.middle_line_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.middle_line_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.middle_line_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.middle_line_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.middle_line_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.NewBuildDefinition_8952_inactive_png">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.NewBuildDefinition_8952_png">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.NewDocumentHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.none_border">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.none_border_32">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.none_border_321">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.openHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.outline_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.outline_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.outline_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.outline_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.outline_solid_32">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.outline_solid_321">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.PageWidthHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.PasteHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.pick_range">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.PortraitHH">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.PrintPreviewHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.PropertiesHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.RadialChartHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.RepeatHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_bottom_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_bottom_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_bottom_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_line_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_line_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_line_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_line_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_line_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_top_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_top_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.right_top_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.saveHS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.ShowGridlines2HS">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_left_blod">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_left_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_left_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_left_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_left_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_right_blod">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_right_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_right_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_right_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.slash_right_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.strikethrough">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.style_brush">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.textwrap">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.toolbar_get_info">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_bottom_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_bottom_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_bottom_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_bottom_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_bottom_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_line_bold">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_line_dash">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_line_dot">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_line_solid">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.top_line_solid1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.trash">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.underlinee">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:Spire.Spreadsheet.Forms.Properties.Resources.VSProject_script">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
    </members>
</doc>
